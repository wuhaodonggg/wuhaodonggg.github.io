<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>聂佳类比推理</title>
      <link href="/2024/09/04/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%81%82%E4%BD%B3%E7%B1%BB%E6%AF%94%E6%8E%A8%E7%90%86/"/>
      <url>/2024/09/04/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%81%82%E4%BD%B3%E7%B1%BB%E6%AF%94%E6%8E%A8%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="聂佳类比推理"><a href="#聂佳类比推理" class="headerlink" title="聂佳类比推理"></a>聂佳类比推理</h1><p><img src="/2024/09/04/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%81%82%E4%BD%B3%E7%B1%BB%E6%AF%94%E6%8E%A8%E7%90%86/image-20240904191841070.png" alt="image-20240904191841070"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 类比推理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 聂佳 </tag>
            
            <tag> 类比推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜微——第十节（人物素材）</title>
      <link href="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/"/>
      <url>/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第十节（人物素材）"><a href="#杜微——第十节（人物素材）" class="headerlink" title="杜微——第十节（人物素材）"></a>杜微——第十节（人物素材）</h1><h2 id="科技创新"><a href="#科技创新" class="headerlink" title="科技创新"></a>科技创新</h2><p><img src="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/image-20240903223148158.png" alt="image-20240903223148158"></p><p><img src="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/image-20240903223303337.png" alt="image-20240903223303337"></p><h2 id="报效祖国"><a href="#报效祖国" class="headerlink" title="报效祖国"></a>报效祖国</h2><p><img src="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/image-20240903223720273.png" alt="image-20240903223720273"></p><p><img src="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/image-20240903223905157.png" alt="image-20240903223905157"></p><h2 id="自立自强"><a href="#自立自强" class="headerlink" title="自立自强"></a>自立自强</h2><p><img src="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/image-20240903224040478.png" alt="image-20240903224040478"></p><h2 id="坚守正义"><a href="#坚守正义" class="headerlink" title="坚守正义"></a>坚守正义</h2><p><img src="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/image-20240903224318182.png" alt="image-20240903224318182"></p><p><img src="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/image-20240903224334242.png" alt="image-20240903224334242"></p><h2 id="坚持不懈"><a href="#坚持不懈" class="headerlink" title="坚持不懈"></a>坚持不懈</h2><p><img src="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/image-20240903224429465.png" alt="image-20240903224429465"></p><h2 id="无私奉献"><a href="#无私奉献" class="headerlink" title="无私奉献"></a>无私奉献</h2><p><img src="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/image-20240903225213993.png" alt="image-20240903225213993"></p><p><img src="/2024/09/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%8D%81%E8%8A%82%EF%BC%88%E4%BA%BA%E7%89%A9%E7%B4%A0%E6%9D%90%EF%BC%89/image-20240903225300803.png" alt="image-20240903225300803"></p><p>精诚所至，金石为开</p><p>艰难困苦，玉汝于成</p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/"/>
      <url>/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第九节（大作文）"><a href="#杜微——第九节（大作文）" class="headerlink" title="杜微——第九节（大作文）"></a>杜微——第九节（大作文）</h1><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901180609256.png" alt="image-20240901180609256"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901180737372.png" alt="image-20240901180737372"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901180837604.png" alt="image-20240901180837604"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901181034793.png" alt="image-20240901181034793"></p><p> <img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901182340026.png" alt="image-20240901182340026"></p><h2 id="每段字数"><a href="#每段字数" class="headerlink" title="每段字数"></a>每段字数</h2><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901182610483.png" alt="image-20240901182610483"></p><h2 id="每段写法"><a href="#每段写法" class="headerlink" title="每段写法"></a>每段写法</h2><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901182649849.png" alt="image-20240901182649849"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901182719999.png" alt="image-20240901182719999"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901182737375.png" alt="image-20240901182737375"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901182821189.png" alt="image-20240901182821189"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901182831085.png" alt="image-20240901182831085"></p><h2 id="正文详细写法"><a href="#正文详细写法" class="headerlink" title="正文详细写法"></a>正文详细写法</h2><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901205835159.png" alt="image-20240901205835159"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901210402393.png" alt="image-20240901210402393"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901210628028.png" alt="image-20240901210628028"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901212106677.png" alt="image-20240901212106677"></p><h2 id="第二段详细写法"><a href="#第二段详细写法" class="headerlink" title="第二段详细写法"></a>第二段详细写法</h2><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901212156111.png" alt="image-20240901212156111"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901212345921.png" alt="image-20240901212345921"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901212523057.png" alt="image-20240901212523057"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901212543503.png" alt="image-20240901212543503"></p><h2 id="分论点段写法"><a href="#分论点段写法" class="headerlink" title="分论点段写法"></a>分论点段写法</h2><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901213503716.png" alt="image-20240901213503716"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901213553272.png" alt="image-20240901213553272"></p><h2 id="结尾段写法"><a href="#结尾段写法" class="headerlink" title="结尾段写法"></a>结尾段写法</h2><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901213614739.png" alt="image-20240901213614739"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240902235929638.png" alt="image-20240902235929638"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901213753022.png" alt="image-20240901213753022"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901213829751.png" alt="image-20240901213829751"></p><h2 id="分论点出处"><a href="#分论点出处" class="headerlink" title="分论点出处"></a>分论点出处</h2><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901214515852.png" alt="image-20240901214515852"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903005026238.png" alt="image-20240903005026238"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903020751513.png" alt="image-20240903020751513"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903165740074.png" alt="image-20240903165740074"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903171409514.png" alt="image-20240903171409514"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904152643600.png" alt="image-20240904152643600"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904190655071.png" alt="image-20240904190655071"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901215229444.png" alt="image-20240901215229444"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901215617499.png" alt="image-20240901215617499"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901221504430.png" alt="image-20240901221504430"></p><p> <img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901221755748.png" alt="image-20240901221755748"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901221904095.png" alt="image-20240901221904095"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901222051050.png" alt="image-20240901222051050"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901222305447.png" alt="image-20240901222305447"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901222655732.png" alt="image-20240901222655732"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901223816962.png" alt="image-20240901223816962"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901224223519.png" alt="image-20240901224223519"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240901224320705.png" alt="image-20240901224320705"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903014339160.png" alt="image-20240903014339160"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903014442902.png" alt="image-20240903014442902"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903014532818.png" alt="image-20240903014532818"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903014638693.png" alt="image-20240903014638693"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903014709061.png" alt="image-20240903014709061"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903020621320.png" alt="image-20240903020621320"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903021311699.png" alt="image-20240903021311699"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903022154000.png" alt="image-20240903022154000"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903022222554.png" alt="image-20240903022222554"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903022343328.png" alt="image-20240903022343328"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903022458929.png" alt="image-20240903022458929"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903022647233.png" alt="image-20240903022647233"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903022706955.png" alt="image-20240903022706955"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903172041182.png" alt="image-20240903172041182"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903172150566.png" alt="image-20240903172150566"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903172242528.png" alt="image-20240903172242528"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903172257498.png" alt="image-20240903172257498"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903190024268.png" alt="image-20240903190024268"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903190247687.png" alt="image-20240903190247687"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903190414657.png" alt="image-20240903190414657"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903190642591.png" alt="image-20240903190642591"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903190722373.png" alt="image-20240903190722373"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903191012226.png" alt="image-20240903191012226"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903191047010.png" alt="image-20240903191047010"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240903191104217.png" alt="image-20240903191104217"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904153841099.png" alt="image-20240904153841099"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904154258397.png" alt="image-20240904154258397"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904172238646.png" alt="image-20240904172238646"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904184512210.png" alt="image-20240904184512210"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904184532857.png" alt="image-20240904184532857"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904184609457.png" alt="image-20240904184609457"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904184624535.png" alt="image-20240904184624535"><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904185149361.png" alt="image-20240904185149361"><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904185300133.png" alt="image-20240904185300133"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904185418419.png" alt="image-20240904185418419"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904185514824.png" alt="image-20240904185514824"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904185626582.png" alt="image-20240904185626582"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904185638024.png" alt="image-20240904185638024"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904190542772.png" alt="image-20240904190542772"><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904190629406.png" alt="image-20240904190629406"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904223326928.png" alt="image-20240904223326928"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240904233018996.png" alt="image-20240904233018996"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905010011110.png" alt="image-20240905010011110"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905011313841.png" alt="image-20240905011313841"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905011414202.png" alt="image-20240905011414202"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905011500927.png" alt="image-20240905011500927"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905011610556.png" alt="image-20240905011610556"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905011617667.png" alt="image-20240905011617667"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905012032409.png" alt="image-20240905012032409"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905012046153.png" alt="image-20240905012046153"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905012222601.png" alt="image-20240905012222601"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905012235751.png" alt="image-20240905012235751"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905012408793.png" alt="image-20240905012408793"></p><p><img src="/2024/09/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%A4%A7%E4%BD%9C%E6%96%87%EF%BC%89/image-20240905012624583.png" alt="image-20240905012624583"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜微——第九节（对策角度公文）</title>
      <link href="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E8%A7%92%E5%BA%A6%E5%85%AC%E6%96%87%EF%BC%89/"/>
      <url>/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E8%A7%92%E5%BA%A6%E5%85%AC%E6%96%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第九节（对策角度公文）"><a href="#杜微——第九节（对策角度公文）" class="headerlink" title="杜微——第九节（对策角度公文）"></a>杜微——第九节（对策角度公文）</h1><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E8%A7%92%E5%BA%A6%E5%85%AC%E6%96%87%EF%BC%89/image-20240831230357692.png" alt="image-20240831230357692"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E8%A7%92%E5%BA%A6%E5%85%AC%E6%96%87%EF%BC%89/image-20240831230629062.png" alt="image-20240831230629062"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E8%A7%92%E5%BA%A6%E5%85%AC%E6%96%87%EF%BC%89/image-20240831231412469.png" alt="image-20240831231412469"></p><p> <img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E8%A7%92%E5%BA%A6%E5%85%AC%E6%96%87%EF%BC%89/image-20240831233123793.png" alt="image-20240831233123793"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E8%A7%92%E5%BA%A6%E5%85%AC%E6%96%87%EF%BC%89/image-20240831233428995.png" alt="image-20240831233428995"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B9%9D%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E8%A7%92%E5%BA%A6%E5%85%AC%E6%96%87%EF%BC%89/image-20240831233515396.png" alt="image-20240831233515396"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜微——第八节（提纲要点）</title>
      <link href="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AB%E8%8A%82%EF%BC%88%E6%8F%90%E7%BA%B2%E8%A6%81%E7%82%B9%EF%BC%89/"/>
      <url>/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AB%E8%8A%82%EF%BC%88%E6%8F%90%E7%BA%B2%E8%A6%81%E7%82%B9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第八节（提纲要点）"><a href="#杜微——第八节（提纲要点）" class="headerlink" title="杜微——第八节（提纲要点）"></a>杜微——第八节（提纲要点）</h1><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AB%E8%8A%82%EF%BC%88%E6%8F%90%E7%BA%B2%E8%A6%81%E7%82%B9%EF%BC%89/image-20240831210558321.png" alt="image-20240831210558321"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AB%E8%8A%82%EF%BC%88%E6%8F%90%E7%BA%B2%E8%A6%81%E7%82%B9%EF%BC%89/image-20240831211723190.png" alt="image-20240831211723190"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AB%E8%8A%82%EF%BC%88%E6%8F%90%E7%BA%B2%E8%A6%81%E7%82%B9%EF%BC%89/image-20240831214322762.png" alt="image-20240831214322762"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AB%E8%8A%82%EF%BC%88%E6%8F%90%E7%BA%B2%E8%A6%81%E7%82%B9%EF%BC%89/image-20240831214817606.png" alt="image-20240831214817606"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AB%E8%8A%82%EF%BC%88%E6%8F%90%E7%BA%B2%E8%A6%81%E7%82%B9%EF%BC%89/image-20240831221337882.png" alt="image-20240831221337882"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第九章——片段阅读之语句排序</title>
      <link href="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第九章——片段阅读之语句排序"><a href="#言语理解第九章——片段阅读之语句排序" class="headerlink" title="言语理解第九章——片段阅读之语句排序"></a>言语理解第九章——片段阅读之语句排序</h1><h2 id="整体把握"><a href="#整体把握" class="headerlink" title="整体把握"></a>整体把握</h2><p>套入常见结构（多为前对策、后对策、总分、并列/大并列等），用常见结构判断语句顺序，尤其注意转折、对比引出话题。</p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E6%8E%92%E5%BA%8F/image-20240831172542061.png" alt="image-20240831172542061"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E6%8E%92%E5%BA%8F/image-20240831173027820.png" alt="image-20240831173027820"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E6%8E%92%E5%BA%8F/image-20240831173407861.png" alt="image-20240831173407861"></p><p><img src="/2024/08/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E6%8E%92%E5%BA%8F/image-20240831173824477.png" alt="image-20240831173824477"></p><h2 id="宏观把握"><a href="#宏观把握" class="headerlink" title="宏观把握"></a>宏观把握</h2><ul><li>①可通过套入结构（前对策、后对策、总分、并列等），确定行文顺序；</li><li>②可通过明显前后顺序（时间、指代等），确定行文顺序；</li><li>③可通过“分堆”的方法（同一话题相邻），大致确定行文顺序。</li></ul><h2 id="盯住细节"><a href="#盯住细节" class="headerlink" title="盯住细节"></a>盯住细节</h2><h3 id="判断首句"><a href="#判断首句" class="headerlink" title="判断首句"></a>判断首句</h3><p>“下定义”是首句的可能性很高，有指代的一定不会是首句。</p><h3 id="捆绑组合"><a href="#捆绑组合" class="headerlink" title="捆绑组合"></a>捆绑组合</h3><p>可通过转折、指代、相同词语找到必须捆绑在一起的“组合句”。</p><h1 id="片段阅读之细节判断"><a href="#片段阅读之细节判断" class="headerlink" title="片段阅读之细节判断"></a>片段阅读之细节判断</h1><h2 id="整体把握-1"><a href="#整体把握-1" class="headerlink" title="整体把握"></a>整体把握</h2><p>细节题没有普适性的解题方法，题与题之间相似性不大，都需要验证每个选项的正误；一般来说，细节判断题只需要断句，而不需要分析结构；<br>正确率较低的细节判断题，可能的原因一般有两种：一是逻辑性极强，“深挖坑”，二是正确选项也存在瑕疵，此时我们需要抓住致命问题，而忽略其他。</p><h2 id="细节题的错误选项"><a href="#细节题的错误选项" class="headerlink" title="细节题的错误选项"></a>细节题的错误选项</h2><p>偷换概念、混淆时态、杂糅、本身有误（不符合实际）、绝对化、无中生有等。</p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第八章——片段阅读之语句填入</title>
      <link href="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/"/>
      <url>/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第八章——片段阅读之语句填入"><a href="#言语理解第八章——片段阅读之语句填入" class="headerlink" title="言语理解第八章——片段阅读之语句填入"></a>言语理解第八章——片段阅读之语句填入</h1><h2 id="宏观把握"><a href="#宏观把握" class="headerlink" title="宏观把握"></a>宏观把握</h2><p>填入语句应符合全文行文逻辑（例如对比、转折等），衔接句要前后衔接得当，总结概括句要概括全面。</p><h2 id="填入语句在文段中所起作用"><a href="#填入语句在文段中所起作用" class="headerlink" title="填入语句在文段中所起作用"></a>填入语句在文段中所起作用</h2><h3 id="【填入语句在中间】"><a href="#【填入语句在中间】" class="headerlink" title="【填入语句在中间】"></a>【填入语句在中间】</h3><p>前对策（若后文为论证）、提出问题（若尾句为对策）、承上启下；</p><h3 id="【填入语句在开头】"><a href="#【填入语句在开头】" class="headerlink" title="【填入语句在开头】"></a>【填入语句在开头】</h3><p>多为总起或概括；</p><h3 id="【填入语句在结尾】"><a href="#【填入语句在结尾】" class="headerlink" title="【填入语句在结尾】"></a>【填入语句在结尾】</h3><p>多为总结或对策句。</p><p>语句填入题目，既要关注细节更要宏观把握。</p><p>宏观把握指的是，填入语句应为全文服务，应承担该起到的作用；关注细节指的是填入语句要和前后句衔接得当。</p><blockquote><p>注意：前句、后句未能找到提示时，要关注首句。</p></blockquote><h2 id="填入语句在开篇"><a href="#填入语句在开篇" class="headerlink" title="填入语句在开篇"></a>填入语句在开篇</h2><p>填入语句可能是总概括、引出话题（包含主题词）、转折引出观点或对策等。</p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830001510510.png" alt="image-20240830001510510"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830002452977.png" alt="image-20240830002452977"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830002925332.png" alt="image-20240830002925332"></p><h2 id="填入语句在中间"><a href="#填入语句在中间" class="headerlink" title="填入语句在中间"></a>填入语句在中间</h2><p>填入语句可能是承上启下、前对策（后文是论证）、提出问题（后文是对策）等。</p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830003401168.png" alt="image-20240830003401168"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830003556770.png" alt="image-20240830003556770"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830003815935.png" alt="image-20240830003815935"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830004131204.png" alt="image-20240830004131204"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830004725571.png" alt="image-20240830004725571"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830004941865.png" alt="image-20240830004941865"></p><h2 id="填入语句在结尾"><a href="#填入语句在结尾" class="headerlink" title="填入语句在结尾"></a>填入语句在结尾</h2><p>填入语句多为总结或对策句，注意首尾呼应。</p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830012810771.png" alt="image-20240830012810771"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830013404832.png" alt="image-20240830013404832"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830013730916.png" alt="image-20240830013730916"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830014612201.png" alt="image-20240830014612201"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830014756033.png" alt="image-20240830014756033"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830015641551.png" alt="image-20240830015641551"></p><h2 id="盯住细节"><a href="#盯住细节" class="headerlink" title="盯住细节"></a>盯住细节</h2><p>填入语句要和前后句关系正确，要注意语法结构正确（主谓宾搭配得当）、逻辑关联词运用得当、全文主语一致、后文指示代词指代正确；可特别考虑句式一致。</p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830015932157.png" alt="image-20240830015932157"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830020145926.png" alt="image-20240830020145926"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830020519387.png" alt="image-20240830020519387"></p><p><img src="/2024/08/30/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E8%AF%AD%E5%8F%A5%E5%A1%AB%E5%85%A5/image-20240830020726894.png" alt="image-20240830020726894"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜微——第七节（公文写作）</title>
      <link href="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/"/>
      <url>/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第七节（公文写作）"><a href="#杜微——第七节（公文写作）" class="headerlink" title="杜微——第七节（公文写作）"></a>杜微——第七节（公文写作）</h1><p>题目小于等于17个字</p><h2 id="题型判断"><a href="#题型判断" class="headerlink" title="题型判断"></a>题型判断</h2><p>（假如你是…，根据….，给…，）</p><p>写/整理/撰写/拟写/草拟  +  文种</p><h2 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h2><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829140121729.png" alt="image-20240829140121729"></p><h2 id="全格式公文"><a href="#全格式公文" class="headerlink" title="全格式公文"></a>全格式公文</h2><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829140630220.png" alt="image-20240829140630220"></p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829140755355.png" alt="image-20240829140755355"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829160622356.png" alt="image-20240829160622356"></p><h3 id="称谓"><a href="#称谓" class="headerlink" title="称谓"></a>称谓</h3><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829161131248.png" alt="image-20240829161131248"></p><h3 id="落款"><a href="#落款" class="headerlink" title="落款"></a>落款</h3><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829161333617.png" alt="image-20240829161333617"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829161340202.png" alt="image-20240829161340202"></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829161408403.png" alt="image-20240829161408403"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829161747408.png" alt="image-20240829161747408"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829161822413.png" alt="image-20240829161822413"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829162228252.png" alt="image-20240829162228252"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829162308247.png" alt="image-20240829162308247"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829162408356.png" alt="image-20240829162408356"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829162420629.png" alt="image-20240829162420629"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829162618628.png" alt="image-20240829162618628"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829164943787.png" alt="image-20240829164943787"></p><p> <img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829173613906.png" alt="image-20240829173613906"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240829181116293.png" alt="image-20240829181116293"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240830215326946.png" alt="image-20240830215326946"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240830221642287.png" alt="image-20240830221642287"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240830222304755.png" alt="image-20240830222304755"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240830230912637.png" alt="image-20240830230912637"></p><h2 id="半格式公文"><a href="#半格式公文" class="headerlink" title="半格式公文"></a>半格式公文</h2><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240830231152212.png" alt="image-20240830231152212"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240830232315635.png" alt="image-20240830232315635"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240830232359331.png" alt="image-20240830232359331"></p><p> <img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240830233523577.png" alt="image-20240830233523577"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240830235350038.png" alt="image-20240830235350038"></p><h2 id="无格式公文"><a href="#无格式公文" class="headerlink" title="无格式公文"></a>无格式公文</h2><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240831000523763.png" alt="image-20240831000523763"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240831000746670.png" alt="image-20240831000746670"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240831152850533.png" alt="image-20240831152850533"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240831153620237.png" alt="image-20240831153620237"></p><p><img src="/2024/08/29/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E5%85%AC%E6%96%87%E5%86%99%E4%BD%9C%EF%BC%89/image-20240831155648208.png" alt="image-20240831155648208"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第七章——片段阅读之下文推断</title>
      <link href="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/"/>
      <url>/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第七章——片段阅读之下文推断"><a href="#言语理解第七章——片段阅读之下文推断" class="headerlink" title="言语理解第七章——片段阅读之下文推断"></a>言语理解第七章——片段阅读之下文推断</h1><p>下文推断题目，也可看作是主旨题目的变形，考察的是行文逻辑的把握。此类题目的上下文有极强的逻辑关系，需要把上文和下文看作一个整体，套入常见行文结构。</p><blockquote><p>注意①：此类题目尾句必然重要，但切忌只关注尾句。</p><p>注意②：上文已经介绍过的，下文一般不再介绍。</p></blockquote><h2 id="三类常见结构"><a href="#三类常见结构" class="headerlink" title="三类常见结构"></a>三类常见结构</h2><ul><li>①上文文末提出新内容→下文解释新内容（尾句起到承上启下作用）；</li><li>②上文提出问题→下文分析问题、解决问题（若同时存在，先分析再解决）；</li><li>③上文给出宏观对策或原因或问题→下文具体展开。</li></ul><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828004909590.png" alt="image-20240828004909590"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828005117017.png" alt="image-20240828005117017"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828005407468.png" alt="image-20240828005407468"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828005741754.png" alt="image-20240828005741754"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828010440055.png" alt="image-20240828010440055"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828010719125.png" alt="image-20240828010719125"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828011040580.png" alt="image-20240828011040580"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828011550891.png" alt="image-20240828011550891"></p><h2 id="不易识别的三种“二层结构”"><a href="#不易识别的三种“二层结构”" class="headerlink" title="不易识别的三种“二层结构”"></a>不易识别的三种“二层结构”</h2><ul><li>①现在与过去对比：过去一真不行→现在有了新突破；</li><li>②总分：上文是总+分→下文补充另一“分”；</li><li>③转折。</li></ul><blockquote><p>注意：不确定时，一定要注意文段首句。</p></blockquote><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828012016373.png" alt="image-20240828012016373"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828012155556.png" alt="image-20240828012155556"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828012306091.png" alt="image-20240828012306091"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828012436855.png" alt="image-20240828012436855"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828012607176.png" alt="image-20240828012607176"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828012657629.png" alt="image-20240828012657629"></p><p><img src="/2024/08/28/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E4%B8%8B%E6%96%87%E6%8E%A8%E6%96%AD/image-20240828004559504.png" alt="image-20240828004559504"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第六章——片段阅读之标题拟定</title>
      <link href="/2024/08/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E6%A0%87%E9%A2%98%E6%8B%9F%E5%AE%9A/"/>
      <url>/2024/08/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E6%A0%87%E9%A2%98%E6%8B%9F%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第六章——片段阅读之标题拟定"><a href="#言语理解第六章——片段阅读之标题拟定" class="headerlink" title="言语理解第六章——片段阅读之标题拟定"></a>言语理解第六章——片段阅读之标题拟定</h1><h2 id="题型说明"><a href="#题型说明" class="headerlink" title="题型说明"></a>题型说明</h2><p>标题拟定为主旨意图题的变型，就是把主旨意图进行“标题化”的改造；</p><h2 id="正确选项要求"><a href="#正确选项要求" class="headerlink" title="正确选项要求"></a>正确选项要求</h2><p>标题中需包含关键词（可做适当同义替换）、主语正确、体现作者观点或对策；标题要有可读性、趣味性，对策类标题要有力量。<strong>标题要特别注意“双引号”选项，是正确选项概率很高。</strong></p><p><img src="/2024/08/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E6%A0%87%E9%A2%98%E6%8B%9F%E5%AE%9A/image-20240827215551412.png" alt="image-20240827215551412"></p><p><img src="/2024/08/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E6%A0%87%E9%A2%98%E6%8B%9F%E5%AE%9A/image-20240827220456452.png" alt="image-20240827220456452"></p><p><img src="/2024/08/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E6%A0%87%E9%A2%98%E6%8B%9F%E5%AE%9A/image-20240827220850810.png" alt="image-20240827220850810"></p><p><img src="/2024/08/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E6%A0%87%E9%A2%98%E6%8B%9F%E5%AE%9A/image-20240827221413714.png" alt="image-20240827221413714"></p><p><img src="/2024/08/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E6%A0%87%E9%A2%98%E6%8B%9F%E5%AE%9A/image-20240827221638926.png" alt="image-20240827221638926"></p><p><img src="/2024/08/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E4%B9%8B%E6%A0%87%E9%A2%98%E6%8B%9F%E5%AE%9A/image-20240827221905733.png" alt="image-20240827221905733"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜微——第六节（综合分析）</title>
      <link href="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/"/>
      <url>/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第六节（综合分析）"><a href="#杜微——第六节（综合分析）" class="headerlink" title="杜微——第六节（综合分析）"></a>杜微——第六节（综合分析）</h1><h2 id="题型判断"><a href="#题型判断" class="headerlink" title="题型判断"></a>题型判断</h2><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240826145638316.png" alt="image-20240826145638316"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240826145736858.png" alt="image-20240826145736858"></p><h2 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h2><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240826145831767.png" alt="image-20240826145831767"></p><h2 id="句子类"><a href="#句子类" class="headerlink" title="句子类"></a>句子类</h2><p>句子的本质是一句观点，作者的观点一般情况默认是正确的。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="表态"><a href="#表态" class="headerlink" title="表态"></a>表态</h3><p>看题干/看要求</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>解释必有，可能是“主语或整句话”，如果都没有，自己大致说明这句话的意思。</p><h3 id="★要素分析"><a href="#★要素分析" class="headerlink" title="★要素分析"></a><strong>★要素分析</strong></h3><ul><li>句子中说啥分析啥</li><li>分析要素展开列点123</li></ul><h3 id="对策"><a href="#对策" class="headerlink" title="对策"></a>对策</h3><p>对策必有，写“因此”</p><p>原文有直接抄，没有自己写</p><p>自己写对策1-2句话大致总结</p><blockquote><p>综合分析的逻辑清晰不考虑分类，答题有步骤就是“逻辑”</p></blockquote><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240826151330999.png" alt="image-20240826151330999"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240826153014986.png" alt="image-20240826153014986"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240826153308230.png" alt="image-20240826153308230"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240826153400071.png" alt="image-20240826153400071"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240826163142294.png" alt="image-20240826163142294"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240826163830692.png" alt="image-20240826163830692"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240827162657294.png" alt="image-20240827162657294"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240827163158001.png" alt="image-20240827163158001"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240827163214798.png" alt="image-20240827163214798"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240827171732117.png" alt="image-20240827171732117"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240827171747406.png" alt="image-20240827171747406"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240827181455995.png" alt="image-20240827181455995"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240827181623533.png" alt="image-20240827181623533"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240827181917161.png" alt="image-20240827181917161"></p><h2 id="词语类"><a href="#词语类" class="headerlink" title="词语类"></a>词语类</h2><h3 id="贬义词"><a href="#贬义词" class="headerlink" title="贬义词"></a>贬义词</h3><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829013514337.png" alt="image-20240829013514337"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829013612797.png" alt="image-20240829013612797"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829013938864.png" alt="image-20240829013938864"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829020639038.png" alt="image-20240829020639038"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829020903269.png" alt="image-20240829020903269"> </p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829023136286.png" alt="image-20240829023136286"></p><h3 id="褒义词"><a href="#褒义词" class="headerlink" title="褒义词"></a>褒义词</h3><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829030236073.png" alt="image-20240829030236073"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829030430145.png" alt="image-20240829030430145"></p><blockquote><p>有些褒义词材料中没有原因或没有问题是正常现象，没有就不写</p></blockquote><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829031237181.png" alt="image-20240829031237181"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829033251043.png" alt="image-20240829033251043"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829042000627.png" alt="image-20240829042000627"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829042151437.png" alt="image-20240829042151437"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829042522486.png" alt="image-20240829042522486"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829042643439.png" alt="image-20240829042643439"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829042733580.png" alt="image-20240829042733580"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829042817675.png" alt="image-20240829042817675"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829042831827.png" alt="image-20240829042831827"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E7%BB%BC%E5%90%88%E5%88%86%E6%9E%90%EF%BC%89/image-20240829042904073.png" alt="image-20240829042904073"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜微——第五节（启示题）</title>
      <link href="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/"/>
      <url>/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第五节（启示题）"><a href="#杜微——第五节（启示题）" class="headerlink" title="杜微——第五节（启示题）"></a>杜微——第五节（启示题）</h1><h2 id="题干判断"><a href="#题干判断" class="headerlink" title="题干判断"></a>题干判断</h2><p>题干：其他国家/其他地区/其他人物的实例</p><p>文：给我们/这一类人 带来什么<strong>启示</strong>？</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240826131720296.png" alt="image-20240826131720296"></p><h3 id="正面实例"><a href="#正面实例" class="headerlink" title="正面实例"></a>正面实例</h3><p>找做法</p><h3 id="考虑通用性"><a href="#考虑通用性" class="headerlink" title="考虑通用性"></a>考虑通用性</h3><ul><li>通用的直接抄</li><li>不通用的总结道理</li></ul><h3 id="反面事例→吸取教训→反推做法"><a href="#反面事例→吸取教训→反推做法" class="headerlink" title="反面事例→吸取教训→反推做法"></a>反面事例→吸取教训→反推做法</h3><ol><li>找做法。</li><li>考虑通用性，能抄的直接抄，不能抄的总结通用性做法。</li></ol><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240826134344183.png" alt="image-20240826134344183"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240826142902342.png" alt="image-20240826142902342"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240826143027252.png" alt="image-20240826143027252"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240826143205179.png" alt="image-20240826143205179"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240826143307842.png" alt="image-20240826143307842"></p><p><img src="/2024/08/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240826143333107.png" alt="image-20240826143333107"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第五章——中心理解题目疑难点</title>
      <link href="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/"/>
      <url>/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第五章——中心理解题目疑难点"><a href="#言语理解第五章——中心理解题目疑难点" class="headerlink" title="言语理解第五章——中心理解题目疑难点"></a>言语理解第五章——中心理解题目疑难点</h1><h2 id="如何抓准对策"><a href="#如何抓准对策" class="headerlink" title="如何抓准对策"></a>如何抓准对策</h2><h3 id="抓准对策局的关键做法"><a href="#抓准对策局的关键做法" class="headerlink" title="抓准对策局的关键做法"></a>抓准对策局的关键做法</h3><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825210720992.png" alt="image-20240825210720992"></p><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825205603787.png" alt="image-20240825205603787"></p><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825205015112.png" alt="image-20240825205015112"></p><h3 id="借助问题和论证确定对策"><a href="#借助问题和论证确定对策" class="headerlink" title="借助问题和论证确定对策"></a>借助问题和论证确定对策</h3><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825211023124.png" alt="image-20240825211023124"></p><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825211422265.png" alt="image-20240825211422265"></p><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825211722399.png" alt="image-20240825211722399"></p><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825212250059.png" alt="image-20240825212250059"></p><h2 id="如何选择“对策与问题”"><a href="#如何选择“对策与问题”" class="headerlink" title="如何选择“对策与问题”"></a>如何选择“对策与问题”</h2><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825212947284.png" alt="image-20240825212947284"></p><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825213507733.png" alt="image-20240825213507733"></p><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825213732599.png" alt="image-20240825213732599"></p><h2 id="如何体现作者态度"><a href="#如何体现作者态度" class="headerlink" title="如何体现作者态度"></a>如何体现作者态度</h2><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825213947361.png" alt="image-20240825213947361"></p><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825214154848.png" alt="image-20240825214154848"></p><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825220104501.png" alt="image-20240825220104501"></p><p><img src="/2024/08/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E7%96%91%E9%9A%BE%E7%82%B9/image-20240825220545085.png" alt="image-20240825220545085"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜微——第四节（对策启示题）</title>
      <link href="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/"/>
      <url>/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第四节（对策启示题）"><a href="#杜微——第四节（对策启示题）" class="headerlink" title="杜微——第四节（对策启示题）"></a>杜微——第四节（对策启示题）</h1><h2 id="题型判断"><a href="#题型判断" class="headerlink" title="题型判断"></a>题型判断</h2><h3 id="提出"><a href="#提出" class="headerlink" title="提出"></a>提出</h3><p>对策、建议、解决措施、解决方案、要如何….</p><h2 id="题干区分"><a href="#题干区分" class="headerlink" title="题干区分"></a>题干区分</h2><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240824180550292.png" alt="image-20240824180550292"></p><ul><li>请你提出解决XX问题的对策<ul><li>只写对策</li></ul></li><li>材料中存在（种种/大量/许多/若干）问题，请就这些问题提出对策<ul><li>问题+对策</li></ul></li></ul><p>问题前量词修饰，问题后“就这些”</p><h2 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h2><p>原文原词，采点给分，列<strong>点</strong>作答</p><p><strong>动词+名词</strong></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="直接对策（抄材料）"><a href="#直接对策（抄材料）" class="headerlink" title="直接对策（抄材料）"></a>直接对策（抄材料）</h3><ol><li>大咖专家，建议必须；</li><li>正确做法，正面事例</li></ol><h3 id="反推对策"><a href="#反推对策" class="headerlink" title="反推对策"></a>反推对策</h3><p>问题及问题的原因，没解决的，逐一反推；</p><p><strong>反推对策要紧扣原文关键词</strong></p><h3 id="特殊要求"><a href="#特殊要求" class="headerlink" title="特殊要求"></a>特殊要求</h3><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240825044208267.png" alt="image-20240825044208267"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240825141331802.png" alt="image-20240825141331802"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240825144951402.png" alt="image-20240825144951402"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E5%AF%B9%E7%AD%96%E5%90%AF%E7%A4%BA%E9%A2%98%EF%BC%89/image-20240825145117072.png" alt="image-20240825145117072"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第四章——中心理解题目之选项分析</title>
      <link href="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/"/>
      <url>/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第四章——中心理解题目之选项分析"><a href="#言语理解第四章——中心理解题目之选项分析" class="headerlink" title="言语理解第四章——中心理解题目之选项分析"></a>言语理解第四章——中心理解题目之选项分析</h1><h2 id="两出处-六有误"><a href="#两出处-六有误" class="headerlink" title="两出处+六有误"></a>两出处+六有误</h2><h3 id="两出处"><a href="#两出处" class="headerlink" title="两出处"></a>两出处</h3><ul><li>背景、例子、分析论证中提炼的选项出处有误，一般不选；</li><li>但是和因此之前、不是而是的不是部分、被指代部分提炼的选项出处有误，一般不选。</li></ul><h3 id="六有误"><a href="#六有误" class="headerlink" title="六有误"></a>六有误</h3><h4 id="片面"><a href="#片面" class="headerlink" title="片面"></a>片面</h4><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824140936727.png" alt="image-20240824140936727"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824142543329.png" alt="image-20240824142543329"></p><h4 id="杂糅"><a href="#杂糅" class="headerlink" title="杂糅"></a>杂糅</h4><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824141645435.png" alt="image-20240824141645435"></p><h4 id="绝对化"><a href="#绝对化" class="headerlink" title="绝对化"></a>绝对化</h4><h4 id="下定义"><a href="#下定义" class="headerlink" title="下定义"></a>下定义</h4><h4 id="无中生有"><a href="#无中生有" class="headerlink" title="无中生有"></a>无中生有</h4><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824143156420.png" alt="image-20240824143156420"></p><h4 id="本身有误"><a href="#本身有误" class="headerlink" title="本身有误"></a>本身有误</h4><h2 id="四大类"><a href="#四大类" class="headerlink" title="四大类"></a>四大类</h2><p>此四类选项对应的文段有典型特征，选项应和文段特征对应。</p><h3 id="原因类"><a href="#原因类" class="headerlink" title="原因类"></a>原因类</h3><p><strong>原因类：</strong>文段为因果或果因结构，或整个文段是“选项”的原因；</p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824153530612.png" alt="image-20240824153530612"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824153944850.png" alt="image-20240824153944850"></p><h3 id="历程类"><a href="#历程类" class="headerlink" title="历程类"></a>历程类</h3><p><strong>历程类：</strong>文段一般有清晰时间轴，介绍整个发展历程；</p><h3 id="具体类"><a href="#具体类" class="headerlink" title="具体类"></a>具体类</h3><p><strong>具体类：</strong>可归纳概括出具体小点“12345”（类似申论概括题目）或展开介绍其中的“1”。</p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824155118512.png" alt="image-20240824155118512"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824155601387.png" alt="image-20240824155601387"></p><h3 id="区别比较联系类"><a href="#区别比较联系类" class="headerlink" title="区别比较联系类"></a>区别比较联系类</h3><p>区别比较联系类：文段有双主语，双主语地位相当，论述篇幅也大致相当。</p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824160301128.png" alt="image-20240824160301128"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824160526505.png" alt="image-20240824160526505"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824160813473.png" alt="image-20240824160813473"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824161405059.png" alt="image-20240824161405059"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824161721600.png" alt="image-20240824161721600"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824162142213.png" alt="image-20240824162142213"></p><h2 id="一正确"><a href="#一正确" class="headerlink" title="一正确"></a>一正确</h2><p><strong>一正确：</strong>指的是“A 且B”形式的选项，看到此类选项可以回看文段，观察文段是否可以看作是“A＋B”的并列结构，且选项和文段一一对应。此类选项因概况全面是正确答案的概率极高。</p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824162704043.png" alt="image-20240824162704043"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824162912146.png" alt="image-20240824162912146"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824163159301.png" alt="image-20240824163159301"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240824163400760.png" alt="image-20240824163400760"></p><h2 id="一比较＋一验证"><a href="#一比较＋一验证" class="headerlink" title="一比较＋一验证"></a>一比较＋一验证</h2><p><strong>一比较：</strong>指的是有具体选项和空泛选项，要选具体的选项。</p><p><strong>一验证：</strong>是一种验证方法，在两个选项纠结时，看是否可根据选项反推出文段。</p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240825182450999.png" alt="image-20240825182450999"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240825182701690.png" alt="image-20240825182701690"></p><p><img src="/2024/08/24/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E9%80%89%E9%A1%B9%E5%88%86%E6%9E%90/image-20240825183615766.png" alt="image-20240825183615766"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第三章——中心理解题目之结构分析</title>
      <link href="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
      <url>/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第三章——中心理解题目之结构分析"><a href="#言语理解第三章——中心理解题目之结构分析" class="headerlink" title="言语理解第三章——中心理解题目之结构分析"></a>言语理解第三章——中心理解题目之结构分析</h1><h2 id="五种常见对策表达方式"><a href="#五种常见对策表达方式" class="headerlink" title="五种常见对策表达方式"></a>五种常见对策表达方式</h2><h3 id="祈使或建议给出对策"><a href="#祈使或建议给出对策" class="headerlink" title="祈使或建议给出对策"></a>祈使或建议给出对策</h3><p>应该（应）、需要（要）、必须、要求、可以、不妨等。</p><blockquote><ul><li>【例】……。对此，媒体要做好自我规约。……。</li><li>【例】……。今天我们在谈论保护环境、建设生态文明时，不妨先从古诗词中感受美，培养提高审美能力。……。</li><li>【例】……。然而，两地仅简单承接北京转移的一般产业是远远不够的，迫切需要发展“高精尖”产业，带动区域科技创新与成果转化，促进区域产业联动，形成经济协同发展的格局。</li></ul></blockquote><h3 id="禁止型对策"><a href="#禁止型对策" class="headerlink" title="禁止型对策"></a>禁止型对策</h3><p>不能、禁止、要避免、如果……就不…….等。</p><blockquote><ul><li>【例】……。三江源国家公园长江源园区强调，核心保护区禁止旅游探险穿越。</li><li>【例-2018 新疆】……。民间盗墓已然十分猖獗，屡屡令人扼腕，倘若连地方政府也开始罔顾规矩和法律，任由自己的喜好破土开棺，此风若长，势必不可收拾。……。</li><li>【例】……。民进党当局如果一意孤行走“台独”绝路必引火烧身自食恶果。</li></ul></blockquote><h3 id="逻辑关联词表对策"><a href="#逻辑关联词表对策" class="headerlink" title="逻辑关联词表对策"></a>逻辑关联词表对策</h3><p>只有……才（只有后为对策重点）、如果……就（均可能）、必须……否则（必须后为对策重点）等。</p><blockquote><ul><li>【例】……，在民众中诞生和成长的艺术，只有回到群众、回归生活，才能获得新的生命力。</li><li>【例】……，只有法律的板子跟上了，霸座者才不会如此嚣张。</li><li>【例】……。呼吁保护野生动物的日本组织团体表示，日本唯一的选择就是关闭国内象牙市场，否则将遭到国际社会孤立。</li></ul></blockquote><h3 id="必要条件表对策"><a href="#必要条件表对策" class="headerlink" title="必要条件表对策"></a>必要条件表对策</h3><p>基础、关键、前提、离不开、必不可少、不可或缺等。</p><blockquote><ul><li>【例】……。想在任何一个领域取得原始创新成果，肯定离不开扎实的知识积累和专业素养。</li><li>【例】……。宜居宜业和美乡村建设，产业发展是前提。</li><li>【例】……。职教发展技能竞赛“必不可少”。</li></ul></blockquote><h3 id="语义表对策"><a href="#语义表对策" class="headerlink" title="语义表对策"></a>语义表对策</h3><p>时代命题、重要议题、负有……义务、长远目标、必经之路、必然趋势、有助于等。</p><blockquote><ul><li>【例】……。如何加快推进这一领域的研究水平，如何高质量推动国内外学术研究的交流互动，如何让这条路变得更加宽广明亮，这些都将成为学界和行业均不容忽略的重要议题。</li><li>【例】……，乡村振兴是实现共同富裕必经之路。</li><li>【例】……，免签政策是有助于世界旅游业回暖的重要举措。</li></ul></blockquote><h2 id="五种结构之“后对策”"><a href="#五种结构之“后对策”" class="headerlink" title="五种结构之“后对策”"></a>五种结构之“后对策”</h2><p><strong>行文脉络：</strong>引出话题（问题）→分析论证→给出对策或观点，提出并分析问题→给出对策或观点。<br>“后对策”为说理类文段常用结构。正确选项应是总结或针对问题的对策（完美选项为包含问题和解决措施）。</p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821132205528.png" alt="image-20240821132205528"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821132742492.png" alt="image-20240821132742492"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821133403140.png" alt="image-20240821133403140"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821134645633.png" alt="image-20240821134645633"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821135132744.png" alt="image-20240821135132744"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821135514540.png" alt="image-20240821135514540"></p><h2 id="五种结构之“前对策”"><a href="#五种结构之“前对策”" class="headerlink" title="五种结构之“前对策”"></a>五种结构之“前对策”</h2><p><strong>行文脉络：</strong>引出话题（问题）→直接给出对策或观点→论证（重复观点对策），引出话题（问题）→直接给出对策或观点→详细介绍具体对策。<br>“前对策”为说理类文段常用结构，经常有转折或对比引出。正确选项应是针对问题的对策（完美选项为包含问题和解决措施）。</p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821140010111.png" alt="image-20240821140010111"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821141957734.png" alt="image-20240821141957734"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821142615963.png" alt="image-20240821142615963"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821142925775.png" alt="image-20240821142925775"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821144443007.png" alt="image-20240821144443007"></p><h2 id="五种结构之总分与分总"><a href="#五种结构之总分与分总" class="headerlink" title="五种结构之总分与分总"></a>五种结构之总分与分总</h2><h3 id="总分结构"><a href="#总分结构" class="headerlink" title="总分结构"></a>总分结构</h3><p><strong>行文脉络：</strong>总概况→分论点展开，总观点→分析。总概括、总观点更重要。</p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821145018707.png" alt="image-20240821145018707"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821145326240.png" alt="image-20240821145326240"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821145642757.png" alt="image-20240821145642757"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821150012851.png" alt="image-20240821150012851"></p><h3 id="分总结构"><a href="#分总结构" class="headerlink" title="分总结构"></a>分总结构</h3><p><strong>行文脉络：</strong>分析介绍→总结。总结的提示词有“这些”、“因此”等。<br>例</p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821150342995.png" alt="image-20240821150342995"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821151133946.png" alt="image-20240821151133946"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821151536147.png" alt="image-20240821151536147"></p><h2 id="五种结构之并列与大并列"><a href="#五种结构之并列与大并列" class="headerlink" title="五种结构之并列与大并列"></a>五种结构之并列与大并列</h2><h3 id="并列机构（分分）"><a href="#并列机构（分分）" class="headerlink" title="并列机构（分分）"></a>并列机构（分分）</h3><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240822013435536.png" alt="image-20240822013435536"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240822014040448.png" alt="image-20240822014040448"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240822014523892.png" alt="image-20240822014523892"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240822022907041.png" alt="image-20240822022907041"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240822023559741.png" alt="image-20240822023559741"></p><h4 id="关联词、句式提示并列"><a href="#关联词、句式提示并列" class="headerlink" title="关联词、句式提示并列"></a>关联词、句式提示并列</h4><h4 id="“A-且B”选项提示并列"><a href="#“A-且B”选项提示并列" class="headerlink" title="“A 且B”选项提示并列"></a>“A 且B”选项提示并列</h4><p>此类文段，前后讲述两方面内容，相互之间关联并不十分紧密，可根据“A 且B”类的选项逆推文段，判断文段是否可概况为“A 且B”。</p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240822024437742.png" alt="image-20240822024437742"></p><h3 id="大并列结构（分分分）"><a href="#大并列结构（分分分）" class="headerlink" title="大并列结构（分分分）"></a>大并列结构（分分分）</h3><p>历程类：清晰的时间轴</p><p>原因类：因果果因</p><p>区别比较联系类：主体地位相当，篇幅近似，双主语</p><p>具体类：12345</p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240822030221313.png" alt="image-20240822030221313"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240822030420621.png" alt="image-20240822030420621"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240822030819107.png" alt="image-20240822030819107"></p><h2 id="五种结构之“二层结构”"><a href="#五种结构之“二层结构”" class="headerlink" title="五种结构之“二层结构”"></a>五种结构之“二层结构”</h2><h3 id="转折＋对比"><a href="#转折＋对比" class="headerlink" title="转折＋对比"></a>转折＋对比</h3><p>转折文段，可能转折后是重点，也可能转折前后均重要；对比文段，常见有时间对比、国别对比，一般当今、我国是重点，时间对比也可能突出表示现在的改变。</p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824013936609.png" alt="image-20240824013936609"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824014127917.png" alt="image-20240824014127917"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824014355401.png" alt="image-20240824014355401"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824015046174.png" alt="image-20240824015046174"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824015522244.png" alt="image-20240824015522244"></p><h3 id="因果＋果因"><a href="#因果＋果因" class="headerlink" title="因果＋果因"></a>因果＋果因</h3><p>因果、果因结构，可感觉“原因类”选项逆推。</p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824015808800.png" alt="image-20240824015808800"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824020226396.png" alt="image-20240824020226396"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824021527404.png" alt="image-20240824021527404"></p><h3 id="背景＋正文"><a href="#背景＋正文" class="headerlink" title="背景＋正文"></a>背景＋正文</h3><p>介绍背景知识是为了下文服务，是为了让读者更能理解下文作者表述，但一般背景知识专业性较强，可略读，知道其是背景知识引出下文即可，重点关注“正文”，<strong>尤其关注正文中的“我国”、“新突破”、“新成绩”、“新发现”等。</strong></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824133333070.png" alt="image-20240824133333070"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824133809642.png" alt="image-20240824133809642"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824134114845.png" alt="image-20240824134114845"></p><h3 id="设问＋回答"><a href="#设问＋回答" class="headerlink" title="设问＋回答"></a>设问＋回答</h3><p>由问题引出，下文为对此问题的回答，重点关注该问题的答案。</p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824134448117.png" alt="image-20240824134448117"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824134940524.png" alt="image-20240824134940524"></p><hr><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240821151806096.png" alt="image-20240821151806096"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/image-20240824021801931.png" alt="image-20240824021801931"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断推理第九章——推理方式与论证结构</title>
      <link href="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/"/>
      <url>/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="判断推理第九章——推理方式与论证结构"><a href="#判断推理第九章——推理方式与论证结构" class="headerlink" title="判断推理第九章——推理方式与论证结构"></a>判断推理第九章——推理方式与论证结构</h1><h2 id="推理方式判断"><a href="#推理方式判断" class="headerlink" title="推理方式判断"></a>推理方式判断</h2><p><strong>推理方式判断：</strong>多考察归纳推理的判断，要注意完全归纳（可以是两个子类）与不完全归纳。</p><ul><li>演绎推理</li><li>归纳推理</li><li>类比推理</li></ul><hr><ul><li>完全归纳</li><li>不完全归纳</li></ul><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/image-20240821041120886.png" alt="image-20240821041120886"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/image-20240821041434074.png" alt="image-20240821041434074"></p><h2 id="论证结构或错误相似"><a href="#论证结构或错误相似" class="headerlink" title="论证结构或错误相似"></a>论证结构或错误相似</h2><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/image-20240821042228052.png" alt="image-20240821042228052"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/image-20240821042153966.png" alt="image-20240821042153966"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/image-20240821042506872.png" alt="image-20240821042506872"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/image-20240821042732959.png" alt="image-20240821042732959"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/image-20240821043107190.png" alt="image-20240821043107190"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/image-20240821043436643.png" alt="image-20240821043436643"></p><p><img src="/2024/08/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B9%9D%E7%AB%A0%E2%80%94%E2%80%94%E6%8E%A8%E7%90%86%E6%96%B9%E5%BC%8F%E4%B8%8E%E8%AE%BA%E8%AF%81%E7%BB%93%E6%9E%84/image-20240821043701546.png" alt="image-20240821043701546"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 判断推理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 判断推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断推理第八章——分析推理</title>
      <link href="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/"/>
      <url>/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="判断推理第八章——分析推理"><a href="#判断推理第八章——分析推理" class="headerlink" title="判断推理第八章——分析推理"></a>判断推理第八章——分析推理</h1><h2 id="真假话分析推理"><a href="#真假话分析推理" class="headerlink" title="真假话分析推理"></a>真假话分析推理</h2><h3 id="矛盾法"><a href="#矛盾法" class="headerlink" title="矛盾法"></a>矛盾法</h3><h4 id="三种矛盾关系"><a href="#三种矛盾关系" class="headerlink" title="三种矛盾关系"></a>三种矛盾关系</h4><ul><li>①A 和非A、A 且B 和非A 或 非B、A 或 B 和非A 且 非B；</li><li>②所有和有些不，有些和所有不、可能和必然不、必然和可能不；</li><li>③A→B 和 A 且 非B．</li></ul><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820134541556.png" alt="image-20240820134541556"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820134929349.png" alt="image-20240820134929349"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820135650203.png" alt="image-20240820135650203"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820140351264.png" alt="image-20240820140351264"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820140725919.png" alt="image-20240820140725919"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820141217913.png" alt="image-20240820141217913"></p><blockquote><p>至少是肯定，至多是否定！</p></blockquote><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820142114130.png" alt="image-20240820142114130"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820142240064.png" alt="image-20240820142240064"></p><h3 id="假设法"><a href="#假设法" class="headerlink" title="假设法"></a>假设法</h3><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820142831344.png" alt="image-20240820142831344"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820143147056.png" alt="image-20240820143147056"></p><h3 id="代入法"><a href="#代入法" class="headerlink" title="代入法"></a>代入法</h3><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820144034542.png" alt="image-20240820144034542"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820145912405.png" alt="image-20240820145912405"></p><h3 id="命题的真假判断"><a href="#命题的真假判断" class="headerlink" title="命题的真假判断"></a>命题的真假判断</h3><h4 id="常用知识点"><a href="#常用知识点" class="headerlink" title="常用知识点"></a>常用知识点</h4><p>对于A→B</p><ul><li>①只有A 且 非B 时命题为假</li><li>②A 为假（前件为假）命题为真</li><li>③B 为真（后件为真）命题为真。</li></ul><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820153236441.png" alt="image-20240820153236441"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820153555596.png" alt="image-20240820153555596"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820153738652.png" alt="image-20240820153738652"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820154637222.png" alt="image-20240820154637222"></p><h3 id="两真两假模型"><a href="#两真两假模型" class="headerlink" title="两真两假模型"></a>两真两假模型</h3><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820155421327.png" alt="image-20240820155421327"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820155948107.png" alt="image-20240820155948107"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820160415947.png" alt="image-20240820160415947"></p><h2 id="日常分析推理"><a href="#日常分析推理" class="headerlink" title="日常分析推理"></a>日常分析推理</h2><h3 id="日常分析"><a href="#日常分析" class="headerlink" title="日常分析"></a>日常分析</h3><p>给出日常生活中蕴含逻辑关系的若干条件，需要考生抽丝剥茧找到其内在联系并适当推理，此类问题没有固定的解题方法，真正考察了考生的逻辑思维。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>代入法、画表法、画图法、赋值法等。</p><h3 id="解题入手点"><a href="#解题入手点" class="headerlink" title="解题入手点"></a>解题入手点</h3><p>一般可以从确定信息、最大信息入手。</p><h4 id="画表法"><a href="#画表法" class="headerlink" title="画表法"></a>画表法</h4><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820161242147.png" alt="image-20240820161242147"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820161814299.png" alt="image-20240820161814299"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820162601654.png" alt="image-20240820162601654"></p><h4 id="画图法"><a href="#画图法" class="headerlink" title="画图法"></a>画图法</h4><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820163511516.png" alt="image-20240820163511516"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820164712248.png" alt="image-20240820164712248"></p><h4 id="赋值法"><a href="#赋值法" class="headerlink" title="赋值法"></a>赋值法</h4><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821024312956.png" alt="image-20240821024312956"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821024702832.png" alt="image-20240821024702832"></p><h3 id="特殊思维"><a href="#特殊思维" class="headerlink" title="特殊思维"></a>特殊思维</h3><h4 id="等价思维"><a href="#等价思维" class="headerlink" title="等价思维"></a>等价思维</h4><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821025358403.png" alt="image-20240821025358403"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821025821551.png" alt="image-20240821025821551"></p><h4 id="极限思维"><a href="#极限思维" class="headerlink" title="极限思维"></a>极限思维</h4><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821030934940.png" alt="image-20240821030934940"></p><h3 id="特殊模型"><a href="#特殊模型" class="headerlink" title="特殊模型"></a>特殊模型</h3><h4 id="不同角度分类模型"><a href="#不同角度分类模型" class="headerlink" title="不同角度分类模型"></a>不同角度分类模型</h4><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821031949369.png" alt="image-20240821031949369"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821032929361.png" alt="image-20240821032929361"></p><h4 id="包含关系模型"><a href="#包含关系模型" class="headerlink" title="包含关系模型"></a>包含关系模型</h4><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821033522901.png" alt="image-20240821033522901"></p><h4 id="多重身份模型"><a href="#多重身份模型" class="headerlink" title="多重身份模型"></a>多重身份模型</h4><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821034217192.png" alt="image-20240821034217192"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821034510081.png" alt="image-20240821034510081"></p><h4 id="数独模型"><a href="#数独模型" class="headerlink" title="数独模型"></a>数独模型</h4><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821034934129.png" alt="image-20240821034934129"></p><h4 id="冠军模型"><a href="#冠军模型" class="headerlink" title="冠军模型"></a>冠军模型</h4><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821035420948.png" alt="image-20240821035420948"><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240821040213764.png" alt="image-20240821040213764"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820160704316.png" alt="image-20240820160704316"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AB%E7%AB%A0%E2%80%94%E2%80%94%E5%88%86%E6%9E%90%E6%8E%A8%E7%90%86/image-20240820144554809.png" alt="image-20240820144554809"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 判断推理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 判断推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜微——第三节（分类概括）</title>
      <link href="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E5%88%86%E7%B1%BB%E6%A6%82%E6%8B%AC%EF%BC%89/"/>
      <url>/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E5%88%86%E7%B1%BB%E6%A6%82%E6%8B%AC%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第三节（分类概括）"><a href="#杜微——第三节（分类概括）" class="headerlink" title="杜微——第三节（分类概括）"></a>杜微——第三节（分类概括）</h1><h2 id="分类的条件"><a href="#分类的条件" class="headerlink" title="分类的条件"></a>分类的条件</h2><h3 id="题干"><a href="#题干" class="headerlink" title="题干"></a>题干</h3><ul><li>归纳</li><li>分类</li><li>xx几个方面/几点…</li></ul><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li>分条<strong>分类</strong></li><li><strong>逻辑</strong>清晰</li><li><strong>层次</strong>分明</li><li>观点明确</li></ul><h2 id="分类的方法"><a href="#分类的方法" class="headerlink" title="分类的方法"></a>分类的方法</h2><h3 id="题干自带并列"><a href="#题干自带并列" class="headerlink" title="题干自带并列"></a>题干自带并列</h3><blockquote><p>例：</p><p>请从S市在打造”水清”、“水活”、“水美”的举措。</p></blockquote><p><strong>一般2-4个方面</strong></p><h3 id="主体分类法"><a href="#主体分类法" class="headerlink" title="主体分类法"></a>主体分类法</h3><blockquote><p>例:</p><p>街头艺术能—解决艺人生计;增添城市靓丽风景实现艺人梦想:传递他人力量希望:营造城市艺术氛围与他人分享艺术和快乐。 请归纳街头艺术的积极功能?</p><ul><li><strong>艺人：</strong>解决生计；实现梦想</li><li><strong>他人：</strong>传递力量希望；分享艺术和快乐</li><li><strong>城市：</strong>增添靓丽风景；营造艺术氛围 </li></ul></blockquote><h3 id="领域范畴分类法"><a href="#领域范畴分类法" class="headerlink" title="领域范畴分类法"></a>领域范畴分类法</h3><blockquote><p>例:</p><p>阐述城市水系所具有的功能，城市水系可以成为廉价、有效的<strong>净化城市污水</strong>的天然场所，应更多地承担起<strong>蓄积雨洪、分流下渗、调节行洪等功能</strong>。城市，大都是因水而兴起，因水而<strong>繁荣、发展</strong>。绝大多数历史悠久的城市，都是先有河后有城，许多城市的<strong>历史都是沉淀</strong>在河道、湖泊、海滨和湿地上的。如北京城区所有的河流，几乎都可以找到与其相关的<strong>历史文化古迹</strong>或典故。自古以来，<strong>内河船运</strong>由于其低成本、高可靠性、安全性和可观赏性，始终受到人们的重视。</p></blockquote><h3 id="★★★材料段落逻辑（并列逻辑）"><a href="#★★★材料段落逻辑（并列逻辑）" class="headerlink" title="★★★材料段落逻辑（并列逻辑）"></a>★★★材料段落逻辑（并列逻辑）</h3><blockquote><p>例：</p><ul><li>第一段：水污染问题</li><li>第二段：空气污染问题</li><li>第三段：地面污染问题</li><li>第四段：噪音扰民问题</li></ul></blockquote><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E5%88%86%E7%B1%BB%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240820032415707.png" alt="image-20240820032415707"></p><h3 id="★★★材料总分逻辑"><a href="#★★★材料总分逻辑" class="headerlink" title="★★★材料总分逻辑"></a>★★★材料总分逻辑</h3><p>材料的首尾段会直接给出几个方面</p><h3 id="两分法（内外因、主客观）"><a href="#两分法（内外因、主客观）" class="headerlink" title="两分法（内外因、主客观）"></a>两分法（内外因、主客观）</h3><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E5%88%86%E7%B1%BB%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240820033333556.png" alt="image-20240820033333556"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E5%88%86%E7%B1%BB%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240823211342095.png" alt="image-20240823211342095"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E5%88%86%E7%B1%BB%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240823215432616.png" alt="image-20240823215432616"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E5%88%86%E7%B1%BB%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240824004755899.png" alt="image-20240824004755899"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E5%88%86%E7%B1%BB%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240824030621517.png" alt="image-20240824030621517"></p><p><img src="/2024/08/20/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E5%88%86%E7%B1%BB%E6%A6%82%E6%8B%AC%EF%BC%89/屏幕截图 2024-08-24 031025.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断推理第七章——翻译推理</title>
      <link href="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/"/>
      <url>/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="判断推理第七章——翻译推理"><a href="#判断推理第七章——翻译推理" class="headerlink" title="判断推理第七章——翻译推理"></a>判断推理第七章——翻译推理</h1><h2 id="等价推出"><a href="#等价推出" class="headerlink" title="等价推出"></a>等价推出</h2><p><strong>等价推出</strong>指的是将题干逻辑关系和选项逻辑关系分别翻译后，二者完全一致。考察的是对翻译规则的掌握，常用知识点有命题的传递和原命题、逆否命题等价。</p><p>题干中无逻辑关联词的部分不需要关注，直接寻找带有逻辑关联词的语句即可。</p><p>翻译规则如下：</p><div class="table-container"><table><thead><tr><th>常见提示词</th><th>翻译</th></tr></thead><tbody><tr><td>p 并且q、p 和q、p 同时q、p 也q、p 还q、p，q</td><td>p 且q</td></tr><tr><td>p 或q、pq 至少一个、非p 非q 至多一个</td><td>p 或q</td></tr><tr><td>如果p 那么q、若p 则q、只要p 就q、一p 则q、所有p 都是q</td><td>p→q</td></tr><tr><td>只有p 才q、必须p 才q、不p 不q</td><td>q→p</td></tr><tr><td>除非p 否则q、必须p 否则q、p 否则q</td><td>非p→q</td></tr><tr><td>q 是p 的基础/关键/前提、p 离不开/必须/需要q、q 必不可少/不可或缺</td><td>p→q</td></tr></tbody></table></div><h3 id="与题干等价"><a href="#与题干等价" class="headerlink" title="与题干等价"></a>与题干等价</h3><h4 id="解题技巧"><a href="#解题技巧" class="headerlink" title="解题技巧"></a>解题技巧</h4><ul><li>若将题干翻译为A→B，可以翻译为A→B 或非B→非A 为正确选项。因此，以B 或非A（肯后或否前）开头的选项可先排除。</li><li>若题干有多个带有逻辑关联词的句子，先不需要联立，有时答案只和其中一句有关；</li></ul><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819083037618.png" alt="image-20240819083037618"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819083339455.png" alt="image-20240819083339455"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819084039231.png" alt="image-20240819084039231"></p><blockquote><p>只有才翻译成<strong>不不</strong></p></blockquote><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819085123116.png" alt="image-20240819085123116"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819085917514.png" alt="image-20240819085917514"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819092611793.png" alt="image-20240819092611793"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819093102227.png" alt="image-20240819093102227"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819094454239.png" alt="image-20240819094454239"></p><h3 id="与题干不等价"><a href="#与题干不等价" class="headerlink" title="与题干不等价"></a>与题干不等价</h3><h4 id="解题技巧-1"><a href="#解题技巧-1" class="headerlink" title="解题技巧"></a>解题技巧</h4><p>若题干只有一个逻辑关系，可直接翻译选项，选项三个相同一个不同，直接选不同的选项即可。</p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819094946148.png" alt="image-20240819094946148"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819095057321.png" alt="image-20240819095057321"></p><h2 id="根据已知事实正推"><a href="#根据已知事实正推" class="headerlink" title="根据已知事实正推"></a>根据已知事实正推</h2><h3 id="解题技巧-2"><a href="#解题技巧-2" class="headerlink" title="解题技巧"></a>解题技巧</h3><p>无需将题干中的多个命题联立，根据已知事实，按照逻辑传递规则推出即可。</p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819100107460.png" alt="image-20240819100107460"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819101023252.png" alt="image-20240819101023252"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819101434904.png" alt="image-20240819101434904"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819102205940.png" alt="image-20240819102205940"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819102708594.png" alt="image-20240819102708594"></p><h2 id="根据所需结果逆推"><a href="#根据所需结果逆推" class="headerlink" title="根据所需结果逆推"></a>根据所需结果逆推</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>要想得到C，根据B→C，需要B 成立，要想得到B，根据A→B，需要A 成立，一步一步逆推即可。此类题目最常考察考点是“p 或q”的“否一推一”，即要想p 成立，需要q 不成立。</p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819123508465.png" alt="image-20240819123508465"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819124339496.png" alt="image-20240819124339496"></p><h2 id="两难推理"><a href="#两难推理" class="headerlink" title="两难推理"></a>两难推理</h2><h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p>A→B、非A→B，可推出B 成立（可翻译成无论是否A，都会B）；A→B、A→非B，可推出非A 成立。</p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819125935709.png" alt="image-20240819125935709"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819130651228.png" alt="image-20240819130651228"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819131104593.png" alt="image-20240819131104593"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819131640838.png" alt="image-20240819131640838"></p><h2 id="推出信息"><a href="#推出信息" class="headerlink" title="推出信息"></a>推出信息</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>根据所给命题的真假，判定选项命题或事实的真假。</p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819140500242.png" alt="image-20240819140500242"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819141206911.png" alt="image-20240819141206911"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819141632450.png" alt="image-20240819141632450"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819142004541.png" alt="image-20240819142004541"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819142502036.png" alt="image-20240819142502036"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819143047772.png" alt="image-20240819143047772"></p><h2 id="题型分类梳理"><a href="#题型分类梳理" class="headerlink" title="题型分类梳理"></a>题型分类梳理</h2><div class="table-container"><table><thead><tr><th>题型分类</th><th>题干形式</th><th>解题思路</th><th>选项形式</th></tr></thead><tbody><tr><td>等价推出</td><td>单个或多个命题</td><td>翻译后找等价</td><td>命题</td></tr><tr><td>正推</td><td>命题+已知事实</td><td>命题联立和逻辑传递</td><td>事实</td></tr><tr><td>逆推</td><td>命题+需要结果</td><td>命题联立和逻辑传递</td><td>事实</td></tr><tr><td>两难推理</td><td>多个命题</td><td>两难推理规则</td><td>事实</td></tr><tr><td>推出信息</td><td>命题</td><td>根据命题真假判定信息</td><td>命题或事实</td></tr></tbody></table></div><h2 id="范畴推理"><a href="#范畴推理" class="headerlink" title="范畴推理"></a>范畴推理</h2><p><strong>范畴推理</strong>指的是根据直言命题（所有、有些、特指）之间关系和性质进行推理的题目，也包括判定各集合之间包含、交叉等关系的题目。</p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819082444971.png" alt="image-20240819082444971"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819143446462.png" alt="image-20240819143446462"></p><h3 id="直言命题考察"><a href="#直言命题考察" class="headerlink" title="直言命题考察"></a>直言命题考察</h3><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819143937941.png" alt="image-20240819143937941"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819144258888.png" alt="image-20240819144258888"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819144455111.png" alt="image-20240819144455111"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819144808338.png" alt="image-20240819144808338"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819145229375.png" alt="image-20240819145229375"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819145824129.png" alt="image-20240819145824129"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819150055029.png" alt="image-20240819150055029"></p><h3 id="集合关系考察"><a href="#集合关系考察" class="headerlink" title="集合关系考察"></a>集合关系考察</h3><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819150659802.png" alt="image-20240819150659802"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819151304421.png" alt="image-20240819151304421"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819152051874.png" alt="image-20240819152051874"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819152548225.png" alt="image-20240819152548225"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819152816353.png" alt="image-20240819152816353"> </p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240819153537569.png" alt="image-20240819153537569"></p><p><img src="/2024/08/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%83%E7%AB%A0%E2%80%94%E2%80%94%E7%BF%BB%E8%AF%91%E6%8E%A8%E7%90%86/image-20240820134122890.png" alt="image-20240820134122890"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 判断推理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 判断推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第二章——中心理解题目之抓住关键信息</title>
      <link href="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/"/>
      <url>/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第二章——中心理解题目之抓住关键信息"><a href="#言语理解第二章——中心理解题目之抓住关键信息" class="headerlink" title="言语理解第二章——中心理解题目之抓住关键信息"></a>言语理解第二章——中心理解题目之抓住关键信息</h1><h2 id="关键信息之高频词"><a href="#关键信息之高频词" class="headerlink" title="关键信息之高频词"></a>关键信息之高频词</h2><p>文段中反复出现的词语，重要程度较高，需要注意。</p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818144406907.png" alt="image-20240818144406907"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818144732471.png" alt="image-20240818144732471"></p><h2 id="关键信息之主体"><a href="#关键信息之主体" class="headerlink" title="关键信息之主体"></a>关键信息之主体</h2><p>文段谈论的主要对象，需要抓住，可理解为“谈论的是‘谁’”。</p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818145552509.png" alt="image-20240818145552509"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818150319512.png" alt="image-20240818150319512"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818150542300.png" alt="image-20240818150542300"></p><h2 id="关键信息之首句"><a href="#关键信息之首句" class="headerlink" title="关键信息之首句"></a>关键信息之首句</h2><p>首句往往容易被忽略，但很多时候首句确定了整个文段的谈话范围，需重视首句中的关键信息（主体、<br>事件等），可以理解为“谈论的是‘谁’的‘什么事’”。</p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818151039761.png" alt="image-20240818151039761"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818151241753.png" alt="image-20240818151241753"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818151800442.png" alt="image-20240818151800442"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818152015362.png" alt="image-20240818152015362"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818152345132.png" alt="image-20240818152345132"></p><h2 id="引出话题的五种方式"><a href="#引出话题的五种方式" class="headerlink" title="引出话题的五种方式"></a>引出话题的五种方式</h2><h3 id="开门见山"><a href="#开门见山" class="headerlink" title="开门见山"></a>开门见山</h3><p>首句即指明谈论重点，需注意首句中的关键信息（谈论的是“谁”的“什么事”）。</p><h3 id="转折对比引出"><a href="#转折对比引出" class="headerlink" title="转折对比引出"></a>转折对比引出</h3><p>“前对策”结构经常用转折或对比引出话题，常直接引出问题、观点、对策等。</p><h3 id="背景-背景知识引出"><a href="#背景-背景知识引出" class="headerlink" title="背景/背景知识引出"></a>背景/背景知识引出</h3><p>背景或背景知识都不重要，介绍背景或背景知识是为下文服务。</p><h3 id="由大引小"><a href="#由大引小" class="headerlink" title="由大引小"></a>由大引小</h3><p>由“谈论对象的上级集合”引出“特定的谈论对象”，切记此时谈论对象并非例子。</p><h3 id="设问引出"><a href="#设问引出" class="headerlink" title="设问引出"></a>设问引出</h3><p>由问题引出，注意下文是否为对此问题的回答，若是，需重点注意该问题的答案。</p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E6%8A%93%E4%BD%8F%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF/image-20240818153138796.png" alt="image-20240818153138796"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第一章——片段阅读整体概述</title>
      <link href="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/"/>
      <url>/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第一章——片段阅读整体概述"><a href="#言语理解第一章——片段阅读整体概述" class="headerlink" title="言语理解第一章——片段阅读整体概述"></a>言语理解第一章——片段阅读整体概述</h1><h2 id="题型分类"><a href="#题型分类" class="headerlink" title="题型分类"></a>题型分类</h2><p>片段阅读一般有<strong>中心理解题、标题拟定题、下文推断题、语句填入题、语句排序题、细节判断题</strong>六种。</p><h3 id="六种题型的常见问法"><a href="#六种题型的常见问法" class="headerlink" title="六种题型的常见问法"></a>六种题型的常见问法</h3><ul><li><strong>中心理解题</strong>：“这段文字意在说明：”、“这段文字意在强调：”、“这段文字主要介绍了：”“下列对文意概括最恰当的是：”；</li><li><strong>标题拟定题</strong>：“最适合做这段文字标题的是：”；</li><li><strong>下文推断题</strong>：“这段文字接下来最可能讲的是：”；</li><li><strong>语句填入题</strong>：“填入画横线部分最恰当的一项是：”；</li><li><strong>语句排序题</strong>：“将以上6 个句子重新排列，语序正确的是：”；</li><li><strong>细节判断题</strong>：“下列选项中，与这段文字意思不相符的是：”、“对这段文字理解错误的是：”。</li></ul><h2 id="整体解题原则与思路"><a href="#整体解题原则与思路" class="headerlink" title="整体解题原则与思路"></a>整体解题原则与思路</h2><h3 id="做题原则"><a href="#做题原则" class="headerlink" title="做题原则"></a>做题原则</h3><ul><li>①抓住关键信息或确定文段类型，选项干扰力度不强，则直接确定答案；</li><li>②套入常见结构，找到文段主旨或重点，锁定正确选项；</li><li>③二选一纠结时，利用选项分析，排除错误选项，让正确选项“跳出来”。</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><strong>做题顺序：</strong>先读问题（分辨题型和文段可能类型）→再读文段（分析结构和预想答案）→分析选项（利用选项提升做题速度与准确度）。</li><li><strong>阅读文段：</strong>在句号处划斜线，再分层，宏观上把握结构，不能“只见树木不见森林”。</li><li><strong>解题方法：</strong>结构分析（套入五种文段结构）、选项分析（两出处六有误排除错误选项、四大类一比较一正确抓住正确选项、一方法验证）、抓准关键信息（秒杀或避免出现低级失误）。</li></ol><h2 id="不同内容的三类文段"><a href="#不同内容的三类文段" class="headerlink" title="不同内容的三类文段"></a>不同内容的三类文段</h2><p>根据文段描写内容，可将题干文段分为说理类、科普介绍类、新闻类三种。</p><ul><li>说理类指的是文章主要阐述作者给出的观点、态度、对策等；</li><li>科普介绍类指的是文章主要是客观地介绍某种或某些现象、事件、知识等；</li><li>新闻类指的是文章主要介绍新发生的事件或研究的新突破、新发现、新进展等。</li></ul><blockquote><ul><li>说理类文章常见问法：主旨是什么、意在说明什么、意图强调什么、观点是什么……等；</li><li>科普介绍类常见问法：主要介绍了什么、主要讲了什么、最适合的概括是……等；</li><li>新闻类文章常见问法：主要讲了什么、意在强调什么、重在强调什么……等。</li></ul></blockquote><h3 id="三类文段解题原则"><a href="#三类文段解题原则" class="headerlink" title="三类文段解题原则"></a>三类文段解题原则</h3><ul><li><p>说理类文章：原文有对策优先选对策，原文有作者观点或态度选观点态度，原文有问题要体现问题（可</p><p>概括问题也可解决问题）；</p></li></ul><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/image-20240818133118673.png" alt="image-20240818133118673"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/image-20240818133604627.png" alt="image-20240818133604627"></p><ul><li>科普介绍类：选“中性、客观”的概括选项，此时反而不选对策；</li></ul><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/image-20240818134727765.png" alt="image-20240818134727765"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/image-20240818134129165.png" alt="image-20240818134129165"></p><ul><li>新闻类文章：重视新状况、新成绩、新突破等“新”。</li></ul><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/image-20240818135154895.png" alt="image-20240818135154895"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/image-20240818135642245.png" alt="image-20240818135642245"></p><h2 id="整体把握结构的优势"><a href="#整体把握结构的优势" class="headerlink" title="整体把握结构的优势"></a>整体把握结构的优势</h2><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/image-20240818140340495.png" alt="image-20240818140340495"></p><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/image-20240818141120801.png" alt="image-20240818141120801"></p><h2 id="结构分析适用题型"><a href="#结构分析适用题型" class="headerlink" title="结构分析适用题型"></a>结构分析适用题型</h2><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/image-20240818143433994.png" alt="image-20240818143433994"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/08/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0/image-20240818143701482.png" alt="image-20240818143701482"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断推理第六章——逻辑论证之支持、前提、解释</title>
      <link href="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/"/>
      <url>/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="判断推理第六章——逻辑论证之支持、前提、解释"><a href="#判断推理第六章——逻辑论证之支持、前提、解释" class="headerlink" title="判断推理第六章——逻辑论证之支持、前提、解释"></a>判断推理第六章——逻辑论证之支持、前提、解释</h1><h2 id="支持、前提假设、解释说明的整体概述"><a href="#支持、前提假设、解释说明的整体概述" class="headerlink" title="支持、前提假设、解释说明的整体概述"></a>支持、前提假设、解释说明的整体概述</h2><h3 id="常见问法"><a href="#常见问法" class="headerlink" title="常见问法"></a>常见问法</h3><h4 id="支持论证类"><a href="#支持论证类" class="headerlink" title="支持论证类"></a>支持论证类</h4><p>“以下哪项如果为真，最能加强上述论证”、“以下哪项如果为真，最能支持上述发现”</p><h4 id="前提假设类"><a href="#前提假设类" class="headerlink" title="前提假设类"></a>前提假设类</h4><p>“如果上述结论为真，需要补充的前提是”、“上述推测还需要隐含哪一项假设”</p><h4 id="解释说明类"><a href="#解释说明类" class="headerlink" title="解释说明类"></a>解释说明类</h4><p>“以下最能解释这一现象的是”、“以下哪项为真，最能解释这一情况”<br>支持</p><h3 id="支持类常见支持方式"><a href="#支持类常见支持方式" class="headerlink" title="支持类常见支持方式"></a>支持类常见支持方式</h3><p>解释说明、断点搭桥、增加正向论据、必要条件、举例支持等。</p><h4 id="前提假设类常见选项形式"><a href="#前提假设类常见选项形式" class="headerlink" title="前提假设类常见选项形式"></a>前提假设类常见选项形式</h4><p>断点搭桥（同支持类）、补充漏洞（类似增加正向论据）、必要条件（同<br>支持类）。</p><h4 id="解释说明类-1"><a href="#解释说明类-1" class="headerlink" title="解释说明类"></a>解释说明类</h4><p>此类问题题干中存在一个“让人费解”的现象，此现象看似“不寻常”实则“正常”，<br>需要我们为其找到一个合理的理由，这个理由不能像借口，越能让人接受越好；此类问题的正确选项往往是出题人故意未提及且大家也容易忽略的合理事实，只要加上此事实，就可让人疑惑顿消。</p><h4 id="支持和前提关系"><a href="#支持和前提关系" class="headerlink" title="支持和前提关系"></a>支持和前提关系</h4><p>前提假设可看作“特殊支持类”，解法相对固定，重点考虑上述三类选项，但逻辑<br>本质也是支持，属于补充论证过程缺少内容的支持。</p><h4 id="支持和解释关系"><a href="#支持和解释关系" class="headerlink" title="支持和解释关系"></a>支持和解释关系</h4><p>解释也可看作“特殊支持类”，通过解释说明支持题干现象的合理性，类似支持类<br>的解释说明支持。</p><h2 id="五种常见支持方式"><a href="#五种常见支持方式" class="headerlink" title="五种常见支持方式"></a>五种常见支持方式</h2><h3 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h3><p>解释了为什么得到此结论，读懂了该选项应有豁然开朗之感。此类问题相对简单。</p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240816013017962.png" alt="image-20240816013017962"></p><h3 id="断点搭桥"><a href="#断点搭桥" class="headerlink" title="断点搭桥"></a>断点搭桥</h3><p>若题干的结论中存在论据没有的“新内容”，此新内容一定在选项中要有所体现，并能够和论据中的关键信息进行搭桥。</p><p>  <img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240816013640692.png" alt="image-20240816013640692"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240816014045537.png" alt="image-20240816014045537"></p><h3 id="增加正向论据"><a href="#增加正向论据" class="headerlink" title="增加正向论据"></a>增加正向论据</h3><p>若题干的论证存在漏洞，可通过<strong>增加正向论据补充漏洞</strong>来进行支持；若题干的论证过程较完整，也可通过<strong>增加数据、事实</strong>等正向论据进行支持。</p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818014029256.png" alt="image-20240818014029256"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818015034267.png" alt="image-20240818015034267"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818015341631.png" alt="image-20240818015341631"></p><h3 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h3><p>此类选项一般没有极大的力度让结论肯定正确，但却是结论成立的必要前提，属于“没他不行”选项，缺了这类选项，整个推理过程必然失败。<br>可采用反向代入的办法验证选项，若实际情况与选项相反，则必然得不出题干的结论，那么此选项就是结论成立的必要条件。</p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818020321444.png" alt="image-20240818020321444"></p><h3 id="举例支持"><a href="#举例支持" class="headerlink" title="举例支持"></a>举例支持</h3><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818020909268.png" alt="image-20240818020909268"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818021312724.png" alt="image-20240818021312724"></p><h3 id="变化-比较的支持方式"><a href="#变化-比较的支持方式" class="headerlink" title="变化/比较的支持方式"></a>变化/比较的支持方式</h3><p>用“变化”支持“变化”，比较尽量说“两边”。</p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818022323326.png" alt="image-20240818022323326"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818022646821.png" alt="image-20240818022646821"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818023224297.png" alt="image-20240818023224297"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818023432240.png" alt="image-20240818023432240"></p><h2 id="三种常见的前提假设"><a href="#三种常见的前提假设" class="headerlink" title="三种常见的前提假设"></a>三种常见的前提假设</h2><h3 id="断点搭桥-1"><a href="#断点搭桥-1" class="headerlink" title="断点搭桥"></a>断点搭桥</h3><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818024335124.png" alt="image-20240818024335124"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818024808326.png" alt="image-20240818024808326"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818024914729.png" alt="image-20240818024914729"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818025130162.png" alt="image-20240818025130162"></p><h3 id="补充漏洞"><a href="#补充漏洞" class="headerlink" title="补充漏洞"></a>补充漏洞</h3><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818025621156.png" alt="image-20240818025621156"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818025944981.png" alt="image-20240818025944981"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240818030511271.png" alt="image-20240818030511271"></p><h3 id="必要条件-能与不能"><a href="#必要条件-能与不能" class="headerlink" title="必要条件/能与不能"></a>必要条件/能与不能</h3><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240819014338697.png" alt="image-20240819014338697"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240819015242898.png" alt="image-20240819015242898"></p><h2 id="解释说明类-2"><a href="#解释说明类-2" class="headerlink" title="解释说明类"></a>解释说明类</h2><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240819015825180.png" alt="image-20240819015825180"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240819020532602.png" alt="image-20240819020532602"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240819021929412.png" alt="image-20240819021929412"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240816012735846.png" alt="image-20240816012735846"></p><p><img src="/2024/08/16/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%85%AD%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%94%AF%E6%8C%81%E3%80%81%E5%89%8D%E6%8F%90%E3%80%81%E8%A7%A3%E9%87%8A/image-20240819082811556.png" alt="image-20240819082811556"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 判断推理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 判断推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断推理第五章——逻辑论证之一般质疑</title>
      <link href="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/"/>
      <url>/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/</url>
      
        <content type="html"><![CDATA[<h1 id="判断推理第五章——逻辑论证之一般质疑"><a href="#判断推理第五章——逻辑论证之一般质疑" class="headerlink" title="判断推理第五章——逻辑论证之一般质疑"></a>判断推理第五章——逻辑论证之一般质疑</h1><h2 id="无论据有结论的一般质疑"><a href="#无论据有结论的一般质疑" class="headerlink" title="无论据有结论的一般质疑"></a>无论据有结论的一般质疑</h2><p><strong>无论据有结论：</strong>此类问题较简单，题干常由“背景、分析和结论”，常用提出反向论据的方式反驳论点。</p><p>此类题目较简单，要注意话题一致，主体正确，贴合题干。</p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240815001306358.png" alt="image-20240815001306358"></p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240815002342045.png" alt="image-20240815002342045"></p><h2 id="有论据有结论的一般质疑"><a href="#有论据有结论的一般质疑" class="headerlink" title="有论据有结论的一般质疑"></a>有论据有结论的一般质疑</h2><h3 id="质疑论据"><a href="#质疑论据" class="headerlink" title="质疑论据"></a>质疑论据</h3><p>在论据存在错误时，可通过指出论据问题质疑，论据有误，自然推不出题干结论。论据是<strong>个人观点、个人判断</strong>时，可能存在论据有误的错误。</p><p>另，对比实验归因题目可看作是特殊的“质疑论据”。</p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240815011135651.png" alt="image-20240815011135651"></p><h3 id="增加反向论据"><a href="#增加反向论据" class="headerlink" title="增加反向论据"></a>增加反向论据</h3><p>很多时候，题干可能通过一些有利因素得出积极结论或通过一些不利因素得出消极结论，犯了考虑不全面的错误；有些时候，因少数样本得出普遍结论，犯了以偏概全的错误；<br>针对上述问题，可通过<strong>增加反向论据</strong>来进行质疑。</p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240815224324131.png" alt="image-20240815224324131"></p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240815225925639.png" alt="image-20240815225925639"></p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240816001202906.png" alt="image-20240816001202906"></p><h4 id="个例的认定"><a href="#个例的认定" class="headerlink" title="个例的认定"></a>个例的认定</h4><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240816004012705.png" alt="image-20240816004012705"></p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240816004650617.png" alt="image-20240816004650617"></p><h4 id="断点拆桥"><a href="#断点拆桥" class="headerlink" title="断点拆桥"></a>断点拆桥</h4><p>若题干的论据和结论并不十分相关，根据论据推不出结论，犯了“推不出”的错误，可通过<strong>拆桥</strong>来进行质疑。</p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240816005723563.png" alt="image-20240816005723563"></p><h4 id="质疑结论中的“无中生有”"><a href="#质疑结论中的“无中生有”" class="headerlink" title="质疑结论中的“无中生有”"></a>质疑结论中的“无中生有”</h4><p>若题干结论中出现了程度较重的“无中生有”内容，可重点关注，进行质疑。</p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240816010829392.png" alt="image-20240816010829392"></p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240816011322221.png" alt="image-20240816011322221"></p><p><img src="/2024/08/15/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%94%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%80%E8%88%AC%E8%B4%A8%E7%96%91/image-20240816011502483.png" alt="image-20240816011502483"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 判断推理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 判断推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断推理第四章——逻辑论证之严谨逻辑关系</title>
      <link href="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/"/>
      <url>/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="判断推理第四章——逻辑论证之严谨逻辑关系"><a href="#判断推理第四章——逻辑论证之严谨逻辑关系" class="headerlink" title="判断推理第四章——逻辑论证之严谨逻辑关系"></a>判断推理第四章——逻辑论证之严谨逻辑关系</h1><p><strong>严谨逻辑关系：</strong>一种“<strong>形式逻辑+论证</strong>”的综合题目，题干中存在逻辑关联词，可先翻译再解题。</p><h2 id="严谨逻辑关系的一般质疑"><a href="#严谨逻辑关系的一般质疑" class="headerlink" title="严谨逻辑关系的一般质疑"></a>严谨逻辑关系的一般质疑</h2><p>若题干的结论存在逻辑关联词（例如如果那么、只有才等），可翻译为A→B，再在选项中寻找A 且非B，少数题目可用A→非B 代替A 且非B 进行质疑。</p><h3 id="“A-且非B”质疑A→B"><a href="#“A-且非B”质疑A→B" class="headerlink" title="“A 且非B”质疑A→B"></a>“A 且非B”质疑A→B</h3><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240813133517585.png" alt="image-20240813133517585"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240813134019173.png" alt="image-20240813134019173"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240813134319292.png" alt="image-20240813134319292"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240813134659608.png" alt="image-20240813134659608"></p><h3 id="“A→非B”质疑A→B"><a href="#“A→非B”质疑A→B" class="headerlink" title="“A→非B”质疑A→B"></a>“A→非B”质疑A→B</h3><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240813135859478.png" alt="image-20240813135859478"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240813140647754.png" alt="image-20240813140647754"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240813141407939.png" alt="image-20240813141407939"></p><h2 id="严谨逻辑关系的支持与前提假设"><a href="#严谨逻辑关系的支持与前提假设" class="headerlink" title="严谨逻辑关系的支持与前提假设"></a>严谨逻辑关系的支持与前提假设</h2><h3 id="“A→B”搭桥A-和B"><a href="#“A→B”搭桥A-和B" class="headerlink" title="“A→B”搭桥A 和B"></a>“A→B”搭桥A 和B</h3><p>若题干存在断点且选项包含逻辑关联词，可在选项中寻找“A→B”搭桥断点A、B。</p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240814225310868.png" alt="image-20240814225310868"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240814230013112.png" alt="image-20240814230013112"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240814230453894.png" alt="image-20240814230453894"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240814231303376.png" alt="image-20240814231303376"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240814232128955.png" alt="image-20240814232128955"></p><h2 id="三段论的必要前提"><a href="#三段论的必要前提" class="headerlink" title="三段论的必要前提"></a>三段论的必要前提</h2><p><strong>三段论推理：</strong>演绎推理中的一种简单推理判断。<br>它包含：一个一般性的原则（大前提），一个附属于前面大前提的特殊化陈述（小前提），以及由此引申出的特殊化陈述符合一般性原则的结论。</p><h4 id="解题技巧"><a href="#解题技巧" class="headerlink" title="解题技巧"></a>解题技巧</h4><ul><li>①所有＋有些＝有些</li><li>②是＋是＝是、是＋否＝否</li><li>③三种概念各出现两次</li></ul><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240814235338775.png" alt="image-20240814235338775"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240814224034331.png" alt="image-20240814224034331"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240814224242665.png" alt="image-20240814224242665"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240814224403151.png" alt="image-20240814224403151"></p><p><img src="/2024/08/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E5%9B%9B%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E4%B8%A5%E8%B0%A8%E9%80%BB%E8%BE%91%E5%85%B3%E7%B3%BB/image-20240815000147507.png" alt="image-20240815000147507"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 判断推理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 判断推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>办理刑事案件能力</title>
      <link href="/2024/08/10/%E5%85%AC%E5%8A%A1%E5%91%98/%E5%85%AC%E5%AE%89/%E5%8A%9E%E7%90%86%E5%88%91%E4%BA%8B%E6%A1%88%E4%BB%B6%E8%83%BD%E5%8A%9B/"/>
      <url>/2024/08/10/%E5%85%AC%E5%8A%A1%E5%91%98/%E5%85%AC%E5%AE%89/%E5%8A%9E%E7%90%86%E5%88%91%E4%BA%8B%E6%A1%88%E4%BB%B6%E8%83%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="办理刑事案件能力"><a href="#办理刑事案件能力" class="headerlink" title="办理刑事案件能力"></a>办理刑事案件能力</h1><h2 id="刑诉法流程图"><a href="#刑诉法流程图" class="headerlink" title="刑诉法流程图"></a>刑诉法流程图</h2><p>公安机关在刑事诉讼中的基本职权，是依法对刑事案件<strong>立案、侦查、预审</strong>；决定、<strong>执行强制措施</strong>；对依法不追究刑事责任的不予立案，已经追究的撤销案件；<strong>对侦查终结应当起诉的案件，移送人民检察院审查起诉</strong>；对不够刑事处罚的犯罪嫌疑人需要行政处理的，依法给予处理或者移送有关部门；<strong>对被判处有期徒刑的罪犯，在被交付执行刑罚前</strong>，<strong>剩余刑期在三个月以下的</strong>，<strong>代为执行刑罚</strong>；<strong>执行拘役、剥夺政治权利、驱逐出境。</strong>(16、17、18、19 连考四年，注:公安机关是刑事诉讼中的侦查机关和刑罚执行机关)</p><h2 id="刑事强制措施"><a href="#刑事强制措施" class="headerlink" title="刑事强制措施"></a>刑事强制措施</h2><p>拘传、取保、监视居住、拘留、逮捕</p><p>判决执行前，先行羁押的，羁押一日抵刑期一日</p><p><img src="/2024/08/10/%E5%85%AC%E5%8A%A1%E5%91%98/%E5%85%AC%E5%AE%89/%E5%8A%9E%E7%90%86%E5%88%91%E4%BA%8B%E6%A1%88%E4%BB%B6%E8%83%BD%E5%8A%9B/image-20240810222604584.png" alt="image-20240810222604584"></p><h2 id="公安机关在刑事诉讼中应遵循的基本原则"><a href="#公安机关在刑事诉讼中应遵循的基本原则" class="headerlink" title="公安机关在刑事诉讼中应遵循的基本原则"></a>公安机关在刑事诉讼中应遵循的基本原则</h2><ul><li>(1)依靠群众。</li><li>(2)以事实为依据_以法律为准绳。</li><li>(3)对于一切公民在适用法律上一律平等原则。</li><li><strong>(4)在刑事诉讼中公、检、法分工负责、互相配合、互相制约原则。</strong></li><li>(5)公安机关在刑事诉讼中接受检察机关法律监督原则。</li><li>(6)公安机关在刑事诉讼中加强内部监督原则。</li><li>(7)重证据、重调查研究、不轻信口供原则。</li><li>(8)保障诉讼参与人依法享有的各项权利原则。</li><li>(9)用本民族语言、文字进行诉讼原则。</li><li>(10)尊重和保障人权</li></ul><h2 id="立案"><a href="#立案" class="headerlink" title="立案"></a>立案</h2><h3 id="受案"><a href="#受案" class="headerlink" title="受案"></a>受案</h3><h4 id="案件来源"><a href="#案件来源" class="headerlink" title="案件来源"></a>案件来源</h4><ul><li>公民扭送、报案、控告、举报或者犯罪嫌疑人自动投案的</li><li>行政执法机关、司法机关和监察机关等单位或者其他公安机关移送的属于本单位管辖的案件;</li><li>公安机关及其民警在工作中发现的;</li><li>110 报警服务台指令的案件;</li><li>上级交办的案件等</li></ul><h4 id="报案、控告、举报的区别"><a href="#报案、控告、举报的区别" class="headerlink" title="报案、控告、举报的区别"></a>报案、控告、举报的区别</h4><ul><li><strong>报案</strong>主体是被害人或第三人，知道犯罪事实，但是不知道犯罪嫌疑人。</li><li><strong>控告</strong>主体是被害人，知道犯罪事实，也知道犯罪嫌疑人。</li><li><strong>举报</strong>主体是第三人，知道犯罪事实和犯罪嫌疑人;</li></ul><h4 id="不属于自己管辖的"><a href="#不属于自己管辖的" class="headerlink" title="不属于自己管辖的"></a>不属于自己管辖的</h4><p>经公安机关审查后不属于自己管辖的案件，<strong>应当在24小时内移送</strong>，需要采取紧急措施的，应当先采取措施，再移送案件</p><h4 id="受案审查期限"><a href="#受案审查期限" class="headerlink" title="受案审查期限"></a>受案审查期限</h4><p>受案到立案期间，公安机关需要对报警人提交的证据材料是否属实，该案是否符合立案标准进行审查。<strong>一般审查期限不超过3日</strong>，涉嫌犯罪线索需要查证的，<strong>不超过7日</strong>；重大疑难案件，经县级以上公安机关负责人审批，<strong>可延长至30日</strong>【刑拘的事件口诀也是<strong>3；7；30</strong>】</p><h4 id="★★★调查核实阶段可采取的措施"><a href="#★★★调查核实阶段可采取的措施" class="headerlink" title="★★★调查核实阶段可采取的措施"></a>★★★调查核实阶段可采取的措施</h4><p><strong>可以采用询问、查询、勘验、鉴定和调取证据材料等不限制被调查对象人身、财产权利的措施，不得对被调查对象采取强制措施，不得查封、扣押、冻结被调查对象的财产，不得采取技术侦查措施。</strong></p><h3 id="立案与不立案"><a href="#立案与不立案" class="headerlink" title="立案与不立案"></a>立案与不立案</h3><p>刑事诉讼开始的标志是立案，而非受案</p><h4 id="立案-1"><a href="#立案-1" class="headerlink" title="立案"></a>立案</h4><h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h5><ul><li>有犯罪事实；</li><li>需要追究刑事责任；</li><li>属于本单位管辖。</li></ul><blockquote><p><strong>注意</strong>：其他应当立案情形:①检察院通知立案的;②法院直接受理的案件，认为证据不足或可能判处3年以上刑罚，移送公安机关立案侦查的:③上级公安机关指定管辖或书面通知立案的</p></blockquote><h5 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h5><ul><li>呈批。制作呈请立案报告书，<strong>报县级以上公安机关负责人批准</strong></li><li>决定。批准立案后，应制作立案决定书</li><li>通知。<strong>制作立案告知书</strong>，但涉及国家秘密、共同犯罪、集团犯罪、黑社会性质组织犯罪等情况需要保密时，可视情不予告知</li></ul><h4 id="不予立案"><a href="#不予立案" class="headerlink" title="不予立案"></a>不予立案</h4><h5 id="情形"><a href="#情形" class="headerlink" title="情形"></a>情形</h5><p><strong><em>无事实、显著轻、过时效、特赦告诉和死掉</em></strong></p><ul><li>没有犯罪事实。</li><li>犯罪事实显著轻微，不需要追究刑事责任</li><li>具有《刑事诉讼法》第16条规定的法定情形不予追究刑事责任情形之一的：<ul><li><strong>情节显著轻微，危害不大</strong>，不认为是犯罪</li><li>犯罪<strong>已过追诉时效</strong></li><li><strong>经特赦令免除刑罚的</strong></li><li><strong>告诉</strong>才处理的，没有告诉或者撤回告诉的</li><li>犯罪嫌疑人死亡的</li><li>其他法律规定免予追究刑事责任的</li></ul></li></ul><h5 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h5><ul><li>呈批。制作《呈请不予立案报告书》，报县级以上公安机关负责人批准</li><li>决定。批准不予立案，制作《不子立案通知书》</li><li>告知。对有控告人的案件，将《不子立案通知书》<strong>3日内送达控告人</strong>；对行政执法机关移送的案件，应当说明理由，并将《不予立案通知书》及案件材料送达移送案件的行政执法机关</li></ul><h4 id="立案监督"><a href="#立案监督" class="headerlink" title="立案监督"></a>立案监督</h4><h5 id="被害人监督"><a href="#被害人监督" class="headerlink" title="被害人监督"></a>被害人监督</h5><p>控告人可以在收到不予立案通知书后<strong>七日以内向作出决定的公安机关申请复议</strong>；公安机关应当在收到复议申请后<strong>三十日以内</strong>作出决定，并将决定书送达控告人。控告人对不予立案的复议决定不服的，可以在收到复议决定书后<strong>七日以内</strong>向上一级公安机关申请<strong>复核</strong>；上一级公安机关应当在收到复核申请后三十日以内作出决定。案情重大、复杂的公安机关可以延长复议、复核时限，但是延长时限不得超过三十日，并书面告知申请人。<strong><em>同级复议，上级复核。先复议后复核</em></strong>)</p><h5 id="行政执法监督"><a href="#行政执法监督" class="headerlink" title="行政执法监督"></a>行政执法监督</h5><ul><li>对行政执法机关移送的案件，<strong>公安机关应当自接受案件之日起三日以内进行审查</strong>，认为有犯罪事实，需要追究刑事责任，<strong>依法决定立案的，应当书面通知移送案件的行政执法机关</strong>；认为没有犯罪事实，或者犯罪事实显著轻微，不需要追究刑事责任，依法不予立案的，应当说明理由，<strong>并将不予立案通知书送达移送案件的行政执法机关</strong>，相应退回案件材料<strong>【<em>无论立案与否，都要走书面手续，口头不行</em>】</strong></li><li>公安机关认为行政执法机关移送的案件材料不全的，应当在接受案件后二十四小时以内通知移送案件的行政执法机关在三日以内补正，但不得已材料不全为由不接受移送案件。【<strong><em>不是公安机关补正，而是让移送机关补正</em></strong>】</li><li>公安机关认为行政执法移送的案件<strong>不属于公安机关职责范围的</strong>，应当<strong>以书面通知送案件的行政执法机关</strong>向其他主管机关移送案件，并说明理由。【<strong><em>书面通知，口头不行</em></strong>】</li><li>行政机关对公安机关不予立案不服的，收到不予立案通知书后3日内向原机关申请复议，公安机关在收到复议申请后3日内作出决定，并书面通知移送案件的行政机关【<strong><em>目前没考过</em></strong>】</li><li>★公安机关对移送案件，<strong>应在案件移送书回执上签字，不再出具受案回执</strong>；不属于本机关管辖的，24小时内转送有管辖权的机关，<strong>书面告知</strong>移送的行政机关，对不属于公安机关管辖的，退回移送案件的行政执法机关，并书面说明理由</li><li>行政机关移送犯罪案件，送达的案件移送书中需要载明<strong>移送机关名称、行政违法行为涉嫌犯罪罪名、案件主办人及联系电话</strong>等。案件移送书应当<strong>附移送材料清单，并加盖移送机关公章</strong></li></ul><h4 id="检察院监督"><a href="#检察院监督" class="headerlink" title="检察院监督"></a>检察院监督</h4><ul><li><strong>应立案不立案的</strong>：需要说明理由，公安7天内说明，检察院认为理由不成立，通知公安立案，公安必须在15天立案</li><li><strong>不应立案却立案的</strong>：要求说明理由，公安7天内说明，检察院认为理由不成立，通知公安撤销案件，公安立即撤销【<strong><em>同级复议，上级复核，先复议，再复核</em></strong>】</li><li><strong>公安机关认为检察院撤销案件通知有错误要求同级检察院复议</strong></li><li><strong>公安机关不接受检察院复议决定可提请上一级检察院复核</strong></li></ul><h3 id="形式案件管辖"><a href="#形式案件管辖" class="headerlink" title="形式案件管辖"></a>形式案件管辖</h3><h4 id="一般刑事案件"><a href="#一般刑事案件" class="headerlink" title="一般刑事案件"></a>一般刑事案件</h4><ul><li><p>由犯罪地的公安机关管辖为主。以居住地公安机关管辖为辅</p></li><li><p>几个公安机关都有管辖权的刑事案件，由<strong>最初受理的公安机关管辖</strong>。必要时，可以由<strong>主要犯罪地</strong>的公安机关管辖</p></li><li><p>网络犯罪，沾边就能管</p></li><li><p>行驶中的交通工具上发生的刑事案件，由交通工具<strong>最初停靠地</strong>公安机关管辖；必要时，交通工具<strong>始发地、途径地、到达地</strong>公安机关也可以管辖</p></li><li><p>协商管辖：管辖不明确或有争议的，可以由有关公安机关协商。协商不成的，<strong>由共同的上级公安机关指定管辖</strong>。</p></li><li><p>★与监委会互涉案件的管辖【<strong><em>监委会管辖权优先，监委会只有调查权，没有侦查权</em></strong>】：公安机关侦查的刑事案件的犯罪嫌疑人涉及检察机关管辖的案件时，应当及时与同级监察机关协商，<strong>一般应当由监察机关为主调查，公安机关予以协助</strong></p></li><li><p>县级公安机关负责侦察发生在本辖区内的刑事案件。<strong>设区的市一级以上公安机关负责下列犯罪中重大案件侦察：</strong></p><ul><li><p>危害<strong>国</strong>家安全犯罪</p></li><li><p><strong>恐</strong>怖活动犯罪</p></li><li><p>涉<strong>外</strong>犯罪</p></li><li><p><strong>经</strong>济犯罪</p></li><li><p><strong>集</strong>团犯罪</p></li><li><p>跨区<strong>域</strong>犯罪</p></li><li><blockquote><p><strong>外国惊恐御姐</strong></p></blockquote></li></ul></li><li><p>移送管辖：</p><ul><li>倒卖、伪造、变造、火车票的刑事案件，铁路、地方谁先抓到谁先管</li><li>由铁路公安管，下一站停哪，哪管</li><li>铁路建设工地，由地方公安管</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 公专 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公务员 </tag>
            
            <tag> 公专 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刑法</title>
      <link href="/2024/08/09/%E5%85%AC%E5%8A%A1%E5%91%98/%E5%85%AC%E5%AE%89/%E5%88%91%E6%B3%95/"/>
      <url>/2024/08/09/%E5%85%AC%E5%8A%A1%E5%91%98/%E5%85%AC%E5%AE%89/%E5%88%91%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="刑法"><a href="#刑法" class="headerlink" title="刑法"></a>刑法</h1><h2 id="刑法的基本原则"><a href="#刑法的基本原则" class="headerlink" title="刑法的基本原则"></a>刑法的基本原则</h2><ul><li>罪刑法定原则：法无明文规定不为罪,法无明文规定不处罚：(强奸我国犯罪、通奸我国不犯罪)</li><li>法律面前人人平等：对任何人犯罪，在适用法律上一律平等，不允许任何人有超越法律的特权</li><li>罪责刑相适应原则：罪行大小与刑事责任的大小、刑法轻重应相称，刑罚应与犯罪性质、犯罪情节、人身危险性相适应，重罪重罚，轻罪轻罚</li></ul><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><h3 id="空间效力"><a href="#空间效力" class="headerlink" title="空间效力"></a>空间效力</h3><h4 id="属地管辖（中国领域内犯罪）"><a href="#属地管辖（中国领域内犯罪）" class="headerlink" title="属地管辖（中国领域内犯罪）"></a>属地管辖（中国领域内犯罪）</h4><h5 id="属地"><a href="#属地" class="headerlink" title="属地"></a>属地</h5><p>领域：领陆、领水、领空、地下层、驻外使领馆、船舶、航空器。</p><p>犯罪地：行为地、结果地之一即可</p><h5 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h5><ul><li>享有外交特权和豁免权的外国人在中国境内犯罪通过外交途径解决。</li><li>民族自治区、港澳台地区的犯罪适用本地区刑法不适用我国大陆刑法。</li></ul><h4 id="属人管辖"><a href="#属人管辖" class="headerlink" title="属人管辖"></a>属人管辖</h4><ul><li>最高刑为3年以下有期徒刑的,可以不予追究。</li><li>我国的国家工作人员和军人,一律追究。</li></ul><h4 id="保护管辖"><a href="#保护管辖" class="headerlink" title="保护管辖"></a>保护管辖</h4><ul><li>重罪原则：按照我国刑法规定最低刑须为3年以上有期徒刑（国内外均犯罪）</li><li>双重罪原则：按照犯罪地法律也应受刑罚处罚</li></ul><h4 id="普通管辖"><a href="#普通管辖" class="headerlink" title="普通管辖"></a>普通管辖</h4><p>我国缔结或者参加的国际条约所规定的犯罪</p><h3 id="时间效力（前提颁布）"><a href="#时间效力（前提颁布）" class="headerlink" title="时间效力（前提颁布）"></a>时间效力（前提颁布）</h3><p>从旧兼从轻，看哪个对行为人有利</p><p>刑法生效后，对它生效前未经审判或判决未确定的行为是否具有追溯适用的效力。《刑法》第 12条对刑法溯及力采用从旧兼从轻原则，即对于现行刑法生效以前未经审判或者判决尚未确定的行为，适用行为当时有效的法律，但按照现行有效法律不认为是犯罪或处罚较轻的，适用现行有效法律。</p><h2 id="犯罪构成"><a href="#犯罪构成" class="headerlink" title="犯罪构成"></a>犯罪构成</h2><h3 id="犯罪客体"><a href="#犯罪客体" class="headerlink" title="犯罪客体"></a>犯罪客体</h3><ul><li>作为(积极的行为)，即行为人以积极的身体活动实施某种被刑法禁止的行为——<strong>不当为而为之</strong></li><li>不作为(消极的行为),即行为人消极地不履行法律义务而危害社会的行为——<strong>当为而不为</strong></li></ul><h3 id="犯罪主体"><a href="#犯罪主体" class="headerlink" title="犯罪主体"></a>犯罪主体</h3><h4 id="刑事责任年龄"><a href="#刑事责任年龄" class="headerlink" title="刑事责任年龄"></a>刑事责任年龄</h4><p>法律所规定的行为人对自己的犯罪行为负刑事责任必须达到的年龄。刑事责任年龄的计算，须以生日的次日算作满周岁的标准。</p><h5 id="完全不负刑事责任年龄"><a href="#完全不负刑事责任年龄" class="headerlink" title="完全不负刑事责任年龄"></a>完全不负刑事责任年龄</h5><p>不满12周岁</p><h5 id="相对负刑事责任年龄"><a href="#相对负刑事责任年龄" class="headerlink" title="相对负刑事责任年龄"></a>相对负刑事责任年龄</h5><ul><li>已满十二周岁不满十四周岁的人，犯故意杀人、故意伤害罪，致人死亡或者以特别残忍手段致人重伤造成严重残疾，情节恶劣，经最高人民检察院核准追诉的，应当负刑事责任。</li><li>已满 14 周岁不满 16 周岁(八种犯罪行为)。【<strong>烧杀奸抢，商贩抱头</strong>——放火、犯故意杀人、强奸、抢劫、故意伤害致人重伤或者死亡、贩卖毒品、爆炸、投放危险物质罪】</li></ul><h5 id="完全负刑事责任年龄"><a href="#完全负刑事责任年龄" class="headerlink" title="完全负刑事责任年龄"></a>完全负刑事责任年龄</h5><p>已满16周岁</p><h5 id="减轻刑事责任年龄（已满14周岁不满18周岁和已满75周岁）"><a href="#减轻刑事责任年龄（已满14周岁不满18周岁和已满75周岁）" class="headerlink" title="减轻刑事责任年龄（已满14周岁不满18周岁和已满75周岁）"></a>减轻刑事责任年龄（已满14周岁不满18周岁和已满75周岁）</h5><ul><li>已满 14周岁不满18周岁的人犯罪的，应当从轻或减轻处罚</li><li>已满75周岁的人故意犯罪可以从轻或减轻处罚,过失犯罪应当从轻或者减轻处罚</li></ul><h5 id="精神病人"><a href="#精神病人" class="headerlink" title="精神病人"></a>精神病人</h5><ul><li>精神病人在<strong>不能辨认或者不能控制自己行为</strong>的时候造成危害结果，经法定程序鉴定确认的，<strong>不负刑事责任</strong>；但是应当责令他的家属或者监护人严加看管和医疗；在<strong>必要的时候，由政府强制医疗</strong></li><li>间歇性精神病人，在精神正常的时候犯罪，应当负刑事责任</li><li>尚未完全丧失辨认或者控制自己行为能力的精神病人犯罪的，<strong>应当负刑事责任，但是可以从轻或者减轻处罚</strong></li></ul><blockquote><p>注意: </p><p><em>生理性醉酒的人犯罪，应当负刑事责任；又聋又哑的人或者盲人犯罪，可以从轻、减轻或者免除处罚。</em></p></blockquote><h4 id="犯罪主观方面"><a href="#犯罪主观方面" class="headerlink" title="犯罪主观方面"></a>犯罪主观方面</h4><h5 id="犯罪故意（100-造成伤害）"><a href="#犯罪故意（100-造成伤害）" class="headerlink" title="犯罪故意（100%造成伤害）"></a>犯罪故意（100%造成伤害）</h5><ul><li>直接故意：明知必然，可能发生危害结果，希望并积极追求结果的发生【<strong>干死我开心，干不死我难过</strong>】</li><li>间接故意：明知可能发生危害结果，放任结果发生<strong>【死不死与我无关】</strong></li></ul><h5 id="犯罪过失（可能造成伤害）"><a href="#犯罪过失（可能造成伤害）" class="headerlink" title="犯罪过失（可能造成伤害）"></a>犯罪过失（可能造成伤害）</h5><ul><li>过于自信的过失：已经预见自己的行为可能发生危害结果，但轻信能够避免，以致发生危害结果的心理态度。</li><li>疏忽大意的过失：应当预见自己的行为可能发生危害结果，因为疏忽大意而没有预见，以致发生这种结果的心理态度。</li></ul><h5 id="无罪过事件"><a href="#无罪过事件" class="headerlink" title="无罪过事件"></a>无罪过事件</h5><p>意外事件：因无法预见而没有预见</p><h2 id="犯罪形态"><a href="#犯罪形态" class="headerlink" title="犯罪形态"></a>犯罪形态</h2><p><img src="/2024/08/09/%E5%85%AC%E5%8A%A1%E5%91%98/%E5%85%AC%E5%AE%89/%E5%88%91%E6%B3%95/image-20240810042104996.png" alt="image-20240810042104996"></p><h2 id="共同犯罪"><a href="#共同犯罪" class="headerlink" title="共同犯罪"></a>共同犯罪</h2><p><strong><em>与八大罪结合考，一人既遂，全体既遂</em></strong></p><p><strong><em>共谋+犯罪结果发生 = 共犯</em></strong></p><p>指二人以上共同故意犯罪。(两个以上主体都具备责任能力、达到责任年龄的一般主体资格)两个自然人共同实施某种犯罪行为，如果其中一个法定年龄不到，或者没有责任能力，那就不认为是共同犯罪了。</p><h3 id="常考点"><a href="#常考点" class="headerlink" title="常考点"></a>常考点</h3><ul><li><strong>与八大罪结合考</strong>(15岁小孩和20岁成年人共同实施绑架，不形成共犯)</li><li><strong>共谋+犯罪结果发生 = 共犯(一人既遂，全体既遂)</strong></li><li><strong>同时犯：</strong>二人以上同时侵害同一对象，但彼此缺乏共同犯罪故意的意思联络的，不是共同犯罪。</li><li>间接正犯(法考内容)：对实行者具有支配力。一个人对他人能形成支配力，主要源于三种情形一是强制手段，二是欺骗手段，三是法律规定的要素(法考中也考察不到)。</li></ul><h2 id="正当防卫与紧急避险"><a href="#正当防卫与紧急避险" class="headerlink" title="正当防卫与紧急避险"></a>正当防卫与紧急避险</h2><h3 id="正当防卫"><a href="#正当防卫" class="headerlink" title="正当防卫"></a>正当防卫</h3><p>为了使国家、公共利益、<strong>本人或者他人</strong>的人身、财产和其他权利免受<strong>正在进行</strong>的不法侵害，而采取的制止不法侵害的行为，对不法侵害人造成损害的，属于正当防卫，<strong>不负刑事责任</strong>。</p><h4 id="起因条件"><a href="#起因条件" class="headerlink" title="起因条件"></a>起因条件</h4><h5 id="现实性"><a href="#现实性" class="headerlink" title="现实性"></a>现实性</h5><p>假想防卫：客观上不存在现实的不法侵害，行为人误认为存在进行“防卫”</p><p>注意：假想防卫属于行为人对自己行为的实际性质发生错识，假想防卫不成立故意犯罪，如果行为人主观上有过失，定为过失犯罪；没有过失，按意外事件处理</p><h5 id="不法性"><a href="#不法性" class="headerlink" title="不法性"></a>不法性</h5><p>不能对合法行为进行防卫</p><h5 id="紧迫性"><a href="#紧迫性" class="headerlink" title="紧迫性"></a>紧迫性</h5><p>紧迫性：并非对所有违法行为都可进行防卫，如重婚罪、受贿罪等。</p><h4 id="对象条件"><a href="#对象条件" class="headerlink" title="对象条件"></a>对象条件</h4><p>必须针对不法侵害人本人进行防卫</p><h4 id="主观条件"><a href="#主观条件" class="headerlink" title="主观条件"></a>主观条件</h4><p>出于防卫意识和目的</p><h4 id="限度条件"><a href="#限度条件" class="headerlink" title="限度条件"></a>限度条件</h4><p>必须没有明显超过必要限度造成重大损害</p><p>【<strong><em>杀人帮凶，强抢人身</em></strong>】</p><h5 id="特别防卫（无限防卫）"><a href="#特别防卫（无限防卫）" class="headerlink" title="特别防卫（无限防卫）"></a>特别防卫（无限防卫）</h5><p>对正在进行行凶、杀人、抢劫、强奸、绑架以及其他严重危及人身安全的暴力犯罪，采取防卫行为，造成不法侵害人伤亡的，不属于防卫过当，不负刑事责任。</p><h3 id="紧急避险"><a href="#紧急避险" class="headerlink" title="紧急避险"></a>紧急避险</h3><p>为了避免公共利益、本人或者他人的人身和其他权利免受正在发生的危险，不得已而采取的损害另一较小合法利益的行为。最大的合法利益是生命权大于健康权或者身体权大于财产权</p><h4 id="成立条件"><a href="#成立条件" class="headerlink" title="成立条件"></a>成立条件</h4><h5 id="起因条件-1"><a href="#起因条件-1" class="headerlink" title="起因条件"></a>起因条件</h5><p>必须有危险发生，就是出现了足以使合法权益遭受严重损害的危险情况，如自然灾害、动物侵袭、人的行为、人的生理病理等使合法利益面临着紧急的危险。</p><h5 id="时间条件"><a href="#时间条件" class="headerlink" title="时间条件"></a>时间条件</h5><p>必须是实际存在的<strong>正在发生</strong>的危险。</p><h5 id="主观条件-1"><a href="#主观条件-1" class="headerlink" title="主观条件"></a>主观条件</h5><p>必须是为了使合法利益免受正在发生的危险。这是避险目的正当性的条件。法律不认可为保护非法利益而采取避险行为。</p><h5 id="对象条件-1"><a href="#对象条件-1" class="headerlink" title="对象条件"></a>对象条件</h5><p>紧急避险的本质特征，就是为了保全一个较大的合法权益，而将其面临的危险转嫁给另一个较小的合法权益。</p><h5 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h5><p>避险行为必须是在迫不得已的情况下实施。</p><h5 id="限度条件-1"><a href="#限度条件-1" class="headerlink" title="限度条件"></a>限度条件</h5><p>避险行为不能超过必要限度造成不应有的危害。</p><blockquote><p>注意：</p><p>避险行为所造成的法益损害必须小于所避免的法益损害。</p></blockquote><h5 id="特别例外限制"><a href="#特别例外限制" class="headerlink" title="特别例外限制"></a>特别例外限制</h5><p>不要求避险的人是面临危险的人；</p><p>紧急避险不适用于职务上、业务上负有特定责任的人。</p><h4 id="避险过当"><a href="#避险过当" class="headerlink" title="避险过当"></a>避险过当</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>避险行为超过必要限度造成不应有的损害的行为。</p><h5 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h5><ul><li>行为人在客观上实施超过必要限度的避险行为，并造成合法权益不应有的损害，即避险行为造成的损害大于或等于所保全利益。</li><li>行为人在主观上对避险过当行为具有罪过。避险过当的罪过一般是过失。</li></ul><h5 id="处罚"><a href="#处罚" class="headerlink" title="处罚"></a>处罚</h5><p>避险过当，应当减轻或者免除处罚</p><h3 id="正当防卫和紧急避险的不同点"><a href="#正当防卫和紧急避险的不同点" class="headerlink" title="正当防卫和紧急避险的不同点"></a>正当防卫和紧急避险的不同点</h3><div class="table-container"><table><thead><tr><th>区别</th><th>正当防卫</th><th>紧急避险</th></tr></thead><tbody><tr><td>危害的来源不同</td><td>正当防卫的危害来源只能是人的违法犯罪行为</td><td>紧急避险的危害来源即可能是人的不法侵害，也可能是来自于自然灾害，还可能是动物的侵袭或者人的生理、病理疾患等。</td></tr><tr><td>行为的对象不同</td><td>正当防卫的对象只能是不法侵害者本人，不能针对第三者</td><td>紧急避险行为的对象则必须是第三者，是合法行为对他人合法权益的损害</td></tr><tr><td>行为的限制不同</td><td>正当防卫行为的实施是出于必要，即使能够用其他方法避免不法侵害，也允许进行正当防卫</td><td>紧急避险行为的实施则出于迫不得已，除了避险以外别无其它选择</td></tr><tr><td>行为的限度不同</td><td>正当防卫所造成的损害，既可以小于，也可以大于不法侵害行为可能造成的损害</td><td>紧急避险所造成的损害，必须小于所保护的权益，而不能等于大于所保护的权益</td></tr><tr><td>主体的限定不同</td><td>正当防卫是每个公民的法定权利</td><td>紧急避险则不适用于职务上、业务上负有特定责任的人</td></tr></tbody></table></div><h3 id="刑法的量刑"><a href="#刑法的量刑" class="headerlink" title="刑法的量刑"></a>刑法的量刑</h3><h4 id="累犯"><a href="#累犯" class="headerlink" title="累犯"></a>累犯</h4><p>对于累犯，应当从重处罚，不得缓刑、假释，累犯分为一般累犯和特别累犯两种</p><blockquote><p>从重：累犯、教唆未满18岁未成年人</p></blockquote><h4 id="一般累犯"><a href="#一般累犯" class="headerlink" title="一般累犯"></a>一般累犯</h4><p><strong><em>故意有期五年内，两罪均需十八岁</em></strong></p><h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h5><ul><li>前后两罪都是<strong>故意犯罪</strong>（交通肇事罪不行）</li><li>前后两罪都应当是<strong>有期</strong>徒刑以上刑罚的犯罪；后罪在前罪的<strong>刑法执行完毕</strong>或赦免以后5年内（拘役、管制不行）</li><li>不满18周岁的人犯罪的，不成立累犯</li></ul><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>犯罪分子在假释（缓刑）考验期内又犯新罪，不构成累犯，应撤销假释（缓刑），适用数罪并罚</li><li>犯罪分子假释考验期满5年以内又犯新罪，构成累犯</li><li>犯罪分子在缓刑考验期满后又犯罪，不构成累犯</li></ul><h4 id="特殊累犯"><a href="#特殊累犯" class="headerlink" title="特殊累犯"></a>特殊累犯</h4><p><strong><em>两罪均需国控黑，刑法年限无要求</em></strong></p><ul><li>前后两罪都是<strong>国恐黑</strong></li><li>前后两罪刑法无要求，有主刑以其为主</li><li>后罪在前罪的刑法执行完毕或赦免以后任何期限之内</li><li>不满18周岁的人犯罪的，不成立罪犯</li></ul><h3 id="自首、坦白、立功"><a href="#自首、坦白、立功" class="headerlink" title="自首、坦白、立功"></a>自首、坦白、立功</h3><div class="table-container"><table><thead><tr><th>自首</th><th>供述公安机关未掌握的本人罪行</th></tr></thead><tbody><tr><td><strong>坦白</strong></td><td><strong>供述公安机关已掌握的本人罪行</strong></td></tr><tr><td><strong>立功</strong></td><td><strong>揭发他人</strong></td></tr></tbody></table></div><blockquote><p>注意：</p><p>上述自首、坦白、立功可以从轻或减轻处罚。其中，犯罪较轻的，可以免除处罚。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 公专 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公务员 </tag>
            
            <tag> 公专 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公安机关办理行政案件能力</title>
      <link href="/2024/08/08/%E5%85%AC%E5%8A%A1%E5%91%98/%E5%85%AC%E5%AE%89/%E5%85%AC%E5%AE%89%E6%9C%BA%E5%85%B3%E5%8A%9E%E7%90%86%E8%A1%8C%E6%94%BF%E6%A1%88%E4%BB%B6%E8%83%BD%E5%8A%9B/"/>
      <url>/2024/08/08/%E5%85%AC%E5%8A%A1%E5%91%98/%E5%85%AC%E5%AE%89/%E5%85%AC%E5%AE%89%E6%9C%BA%E5%85%B3%E5%8A%9E%E7%90%86%E8%A1%8C%E6%94%BF%E6%A1%88%E4%BB%B6%E8%83%BD%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="公安机关办理行政案件能力"><a href="#公安机关办理行政案件能力" class="headerlink" title="公安机关办理行政案件能力"></a>公安机关办理行政案件能力</h1><h2 id="受案"><a href="#受案" class="headerlink" title="受案"></a>受案</h2><h3 id="接报案登记"><a href="#接报案登记" class="headerlink" title="接报案登记"></a>接报案登记</h3><ul><li>单位辖区管辖范围内的案件，应立即处理，制作<strong>立案登记表</strong>，<strong>立案回执</strong>（交给报案人…）</li><li>不属于本单位辖区范围内的，应当在<strong>二十四小时</strong>内移送管辖区单位处理，并告知报案人…</li><li>不属于公安机关职责范围内的，应<strong>立即口头告知</strong>报案人去其他机关报案，报案人对口头告知内容<strong>有异议，或者不能当场判断</strong>的，应当<strong>书面告知</strong>，没有联系方式除外</li><li>报案、控告、举报即可口头提出，也可书面提出</li><li>不属于公安机关职责范围内事项及属于公安机关职责内但不属于本单位管辖的，<strong>不再制作立案登记表</strong>，将相关处理情况在接报案登记表中<strong>网上注明</strong></li><li>行政案件移送管辖的，询问查证时间和扣押等措施的期限<strong>重新计算</strong></li></ul><h3 id="行政案件受案审查时间"><a href="#行政案件受案审查时间" class="headerlink" title="行政案件受案审查时间"></a>行政案件受案审查时间</h3><ul><li><p>行政案件受案审查期限原则上<strong>不超过24小时</strong>，疑难复杂案件受案审查期限<strong>不超过3日</strong></p></li><li><blockquote><p>刑事案件立案审查期限原则上<strong>不超过3日</strong>；涉嫌犯罪线索需要查证的，立案审查期限<strong>不超过7日</strong>；重大疑难复杂案件，经县级以上公安机关负责人批准的可以<strong>延长至30日</strong></p></blockquote></li></ul><h3 id="网上登记"><a href="#网上登记" class="headerlink" title="网上登记"></a>网上登记</h3><p>无论投案方式如何，都应该进行<strong>网上接报案登记</strong>（涉及国家秘密除外、重复报案，案件正在办理或已经办结的不再登记）</p><h3 id="行政案件转化问题"><a href="#行政案件转化问题" class="headerlink" title="行政案件转化问题"></a>行政案件转化问题</h3><p>暂时无法确定案件性质的可先按<strong>行政案件的程序办可转理</strong></p><ul><li>行政案件转刑事案件叫结案，实物类证据可转，言词类不可转（鉴定意见除外）</li><li>刑事案件转行政案件叫撤案，刑事案卷整体作为证据归入行政案件卷宗</li></ul><h2 id="管辖"><a href="#管辖" class="headerlink" title="管辖"></a>管辖</h2><p>出题规律一般按照<strong>“谁先抓到谁先管”</strong>原则，严谨点是谁先<strong>制作《立案登记表》</strong>谁来管</p><p><img src="/2024/08/08/%E5%85%AC%E5%8A%A1%E5%91%98/%E5%85%AC%E5%AE%89/%E5%85%AC%E5%AE%89%E6%9C%BA%E5%85%B3%E5%8A%9E%E7%90%86%E8%A1%8C%E6%94%BF%E6%A1%88%E4%BB%B6%E8%83%BD%E5%8A%9B/image-20240808225615264.png" alt="image-20240808225615264"></p><blockquote><p><strong>黄赌毒行为地管辖，且不适用于当场处罚、简易程序</strong>！！！</p><p>行驶的客车上发生的行政案件，<strong>由案发后客车最初停靠地公安机关</strong>管辖，必要时，始发地，途径地，到达地公安机关也可以管辖。</p><p>网络违法采用沾边就能管原则</p></blockquote><h2 id="回避"><a href="#回避" class="headerlink" title="回避"></a>回避</h2><p>可能对案件有影响的回避</p><h3 id="提出回避的三种方式"><a href="#提出回避的三种方式" class="headerlink" title="提出回避的三种方式"></a>提出回避的三种方式</h3><ul><li>自行回避：符合回避条件自行提出</li><li>申请回避：当事人要求回避的，应当提出申请，说明理由，口头提出的应在《询问笔录》中注明</li><li>指令回避：具有应当回避的法定情形，但没有自行回避，也没有被申请回避，有权决定其回避的公安机关应当指令其回避</li></ul><h3 id="时间问题"><a href="#时间问题" class="headerlink" title="时间问题"></a>时间问题</h3><p>提出回避申请， 公安机关应在收到申请之日起<strong>二日</strong>内做出决定并通知申请人（2日≠48小时）</p><h3 id="效力问题"><a href="#效力问题" class="headerlink" title="效力问题"></a>效力问题</h3><ul><li>做出回避决定前，<strong>办案民警不得停止对案件的调查</strong></li><li>回避决定做出后，<strong>不得参与该行政案件的调查、审核和审批工作</strong></li><li>在回避前所进行的效力由<strong>作出回避决定的机关</strong>根据是否影响案件公正处理等情况决定（谁决定回避，谁决定证据效力）</li></ul><h3 id="回避制度的决定机关"><a href="#回避制度的决定机关" class="headerlink" title="回避制度的决定机关"></a>回避制度的决定机关</h3><h4 id="治安行政案件"><a href="#治安行政案件" class="headerlink" title="治安行政案件"></a>治安行政案件</h4><ul><li>办案民警回避由所属公安机关决定</li><li>公安机关负责人回避由县级以上公安机关决定</li></ul><h4 id="刑事案件"><a href="#刑事案件" class="headerlink" title="刑事案件"></a>刑事案件</h4><ul><li>侦查人员回避，由县级以上公安机关负责人决定（局领导班子）</li><li>县级以上公安负责人回避由同级人民监察委员会决定</li></ul><blockquote><p>回避是由<strong>机关</strong>提出，而非<strong>个人</strong></p><p>证人没有回避一说，证人具有不可替代性</p><p>法律中“以上”，“以下”都包含本级或本数字</p></blockquote><h2 id="调查取证"><a href="#调查取证" class="headerlink" title="调查取证"></a>调查取证</h2><h3 id="证据"><a href="#证据" class="headerlink" title="证据"></a>证据</h3><h4 id="2名警察可做的工作"><a href="#2名警察可做的工作" class="headerlink" title="2名警察可做的工作"></a>2名警察可做的工作</h4><p>2<strong>警检验人文强</strong></p><ul><li>调查取证：在进行询<strong>问</strong>、辨<strong>认</strong>、<strong>检</strong>查、勘<strong>验</strong>，实施行政<strong>强</strong>制措施等调查取证工作时，民警不得少于2人。调查时应标明执法身份。</li></ul><h4 id="1名警察带1名辅警可做的工作"><a href="#1名警察带1名辅警可做的工作" class="headerlink" title="1名警察带1名辅警可做的工作"></a>1名警察带1名辅警可做的工作</h4><p>2<strong>姐等信送调解</strong></p><ul><li>调查辅助工作：<strong>接</strong>报案、受案<strong>登</strong>记、<strong>接</strong>受证据、<strong>信</strong>息采集、<strong>调解</strong>、<strong>送</strong>达文书等工作，可由1名警察带一名辅警，但应当全程录音录像</li></ul><h4 id="取证环节出具的文书"><a href="#取证环节出具的文书" class="headerlink" title="取证环节出具的文书"></a>取证环节出具的文书</h4><h5 id="治安案件"><a href="#治安案件" class="headerlink" title="治安案件"></a>治安案件</h5><ul><li>警方去调取证据——&gt;《调取证据通知书》附《调取证据清单》</li><li>当事人主动将证据交给警方——&gt;《接受证据清单》</li><li>民警实施<strong>扣押</strong>等保全工作时，<strong>当场</strong>制作并交付给当事人——&gt;《证据保全决定书》附《证据保全清单》</li></ul><h5 id="刑事案件-1"><a href="#刑事案件-1" class="headerlink" title="刑事案件"></a>刑事案件</h5><ul><li>警方去调取证据——&gt;《调取证据通知书》附《调取证据清单》</li><li>当事人主动将证据交给警方——&gt;《接受证据清单材料》</li><li>实施查封扣押时——&gt;《查封、扣押决定书》附《查封扣押清单》</li></ul><h4 id="紧急调取证据"><a href="#紧急调取证据" class="headerlink" title="紧急调取证据"></a>紧急调取证据</h4><ul><li>对象：仅限于向<strong>单位</strong>（无法向个人紧急调取证据）</li><li>方法：电话告知警察身份，<strong>调取证据通知书+警察证复印件</strong>通过<strong>传真、互联网通信工具</strong>等方式送达</li></ul><h4 id="证人"><a href="#证人" class="headerlink" title="证人"></a>证人</h4><p>凡是知道案件情况的人，都有作证的义务</p><blockquote><p>生理上、精神上有缺陷或者年幼， 不能辨别是非、不能正确表达的人，不能作为证人</p></blockquote><h3 id="继续盘问"><a href="#继续盘问" class="headerlink" title="继续盘问"></a>继续盘问</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>对有违法嫌疑人员，经表明执法身份后，可以当场盘问、检查。</p><p><strong>对当场盘问、检查后，不能排除其违法嫌疑，依法可以适用继续盘问的，可以将其带至公安机关，经公安派出所负责人批准，对其继续盘问</strong></p><h4 id="时限要求"><a href="#时限要求" class="headerlink" title="时限要求"></a>时限要求</h4><ul><li><strong>继续盘问的时限一般为十二小时（派出所批）</strong></li><li><strong>对在十二小时以内确定难以证实或者排除其违法犯罪嫌疑的，可以延长至二十四小时（分局值班负责人批）</strong></li><li><strong>对不讲真实姓名、住址、身份，且在二十小时以内仍不能证实或者排除其违法犯罪嫌疑的，可以延长到四十八小时（分局主管负责人审批）</strong></li></ul><blockquote><p>不能从12小时直接跨到48小时，需要一级一级跳</p><p>继续盘问时间起算起点为<strong>带至公安机关之时起</strong></p></blockquote><h4 id="继续盘问适用条件"><a href="#继续盘问适用条件" class="headerlink" title="继续盘问适用条件"></a>继续盘问适用条件</h4><ul><li>被指控有犯罪行为的</li><li>有现场作案嫌疑的</li><li>有作案嫌疑身份不明的</li><li>携带的物品有可能是赃物的</li></ul><blockquote><p>4小时内盘问结束，且不能代入候问室的对象</p><ul><li>怀孕或正在哺乳自己不满一周岁婴儿的妇女</li><li>不满16周岁的未成年人</li><li>已满70周岁的老人</li></ul></blockquote><h4 id="继续盘问过程注意事项"><a href="#继续盘问过程注意事项" class="headerlink" title="继续盘问过程注意事项"></a>继续盘问过程注意事项</h4><ul><li>证件出示：<strong>着警服的人民警察，可不出示证件；便衣民警，应先出示证件（一般指警察证），证明执法身份；执法对象要求出示证件，则应当出示。</strong></li><li><strong>被盘问人的家属为老年人，残疾人，精神病人，不满16周岁的未成年人或者没有独立生活能力的人（老弱病残），因被继续盘问而使其家属无人照顾的，公安机关应通知其亲友予以照顾或者采取其他适当办法妥善安排，并将安排情况及时告知被盘问人。</strong></li></ul><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li>精神病人</li><li>醉酒的人</li><li>恐怖活动嫌疑人</li></ul><h4 id="适用地点"><a href="#适用地点" class="headerlink" title="适用地点"></a>适用地点</h4><p>一般在公安机关内约束至酒醒，也可以通知家属、亲友、单位将其领回照顾，必要时送医院醒酒</p><h4 id="约束方法"><a href="#约束方法" class="headerlink" title="约束方法"></a>约束方法</h4><ul><li>对行为举止失控的醉酒人，<strong>可以使用约束带、警绳等约束性警械进行约束，但不得使用手铐、脚镣等警械</strong>，醒酒后应立即解除约束并进行询问。</li><li><strong>询问时间不计算在询问查证时间内，如果醉酒的人同时违反治安管理的行为，治安民警应将其约束至酒醒后，在进行询问。</strong></li></ul><blockquote><p>恐怖活动嫌疑人</p><ul><li>实施前须经过<strong>县级以上公安机关负责人批准</strong></li><li>告知嫌疑人采取约束措施的理由、依据以及其依法享有的权力、救济途径</li><li>听取嫌疑人的陈述和申辩</li><li>出具决定书</li></ul><p>公安机关可以<strong>采取电子监控、不定期检查</strong>等方式对约束人遵守约束措施的情况进行监督。</p><p>约束措施的期限<strong>不得超过三个月</strong>。</p></blockquote><h3 id="传唤"><a href="#传唤" class="headerlink" title="传唤"></a>传唤</h3><h4 id="传唤对象"><a href="#传唤对象" class="headerlink" title="传唤对象"></a>传唤对象</h4><p>违法嫌疑人（<strong>不能对被侵害人和证人采取传唤手段</strong>）</p><h4 id="口头传唤和书面传唤"><a href="#口头传唤和书面传唤" class="headerlink" title="口头传唤和书面传唤"></a>口头传唤和书面传唤</h4><h5 id="书面传唤"><a href="#书面传唤" class="headerlink" title="书面传唤"></a>书面传唤</h5><p>经公安派出所，县级以上公安办案部门或者出入境边防检察机关负责人批准，使用传唤证传唤。</p><blockquote><p>传唤到案和询问查证结束，由被传唤人在传唤证上填写到案时间、离开时间并签名，拒签的，民警在传唤证上注明</p></blockquote><h5 id="口头传唤"><a href="#口头传唤" class="headerlink" title="口头传唤"></a>口头传唤</h5><p>对<strong>现场发现违法嫌疑</strong>人，人民警察出示<strong>人民警察证</strong>，可以<strong>口头传唤</strong>，并在<strong>询问笔录中注明</strong>违法嫌疑人<strong>到案经过、到案时间和离开时间。【口头传唤不补证】</strong></p><blockquote><p>口头传唤和书面传唤具有相同法律效力</p></blockquote><h4 id="如何理解口头传唤中的“现场发现的违法嫌疑人”"><a href="#如何理解口头传唤中的“现场发现的违法嫌疑人”" class="headerlink" title="如何理解口头传唤中的“现场发现的违法嫌疑人”"></a>如何理解口头传唤中的“现场发现的违法嫌疑人”</h4><p><strong>现场既可以使案发现场，也可以是案发现场之外其他发现违法嫌疑人的地点。</strong></p><p><strong>对已经确定为违法嫌疑人，虽然在其实违法行为时没有被查获，但办案人民警察在事后工作中发现了该违法嫌疑人，也可以口头传唤。</strong></p><h4 id="强制传唤"><a href="#强制传唤" class="headerlink" title="强制传唤"></a>强制传唤</h4><ul><li>无正当理由不接受传唤或逃避传唤，<strong>经公安派出所、县级以上公安机关办案部门或者出入境边防机关负责人批准，可以强制传唤。</strong></li><li>强制传唤时，<strong>可以依法使用手铐、警绳等约束性警械。</strong></li><li>强制传唤属于行政强制措施，如果因情况紧急而现场实施的强制传唤，<strong>需要回单位后立即向单位负责人报告并补办批准手续《行政强制执行决定书》</strong></li></ul><blockquote><p>强制传唤：使用时需要满足以下三个条件：</p><ul><li>适用对象只能是<strong>违反治安管理的嫌疑人</strong>；</li><li>公安机关<strong>经过合法传唤</strong></li><li>被传唤人<strong>无正当理由拒不接受传唤或逃避传唤</strong></li></ul></blockquote><h4 id="告知程序"><a href="#告知程序" class="headerlink" title="告知程序"></a>告知程序</h4><ul><li>告知本人：传唤时，应将<strong>传唤的原因和证据告知被传唤人</strong></li><li>通知家属：当场<strong>将传唤的原因和处所通知被传唤人的家属</strong>，无法通知的在询问笔录中注明。</li></ul><h4 id="传唤和继续盘问的区别"><a href="#传唤和继续盘问的区别" class="headerlink" title="传唤和继续盘问的区别"></a>传唤和继续盘问的区别</h4><p>继续盘问情形有：</p><ul><li>一是被指控有犯罪行为的</li><li>二是有现场作案嫌疑的</li><li>三是有作案嫌疑身份不明的</li><li>四是携带的物品有可能是赃物的。</li></ul><p>由此可以看出，继续盘问适用对象是需要进一步查证的嫌疑人和可疑物品，而传唤适用于已经确认违反治安管理，身份明确的人</p><h4 id="异地传唤"><a href="#异地传唤" class="headerlink" title="异地传唤"></a>异地传唤</h4><p><strong>必须持有”三证“，即办案协作函件、人民警察证和相关法律文书（传唤证）</strong></p><h4 id="传唤时间"><a href="#传唤时间" class="headerlink" title="传唤时间"></a>传唤时间</h4><p><strong>询问查证的时间不得超过八小时</strong>；<strong>案情复杂，违法行为依法可能适用行政拘留处罚的，询问查证的时间不得超过二十四小时</strong>。不得以连续传唤的形式变相拘禁违法嫌疑人。</p><h4 id="两个传唤知识点联合考察的违法行为"><a href="#两个传唤知识点联合考察的违法行为" class="headerlink" title="两个传唤知识点联合考察的违法行为"></a><em>两个传唤知识点联合考察的违法行为</em></h4><ul><li>饲养动物，干扰他人正常生活，处警告；警告后不改正的，或者放任动物恐吓他人的，处二百元以上五百元以下罚款。</li><li>违反关于社会生活噪声污染防止的法律规定，制造噪声干扰他人正常生活的，处警告；警告后不改正的处二百元以上五百元以下罚款。</li></ul><p>故对上述两类违法嫌疑人适用传唤/询问查证最长时间为8小时，不得延长至24小时</p><h4 id="治安传唤和刑事传唤区别"><a href="#治安传唤和刑事传唤区别" class="headerlink" title="治安传唤和刑事传唤区别"></a>治安传唤和刑事传唤区别</h4><div class="table-container"><table><thead><tr><th>治安传唤</th><th>刑事传唤</th></tr></thead><tbody><tr><td>可口头，可书面（口头传唤回单位不用补证）</td><td>可口头，可书面（口头回传唤回单位不用补证）</td></tr><tr><td>传唤时间：<strong>8小时、24小时</strong></td><td>传唤时间：<strong>12小时，24小时</strong></td></tr><tr><td>口头或书面当事人不听，强制传唤，当场采取强制传唤后，回去补强制传唤的手续</td><td>口头或书面当事人不听，采取<strong>拘传</strong>（刑事案件中没有“强制传唤” 这个名词，对应的措施叫<strong>拘传</strong>）。拘传不能补证，也不能补手续。<strong>拘传必有证</strong></td></tr><tr><td>传唤原因及依据通知被传唤人，传唤的原因及处所通知被传唤人家属</td><td>传唤原因及依据通知被传唤人， 法律未规定通知家属事宜</td></tr><tr><td>只适用于违反治安管理的行为人</td><td>只适用于侦查阶段的犯罪嫌疑人</td></tr></tbody></table></div><h3 id="行政强制措施"><a href="#行政强制措施" class="headerlink" title="行政强制措施"></a>行政强制措施</h3><ul><li><strong>物：</strong><ul><li><strong>扣押、扣留、临时查封、查封、先登记保存、抽样取证等</strong></li></ul></li><li><strong>人：</strong><ul><li><strong>保护性约束措施、继续盘问、强制传唤、强制检测、拘留审查、限制活动范围（后两个措施适用对象是外国人）</strong></li></ul></li></ul><blockquote><p>【注意】！！！</p><ul><li>实施行政强制措施前必需向公安机关负责人报告并批准；情况紧急的，当场实施的，<strong>应在实施后24小时内报告，对限制公民人身自由的，返回单位后立即报告，并补办批准手续</strong></li><li>勘验、检查时实施行政强制措施，<strong>制作勘验、检查笔录的，不再制作现场笔录</strong></li><li>实施行政强制措施应当遵守下列规定：<ul><li>实施前须依法<strong>向公安机关负责人报告</strong>并经批准</li><li><strong>通知当事人到场</strong>，当场告知当事人采取行政强制措施的理由、依据以及当事人依法享有的权力、救济途径。当事人不到场的，邀请见证人到场，并在现场笔录中注明</li><li><strong>听取当事人的陈述和申辩</strong></li><li><strong>制作现场笔录</strong>，由当事人和办案警察签名或盖章，当事人拒绝的，在笔录中注明。当事人不在场的，由见证人和办案人民警察在笔录上签名或者盖章</li><li>实施限制公民人身自由的行政强制措施的，<strong>应当当场告知当事人家属实施强制措施的公安机关、理由、地点和期限；</strong>无法当场告知的，应当在实施强制措施后立即通过电话、短信、传真等方式通知；身份不明、拒不提供家属联系方式或者因自然灾害等不可抗力导致无法通知的，可以不予通知。告知、通知家属情况或者无法通知家属的原因应当在询问笔录中注明。</li></ul></li><li>行政强制措施相关内容都是常见考点，在2021年公安院校联考卷中曾考察过”拘留审查“，文书如下：</li></ul></blockquote><p><img src="/2024/08/08/%E5%85%AC%E5%8A%A1%E5%91%98/%E5%85%AC%E5%AE%89/%E5%85%AC%E5%AE%89%E6%9C%BA%E5%85%B3%E5%8A%9E%E7%90%86%E8%A1%8C%E6%94%BF%E6%A1%88%E4%BB%B6%E8%83%BD%E5%8A%9B/image-20240809013211486.png" alt="image-20240809013211486"></p><h3 id="询问"><a href="#询问" class="headerlink" title="询问"></a>询问</h3><h4 id="询问违法嫌疑人"><a href="#询问违法嫌疑人" class="headerlink" title="询问违法嫌疑人"></a>询问违法嫌疑人</h4><h5 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h5><p>2名以上人民警察</p><h5 id="询问地点"><a href="#询问地点" class="headerlink" title="询问地点"></a>询问地点</h5><p>公安机关办案场所、嫌疑人住所、单位、传唤至嫌疑人所在市、县指定地点。</p><blockquote><p>在公安机关以外地点询问，应避开门窗位置。</p></blockquote><h5 id="询问时间"><a href="#询问时间" class="headerlink" title="询问时间"></a>询问时间</h5><ul><li><strong>询问查证的时间不得超过八小时；案情复杂，违法行为依法可能适用行政拘留处罚的，询问查证的时间不得超过二十四小时。</strong>不得以连续传唤的形式变相拘禁违法嫌疑人。</li><li><strong>询间查证时间起点应从被传唤人到案时开始计算，终止时间是被传唤人可以自由离开询问地点，对醉酒之人的约束时间不计算在询问查证时间内</strong></li></ul><blockquote><p><strong>治安案件传唤，包含口头传唤、书面传唤、强制传唤;询问;询问查证在时间问题上都是 8，24</strong></p></blockquote><h5 id="询问特殊对象"><a href="#询问特殊对象" class="headerlink" title="询问特殊对象"></a>询问特殊对象</h5><ul><li><strong>询问聋哑人:应当有通晓手语的人提供帮助</strong></li><li><strong>不通晓当地通用的语言文字的被询问人:应当为其配备翻译人员</strong></li><li><strong>没有阅读能力的被询问人:应当向其宣读。</strong></li><li><strong>询问未成年人:通知监护人到场。</strong>询问未成年人,应通知其监护人到场,不能到场的,也可通知未成年人的其他成年亲属、所在学校、单位、居住地基层组织或未成年人保护组织的代表到场.确实无法通知或通知不到的,在询问笔录中注明；</li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li>进行安全检查。对查获到案的违法嫌疑人应当进行安全检查，发现违禁品或者管制器具、武器、以及案件相关物品，应当扣押（<strong>安全检查不需要开具检查证</strong>）</li><li><strong>违法嫌疑人、被侵害人或者其他证人请求自行提供书面材料的，应当准许。必要时，办案人民警察也可以要求违法嫌疑人、被侵害人或者其他证人自行书写。</strong></li><li><strong>询问违法嫌疑人、被侵害人或证人，应当个别进行</strong></li><li><strong>询问查证期间应当保证违法嫌疑人的饮食和必要的休息时间</strong></li><li>询问查证间隙，可以将违法嫌疑人送入侯问室</li><li><strong>在治安案件中只有询问，没有讯问，刑事案件中针对犯罪嫌疑人用讯问</strong></li></ul><h4 id="询问被侵害人、证人"><a href="#询问被侵害人、证人" class="headerlink" title="询问被侵害人、证人"></a>询问被侵害人、证人</h4><h5 id="询问地点-1"><a href="#询问地点-1" class="headerlink" title="询问地点"></a>询问地点</h5><p><strong>询问被侵害人或者其他证人，可以在现场进行，也可以到其单位、学校、住所、其居住地居(村)民委员会或者其提出的地点进行。</strong>必要时，也可以书面、电话或者当场通知其到公安机关提供证言。</p><h5 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h5><p>采取通知形式，不得对被侵害人和证人采取传唤</p><blockquote><p>被询问人确认笔录无误后，应当在询问笔录上逐页签名或者捺指印。<br>(<strong>行政案件是或，刑事案件是且</strong>)拒绝签名和捺指印的，办案人民警察应当在询问笔录中注明。</p></blockquote><h3 id="勘验、检查"><a href="#勘验、检查" class="headerlink" title="勘验、检查"></a>勘验、检查</h3><h4 id="主体-1"><a href="#主体-1" class="headerlink" title="主体"></a>主体</h4><p>2<strong>名以上人民警察</strong></p><h4 id="令状问题"><a href="#令状问题" class="headerlink" title="令状问题"></a>令状问题</h4><ul><li>一般情况：县级以上公安机关开具的<strong>检查证</strong>和<strong>人民警察证</strong></li><li>当场检查：除检查住所外，<strong>确有必要立即检査的</strong>,出示人民警察证,可以当场检查，<strong>事后不必补办检查证</strong></li><li>检查住所：必须有明确的证据表明或者有群众报警公民住所内正在发生危害公共安全、人身安全的案(事)件或违法存放危险物质，不立即检查可能会对公共安全或公民人身、财产安全造成重大危害的，可以出示警察证就检查，否则必须“双证齐全”【<strong>回单位不用补证</strong>】</li></ul><h4 id="检查妇女身体"><a href="#检查妇女身体" class="headerlink" title="检查妇女身体"></a>检查妇女身体</h4><p>应当由女性工作人员进行</p><h4 id="检查笔录"><a href="#检查笔录" class="headerlink" title="检查笔录"></a>检查笔录</h4><ul><li>检查情况应当制作检查笔录</li><li>检查笔录<strong>应由检查人员，被检查人或见证人签名，被检查人不在场或拒签的，办案民警应当在检查笔录中注明</strong></li><li>检查时的<strong>全程录音录像可以替代检查笔录</strong>，但应对关键内容和相应时段等作文字说明</li></ul><h4 id="见证人"><a href="#见证人" class="headerlink" title="见证人"></a>见证人</h4><p>检查场所，应当有被检查人或见证人在场，<strong>见证人不能是公安机关的聘用人员</strong>，更不能是与本案有任何牵连的人</p><h3 id="鉴定"><a href="#鉴定" class="headerlink" title="鉴定"></a>鉴定</h3><p>对涉嫌吸毒的人员，应当进行吸毒检测，被检测人员应当配合；<strong>对拒绝接受检测的，经县级以上公安机关或者其派出机构负责人批准，可以强制检测。采集女性被检测人检测样本，应当由女性工作人员进行。</strong></p><h3 id="辨认"><a href="#辨认" class="headerlink" title="辨认"></a>辨认</h3><h4 id="主体-2"><a href="#主体-2" class="headerlink" title="主体"></a>主体</h4><p><strong>二名</strong>以上办案人民警察主持</p><h4 id="审批"><a href="#审批" class="headerlink" title="审批"></a>审批</h4><p>办案民警可以自行组织辨认，无需审批</p><h4 id="辨认过程"><a href="#辨认过程" class="headerlink" title="辨认过程"></a>辨认过程</h4><p>多名辨认人对同一辨认对象或者一名辨认人对多名辨认对象进行辨认时，应当个别进行。【可一对多，不可多对一】</p><h4 id="混杂辨认"><a href="#混杂辨认" class="headerlink" title="混杂辨认"></a>混杂辨认</h4><p>辨认违法嫌疑人时，被辨认的<strong>人数不得少于七人</strong>；对违法嫌疑人<strong>照片进行辨认的，不得少于十人的照片。</strong>辨认每一件物品时，混杂的同类<strong>物品不得少于五件。对尸体的辨认没有数量限制</strong>【<strong>人照物七十五尸体辨认不受限</strong>】</p><h4 id="辨认笔录"><a href="#辨认笔录" class="headerlink" title="辨认笔录"></a>辨认笔录</h4><p>辨认经过和结果，应当制作辨认笔录，<strong>由办案人民警察和辨认人签名或者捺指印。必要时，应当对辨认过程进行录音、录像。</strong>【2024年公安院校联考对辨认笔录文书进行了考察】</p><h3 id="办案写作"><a href="#办案写作" class="headerlink" title="办案写作"></a>办案写作</h3><h4 id="一般程序"><a href="#一般程序" class="headerlink" title="一般程序"></a>一般程序</h4><p>办理行政案件需要异地公安机关协作的，应当制作办案协作函件。负责协作的公安机关接到请求协作的函件后，应当办理</p><h4 id="异地传唤-1"><a href="#异地传唤-1" class="headerlink" title="异地传唤"></a>异地传唤</h4><p>需要到异地执行传唤的，办案人民警察应当持<strong>传唤证、办案协作函件和人民警察证(三证齐全)</strong>，与协作地公安机关联系，在协作地公安机关的协作下进行传唤。协作地公安机关应当协助将违法嫌疑人<strong>传唤到其所在市、县内的指定地点或者到其住处、单位进行询问</strong>。</p><h4 id="远程共同取证"><a href="#远程共同取证" class="headerlink" title="远程共同取证"></a>远程共同取证</h4><p>要进行远程视频询问、处罚前告知的，应当由协作地公安机关事先核实被询问、告知人的身份。办案地公安机关应当制作询问、告知笔录并传输至协作地公安机关。询问、告知笔录经被询问、告知人确认并逐页签名或者捺指印后，由协作地公安机关协作人员签名或者盖章，并将原件或者电子签名笔录提供给办案地公安机关。</p><h4 id="委托取证"><a href="#委托取证" class="headerlink" title="委托取证"></a>委托取证</h4><p>办案地公安机关可以委托异地公安机关代为询问、向有关单位和个人调取电子数据、接收自行书写材料、进行辨认、履行处罚前告知程序、送达法律文书等工作委托代为询问、辨认、处罚前告知的，办案地公安机关应当列出明确具体的询问、辨认、告知提纲，提供被辨认对象的照片和陪衬照片。</p><blockquote><p><strong>写作地公安不能代为处罚</strong></p></blockquote><h2 id="行政处罚相关考点"><a href="#行政处罚相关考点" class="headerlink" title="行政处罚相关考点"></a>行政处罚相关考点</h2><h3 id="行政处罚告知笔录"><a href="#行政处罚告知笔录" class="headerlink" title="行政处罚告知笔录"></a>行政处罚告知笔录</h3><ul><li>在作出行政处罚决定前，<strong>应当告知违法嫌疑人拟作出行政处罚决定的事实、理由及依据，并告知违法嫌疑人依法享有陈述权和申辩权。</strong>(2021新《行政处罚法》新增告知行政处罚的”<strong>内容</strong>“，如根据《治安管理处罚法》第#条之规定对你拘留#天，并#罚款)单位违法的，应当告知其法定代表人、主要负责人或者其授权的人员。</li><li><strong>行政处罚告知程序是治安处罚的必经程序，如不告知则涉及程序违法或处罚无效</strong></li><li>行政处罚告知不是公安机关在征求被处罚人关于处罚决定的意见，仅仅是一个告知程序而己，只有陈述和申辩的权利，<strong>在告知程序过程中如果对行政处罚决定不服是不能申请复议和诉讼的</strong></li><li>因违法事实不能成立作出<strong>不予行政处罚的，可以不履行处罚前告知程序</strong></li></ul><h3 id="听证"><a href="#听证" class="headerlink" title="听证"></a>听证</h3><h4 id="可申请听证的事项"><a href="#可申请听证的事项" class="headerlink" title="可申请听证的事项"></a>可申请听证的事项</h4><ul><li>责令停产停业</li><li>吊销许可证或执照</li><li>较大数额罚款（针对个人二千元以上罚款，对单位处以一万元以上罚款）</li></ul><blockquote><p>注意:新《行政处罚法》第六十三条规定，行政机关拟作出下列行政处罚决定，应当告知当事人有要求听证的权利，当事人要求听证的，行政机关应当组织听证:</p><ul><li>(一)较大数额罚款;</li><li>(二)没收较大数额违法所得、没收较大价值非法财物;</li><li>(三)降低资质等级、吊销许可证件;</li><li>(四)责令停产停业、责令关闭、限制从业;</li><li>(五)其他较重的行政处罚;</li><li>(六)法律、法规、规章规定的其他情形。【该知识点目前公安考试未涉及了解即可</li></ul></blockquote><h4 id="组织部门"><a href="#组织部门" class="headerlink" title="组织部门"></a>组织部门</h4><p>听证由公安机关<strong>法制部门组织</strong>实施</p><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><ul><li>违法嫌疑人要求听证的，应在<strong>告知后5日内提出申请;【旧法为3日】</strong></li><li>听证机关在收到<strong>申请后2日内作出决定并通知</strong>，逾期不通知，视为受理；</li><li>听证<strong>7日前将举行听证通知书送达</strong>听证申请人，将举办听证的时间、地点通知听证参加人</li><li>听证应当在公安机关<strong>收到听证申请 10日内举行</strong></li></ul><blockquote><p><strong>注意:违法嫌疑人放弃听证或撤销听证要求后，在处罚决定作出前，又提出听证要求的，只要在听证申请有效期限内，应当允许</strong></p><p><strong>桐哥提示:听证的时间问题并非这八年考试重点，出现频率较低</strong></p></blockquote><h3 id="★处罚程序相关知识点【重点-】"><a href="#★处罚程序相关知识点【重点-】" class="headerlink" title="★处罚程序相关知识点【重点 】"></a>★处罚程序相关知识点【重点 】</h3><h4 id="简易程序-当场处罚"><a href="#简易程序-当场处罚" class="headerlink" title="简易程序 = 当场处罚"></a>简易程序 = 当场处罚</h4><h5 id="主体-3"><a href="#主体-3" class="headerlink" title="主体"></a>主体</h5><p>两名以上人民警察</p><h5 id="适用情形"><a href="#适用情形" class="headerlink" title="适用情形"></a>适用情形</h5><p><strong>违法实施确凿，且具有下列情形之一的，人民警察可以当场做出处罚决定，有违禁品的，可以当场收缴；</strong></p><ul><li><p>对违反治安管理行为人或者道路交通违法行为人处<strong>二百元以下罚款或者警告的</strong></p></li><li><p><strong>对法人或其他组织处以三千元以下罚款或警告的行政处罚的，可以当场做出处罚决定</strong></p></li><li><blockquote><p>注意：</p><ul><li>黄赌毒不适用当场处罚</li><li>后面讲到证据保全措施的时候能讲到扣押、收缴、追缴的区别，<strong>一般情况下在现场发现的物证都是扣押回公安机关，但是只有一个特例就是如果在实施当场处罚的过程中，发现违禁品要当场收缴而不是扣押</strong>，这个知识点曾经在考试中出现过，很多同学掉坑。</li></ul></blockquote></li></ul><h5 id="★处罚程序实施顺序【重点】"><a href="#★处罚程序实施顺序【重点】" class="headerlink" title="★处罚程序实施顺序【重点】"></a>★处罚程序实施顺序【重点】</h5><ol><li>向违法行为人<strong>表明执法身份</strong></li><li><strong>收集证据</strong></li><li><strong>口头告知（必经程序）</strong>违法行为人拟作出行政处罚决定的事实、理由和依据，并告知违法行为人依法享有的陈述权和申辩权；(根据2021新《行政处罚法》规定，行政机关在作出行政处罚决定前，应当告知当事人拟作出的行政处罚内容(新增，比如比如你赌博，我要拘留你 10天，我提前告诉你)及事实、理由、依据，并告知当事人依法享有陈述、申辩、要求听证的权利)</li><li>充分<strong>听取违法行为人的陈述和申辩</strong>。违法行为人提出的事实、理由或者证据成立的，应当采纳</li><li><strong>填写当场处罚决定书</strong>并当场交付被处罚人</li><li><strong>当场收缴罚款</strong>的，同时<strong>填写罚款收据</strong>，交付被处罚</li></ol><h5 id="备案原则"><a href="#备案原则" class="headerlink" title="备案原则"></a>备案原则</h5><p>人民警察当场作出行政处罚决定的，应当于作出决定后的<strong>二十四小时内</strong>将当场处罚决定书报所属公安机关<strong>备案</strong>，交通警察应当于作出决定后的<strong>二日内</strong>报所属公安机关交通管理部门<strong>备案</strong>。在旅客列车、民航飞机、水上作出行政处罚决定的，应当在<strong>返回后的二十四小时</strong>内报所属公安机关<strong>备案</strong>。</p><h4 id="快速办理"><a href="#快速办理" class="headerlink" title="快速办理"></a>快速办理</h4><h5 id="适用情形-1"><a href="#适用情形-1" class="headerlink" title="适用情形"></a>适用情形</h5><p>对<strong>不适用简易程序</strong>，但<strong>事实清楚</strong>，违法嫌疑人<strong>自愿认错认罚</strong>，且对违法事实和法律适用<strong>没有异议</strong>的行政案件，公安机关可以通过简化取证方式和审核审批手续等措施快速办理</p><h5 id="不适用快速办理情形"><a href="#不适用快速办理情形" class="headerlink" title="不适用快速办理情形"></a>不适用快速办理情形</h5><ul><li>违法嫌疑人系<strong>盲、聋、哑人，未成年人</strong>或者疑似<strong>精神病人</strong>的；</li><li>依法应当<strong>适用听证程序</strong>的</li><li><strong>可能</strong>作出<strong>十日以上行政拘留</strong>处罚的</li><li>其他不适宜快速办理</li></ul><h5 id="告知程序-1"><a href="#告知程序-1" class="headerlink" title="告知程序"></a>告知程序</h5><ul><li>快速办理行政案件前，公安机关<strong>应当书面告知</strong>违法嫌疑人<strong>快速办理的相关规定</strong>，征得其同意，并由其签名确认。</li><li>★可以<strong>口头履行处罚告知义务</strong>，但需要在案卷材料中注明并签字</li></ul><h5 id="询问笔录制作"><a href="#询问笔录制作" class="headerlink" title="询问笔录制作"></a>询问笔录制作</h5><ul><li><p>使用简明扼要的格式询问笔录，减少文字记录</p></li><li><p><strong>提供样式，被询问人自行书写</strong></p></li><li><p><strong>执法记录仪录音录像，必要时进行文字说明。</strong></p></li><li><blockquote><p>全程录音录像可代替</p></blockquote></li></ul><h5 id="审批审核"><a href="#审批审核" class="headerlink" title="审批审核"></a>审批审核</h5><ul><li><strong>专兼职法制员</strong>或者办案部门负责人审核,报公安机关负责人审批。</li><li>违法嫌疑人到案后 <strong>48 小时内</strong>办理完毕。<strong>48 小时的起算时间为嫌疑人到案，结束时间是作出处理决定而非”结案“</strong><ul><li><strong>治安案件中应当给予结案:</strong></li><li><strong>作出不予处罚决定的;</strong></li><li><strong>适用调解程序的案件达成协议并已履行的;</strong></li><li><strong>作出行政处罚等处理决定，且已执行的;</strong></li><li><strong>违法行为涉嫌构成犯罪，转为刑事案件办理的。</strong></li><li><strong>作出处理决定后，因执行对象灭失、死亡等客观原因导致无法执行或无需执行的</strong></li></ul></li></ul><h5 id="快速办理效果"><a href="#快速办理效果" class="headerlink" title="快速办理效果"></a>快速办理效果</h5><ul><li>依法对违法嫌疑人<strong>从轻，减轻或不予处罚</strong></li><li>不宜快速处理<strong>转一般程序，收集的证据依然有效</strong></li></ul><h4 id="追诉时效"><a href="#追诉时效" class="headerlink" title="追诉时效"></a>追诉时效</h4><ul><li>违反治安管理行为在六个月内没有被公安机关发现的，公安机关不再给予行政处罚</li><li>如果违法行为人在公安机关受案后逃逸，该案件不受六个月追究时效限制</li><li><strong>其他违法行为在二年</strong>内没有被公安机关发现的，<strong>不再给予行政处罚</strong>。<strong>从违法行为发生之日起计算，违法行为有连续、继续或者持续状态的，从行为终了之日起计算</strong>。</li><li>被侵害人在违法行为追究时效内向公安机关控告，<strong>公安机关应当受理而不受理的，不受追诉时效限制</strong></li></ul><blockquote><ul><li>《行政处罚法》规定，违法行为在两年内未被发现的，不予行政处罚;涉及公民生命健康安全，金融安全且有危害后果的，上述期限延长至五年，法律另有规定的除外</li><li>根据《公安机关执行&lt;中华人民共和国治安管理处罚法&gt;有关问题的解释》规定，公安机关对超过追究时效的违反治安管理行为不再处罚，但有违禁品的，应当依法给予收缴。</li></ul></blockquote><h4 id="行政处罚的适用"><a href="#行政处罚的适用" class="headerlink" title="行政处罚的适用"></a>行政处罚的适用</h4><h5 id="一事不再罚原则"><a href="#一事不再罚原则" class="headerlink" title="一事不再罚原则"></a>一事不再罚原则</h5><p>对违法行为人的<strong>同一个违法行为，不得给予两次以上罚款</strong>的行政处罚</p><h5 id="对未成年人的处罚"><a href="#对未成年人的处罚" class="headerlink" title="对未成年人的处罚"></a>对未成年人的处罚</h5><ul><li><strong>不满十四周岁的人有违法行为的，不予行政处罚，</strong>但是应当责令其监护人严加管教，<strong>并在不予行政处罚决定书中载明。</strong></li><li><strong>已满十四周岁不满十八周岁的人有违法行为的，从轻或者减轻行政处罚</strong>。<strong>注意:生日的计算是从第二天起算</strong></li></ul><h5 id="对精神病人的处罚"><a href="#对精神病人的处罚" class="headerlink" title="对精神病人的处罚"></a>对精神病人的处罚</h5><ul><li>精神病人、 智力残疾人在<strong>不能辨认或控制自己行为的时候</strong>有违法行为的，<strong>不予处罚</strong>，责令监护人严加看管和治疗；</li><li>间歇性精神病人在<strong>精神正常时</strong>有违法行为的<strong>应给予治安处罚</strong>；</li><li><strong>尚未完全丧失辨认或控制自己行为能力</strong>的精神病人、 智力残疾人有违法行为的， <strong>应当给予处罚，但可以从轻、减轻处罚</strong></li></ul><h5 id="对盲聋哑人的处罚"><a href="#对盲聋哑人的处罚" class="headerlink" title="对盲聋哑人的处罚"></a>对盲聋哑人的处罚</h5><p><strong>盲人或者又聋又哑的人违反治安管理的，可以从轻、减轻或者不予行政处罚</strong></p><h5 id="对醉酒人的处罚"><a href="#对醉酒人的处罚" class="headerlink" title="对醉酒人的处罚"></a>对醉酒人的处罚</h5><p><strong>醉酒的人违反治安管理的，应当给予处罚。</strong></p><h5 id="对单位的处罚"><a href="#对单位的处罚" class="headerlink" title="对单位的处罚"></a>对单位的处罚</h5><p>单位违反治安管理的，处罚其<strong>直接负责的主管人员和其他直接责任人员</strong></p><h5 id="应当从轻、减轻处罚或者不予行政处罚情形"><a href="#应当从轻、减轻处罚或者不予行政处罚情形" class="headerlink" title="应当从轻、减轻处罚或者不予行政处罚情形"></a>应当从轻、减轻处罚或者不予行政处罚情形</h5><ul><li><strong>主动消除或者减轻</strong>违法行为危害后果，<strong>并取得被侵害人谅解</strong>的;</li><li>受他人<strong>胁迫</strong>或者诱骗的;</li><li>有<strong>立功</strong>表现的;</li><li><strong>主动投案</strong>，向公安机关如实陈述自己的违法行为的;</li></ul><h5 id="应当从重处罚情形"><a href="#应当从重处罚情形" class="headerlink" title="应当从重处罚情形"></a>应当从重处罚情形</h5><ul><li>有较严重后果的;</li><li><strong>教唆、胁迫、诱骗他人</strong>违反治安管理的;</li><li>对报案人、控告人、举报人、证人<strong>打击报复</strong>的:</li><li><strong>6个月内曾受过治安管理处罚或1年内因同类违法行为受到2次以上公安行政处罚的</strong></li><li><strong>阻碍人民警察</strong>依法执行职务的;</li><li><strong>冒充军警人员招摇撞骗</strong>的:</li><li>刑罚执行完毕<strong>3年内</strong>或在<strong>缓刑期间</strong>违反治安管理的</li></ul><h5 id="一人多案"><a href="#一人多案" class="headerlink" title="一人多案"></a>一人多案</h5><p><strong>一人有两种以上违法行为的</strong>，分别决定，<strong>合并执行，可以制作一份决定书</strong>，分别写明对每种违法行为的处理内容和合并执行的内容。</p><h5 id="一案多人"><a href="#一案多人" class="headerlink" title="一案多人"></a>一案多人</h5><p><strong>一个案件有多个违法行为人的</strong>，<strong>分别决定，可以制作一式多份决定书</strong>，写明给予每个人的处理决定，分别送达每一个违法行为人。</p><h5 id="治安案件办案时限"><a href="#治安案件办案时限" class="headerlink" title="治安案件办案时限"></a>治安案件办案时限</h5><ul><li>公安机关办理治安案件的期限，自受理之日起不得<strong>超过三十日</strong></li><li>案情重大、复杂的，经上一级公安机关批准，可以<strong>延长三十日</strong></li><li>为了查明案情进行鉴定的期间，不计入办案期限【<strong>治安案件涉及的鉴定都不计入办案期限;刑事案件的鉴定都计入办案期限，精神病鉴定除外</strong>】</li><li>对因违反治安管理行为人不明或者逃跑等客观原因造成案件在法定期限内无法作出行政处理决定的，公安机关应当继续进行调查取证，并向被侵害人说明情况，及时依法作出处理决定。【<strong>可无限延长</strong>】</li></ul><h5 id="嫌疑人身份不明"><a href="#嫌疑人身份不明" class="headerlink" title="嫌疑人身份不明"></a>嫌疑人身份不明</h5><p>违法嫌疑人<strong>不讲真实姓名、住址，身份不明，但只要违法事实清楚、证据确实充分的，可以按其自报的姓名并贴附照片作出处理决定</strong>，并在相关法律文书中注明。</p><h5 id="行政案件审核人员"><a href="#行政案件审核人员" class="headerlink" title="行政案件审核人员"></a>行政案件审核人员</h5><p>法制员或者办案部门指定的人员、办案部门负责人、法制部门的人员可以作为行政案件审核人员。</p><h4 id="治安处罚的种类"><a href="#治安处罚的种类" class="headerlink" title="治安处罚的种类"></a>治安处罚的种类</h4><p>治安处罚的种类一共有六个①警告②罚款③行政拘留④吊销公安机关发放的许可证⑤限期出境⑥驱逐出境</p><ul><li>警告：【精神罚】警告应当是以书面形式作出(《行政处罚决定书》);口头警告不属于处罚</li><li>罚款：<ul><li>【财产罚】常考的罚款金额:</li><li>50 元以下:当场收缴且无异议。</li><li>200 元以下:简易程序</li><li>500 元以下:派出所可以作出的最高罚款</li><li>2000 元以上:可以申请听证</li><li>5000 元:个人罚款最高额</li><li><strong>注意:罚款合并执行金额的确定采取的是各单项罚款数额简单相加</strong></li></ul></li><li>行政拘留：<ul><li>【人身自由罚】</li><li>处罚幅度：5日以下；5日以上10日以下；10日以上15日以下(两种以上违法行为合并执行最长不超过 20 天)</li><li>执行场所：拘留所<br>注意：行政拘留处罚合并执行的，<strong>最长不超过20日</strong>。拘留执行完毕前，发现行为人还有其他违法行为需给予拘留处罚的，<strong>与正在执行的行政拘留合并执行，最长不超过20日</strong></li></ul></li><li>吊销公安机关发放的许可证：【行为罚】可以吊销特种行业许可证、枪支管理许可证(近8年考试未出过)</li><li>限制出境：【行为罚】只针对外国人(近8年考试未出过)</li><li>驱除出境：【行为罚】只针对外国人(近8年考试未出过)</li></ul><p><strong>治安处罚决定一般是由县级以上公安机关作出，派出所可以作出警告和500元以下罚款的处罚决定</strong></p><h2 id="行政强制执行"><a href="#行政强制执行" class="headerlink" title="行政强制执行"></a>行政强制执行</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>执行是指公安机关作出行政处罚决定后，在行政处罚决定书载明的期限内履行行政处罚决定的行政行为</p><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><h4 id="直接强制"><a href="#直接强制" class="headerlink" title="直接强制"></a>直接强制</h4><p>划拨存款、汇款；拍卖或者依法处理查封、扣押的场所、设施或者财物等</p><h4 id="间接执行"><a href="#间接执行" class="headerlink" title="间接执行"></a>间接执行</h4><p>代履行；加处罚款或滞纳金</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><p>催告作出行政强制执行决定并送达执行</p><h2 id="罚款的执行"><a href="#罚款的执行" class="headerlink" title="罚款的执行"></a>罚款的执行</h2><h3 id="一般规定"><a href="#一般规定" class="headerlink" title="一般规定"></a>一般规定</h3><p>公安机关作出罚款决定，被处罚人应当自收到行政处罚决定书之日起<strong>十五日内</strong>，<strong>到指定的银行或通过电子支付系统缴纳罚款</strong>。逾期不缴纳罚款的，<strong>每日加处3%的罚款，但加处金额不得超过罚款本金。</strong></p><h3 id="当场收缴罚款"><a href="#当场收缴罚款" class="headerlink" title="当场收缴罚款"></a>当场收缴罚款</h3><ul><li>当场处罚适用情形<ul><li>对违反治安管理行为人处<strong>五十元以下罚款</strong>和对违反交通管理的行人、乘车人和非机动车驾驶人处罚款，<strong>被处罚人没有异议的</strong>；</li><li>在边远、水上、交通不便地区、旅客列车上或者口岸，<strong>被处罚人向指定银行缴纳罚款确有困难，经被处罚人提出的</strong></li><li>被处罚人在当地<strong>没有固定住所，不当场收缴事后难以执行的</strong></li><li>说明:该知识点编写过程中删除一条具有法律冲突性条文</li></ul></li><li>收据<ul><li>公安机关及其人民警察当场收缴罚款的，应当出具<strong>省级或者国家财政部门统一制发的罚款收据</strong>。对不出具省级或者国家财政部门统一制发的罚款收据的，被处罚人有权拒绝缴纳罚款。</li></ul></li><li>2日原则<ul><li>人民警察应当自<strong>收缴罚款之日起二日内</strong>，将当场收缴的罚款<strong>交至其所属公安机关</strong>；<strong>在水上当场收缴的罚款</strong>，应当自<strong>抵岸之日起二日内</strong>将当场收缴的罚款交至其所属公安机关；在旅客<strong>列车上当场收缴的罚款</strong>，应当<strong>自返回之日起二日内</strong>将当场收缴的罚款交至其所属公安机关。<strong>公安机关应当自收到罚款之日起二日内将罚款缴付指定的银行</strong></li></ul></li></ul><h3 id="暂缓或分期缴纳罚款"><a href="#暂缓或分期缴纳罚款" class="headerlink" title="暂缓或分期缴纳罚款"></a>暂缓或分期缴纳罚款</h3><p>被处罚人确有经济困难,经被处罚人申请和作出处罚决定的公安机关批准,<strong>可以暂缓或分期缴纳罚款</strong></p><h2 id="★行政拘留的执行"><a href="#★行政拘留的执行" class="headerlink" title="★行政拘留的执行"></a>★行政拘留的执行</h2><h3 id="一般规定-1"><a href="#一般规定-1" class="headerlink" title="一般规定"></a>一般规定</h3><p>对被决定行政拘留的人，<strong>由作出决定的公安机关送达拘留所执行</strong>。对抗拒执行的，可以使用约束性警械。对被决定行政拘留的人，在异地被抓获或者具有其他有必要在异地拘留所执行情形的，<strong>经异地拘留所主管公安机关批准，可以在异地执行。</strong></p><h3 id="行政拘留-社区戒毒-强制隔离戒毒"><a href="#行政拘留-社区戒毒-强制隔离戒毒" class="headerlink" title="行政拘留+社区戒毒/强制隔离戒毒"></a>行政拘留+社区戒毒/强制隔离戒毒</h3><p>应当先执行行政拘留，由拘留所给予必要的戒毒治疗，强制隔离戒毒期限<strong>连续计算</strong>，拘留所不具备戒毒治疗条件的，行政拘留决定机关可以直接将被行政拘留人送公安机关管理的强制隔离戒毒所代为执行行政拘留，强制隔离戒毒期限连续计算。</p><h3 id="拘留日期计算"><a href="#拘留日期计算" class="headerlink" title="拘留日期计算"></a>拘留日期计算</h3><p>送入至拘留所的当日不计算在内，<strong>执行的第二天为实际拘留天数的第一日</strong></p><h3 id="被拘留后又发现涉嫌刑事犯罪"><a href="#被拘留后又发现涉嫌刑事犯罪" class="headerlink" title="被拘留后又发现涉嫌刑事犯罪"></a>被拘留后又发现涉嫌刑事犯罪</h3><p>应当在行政拘留执行完毕后采取刑事强制措施</p><h3 id="暂缓行政拘留"><a href="#暂缓行政拘留" class="headerlink" title="暂缓行政拘留"></a>暂缓行政拘留</h3><ul><li>被处罚人<strong>不服行政拘留处罚决定</strong>，申请行政复议或者提起行政诉讼的，<strong>可以向作出行政拘留决定的公安机关提出暂缓执行行政拘密的申请(可口头可书面)</strong></li><li>公安机关认为暂缓执行行政拘留<strong>不致发生社会危险</strong>，且被处罚人或者其近亲属提出符合条件的<strong>担保人</strong>，或者按<strong>每日行政拘留二百元的标准交纳保证金</strong>的，应当作出暂缓执行行政拘留的决定。</li><li>被处罚人已送达拘留所执行的，公安机关应当<strong>立即将暂缓执行行政拘留决定送达拘留所，拘留所应当立即释放被处罚人</strong>。</li><li>担保人的条件:<ul><li>与本案无牵连</li><li>享有政治权利，人身自由未受到限制或剥夺</li><li>在当地有常住户口和固定住所</li><li>有能力履行担保义务</li><li><strong>行政拘留并处罚款的，罚款不因暂缓执行行政拘留而暂缓执行。</strong></li></ul></li></ul><h3 id="对人大代表的拘留"><a href="#对人大代表的拘留" class="headerlink" title="对人大代表的拘留"></a>对人大代表的拘留</h3><ul><li><strong>对县级以上的各级人民代表大会代表予以行政拘留的，作出处罚决定前应当经该级人民代表大会主席团或者人民代表大会常务委员会许可。</strong></li><li><strong>对乡、民族乡、镇的人民代表大会代表予以行政拘留的，作出决定的公安机关应当立即报告乡、民族乡、镇的人民代表大会。【县级需许可，乡级只报告】</strong></li></ul><h3 id="通知家属"><a href="#通知家属" class="headerlink" title="通知家属"></a>通知家属</h3><ul><li>作出行政拘留处罚决定的，<strong>应当及时将处罚情况和执行场所或者依法不执行的情况通知被处罚人家属。</strong></li><li>被处理人拒不提供家属联系方式或者不讲真实姓名、住址，身份不明的，可以不予通知，但应当在<strong>附卷的决定书</strong>中注明。</li></ul><h3 id="★行政拘留不执行"><a href="#★行政拘留不执行" class="headerlink" title="★行政拘留不执行"></a>★行政拘留不执行</h3><p>依法应当给予行政拘留处罚的，<strong>应当作出处罚决定，但不送拘留所执行:</strong></p><ul><li>已满十四周岁不满十六周岁的:</li><li><strong>已满十六周岁不满十八周岁，初次违反治安管理</strong>或者其他公安行政管理的。但是曾被收容教养、被行政拘留依法不执行行政拘留或者曾因实施扰乱公共秩序，妨害公共安全，侵犯人身权利、财产权利，妨害社会管理的行为被人民法院判决有罪的除外;</li><li>七十周岁以上的;</li><li>孕妇或者正在哺乳自己婴儿的妇女。</li></ul><h2 id="★★★治安调解"><a href="#★★★治安调解" class="headerlink" title="★★★治安调解"></a>★★★治安调解</h2><h3 id="参与治安调解的人员"><a href="#参与治安调解的人员" class="headerlink" title="参与治安调解的人员"></a>参与治安调解的人员</h3><ul><li><strong>治安调解由办案民警主持，可以邀请当事人居住地的居委会或双方当事人熟悉的人员帮助调解</strong></li><li>当事人中有<strong>未成年</strong>人的，调解时应当<strong>通知其父母或者其他监护人到场</strong>。但是，当事人为年满十六周岁以上的未成年人，以自己的劳动收入为主要生活来源，本人同意不通知的</li><li><strong>被侵害人委托其他人参加调解的</strong>，<strong>应当向公安机关提交委托书，并写明委托权限。违法嫌疑人不得委托他人参加调解。</strong></li></ul><h3 id="治安调解的原则"><a href="#治安调解的原则" class="headerlink" title="治安调解的原则"></a>治安调解的原则</h3><p>自愿调解处理案件，应当查明事实，收集证据，并遵循合法、公正、<strong>自愿</strong>、及时的原则，注重教育和疏导，化解矛盾。</p><h3 id="适用的治安调解情形"><a href="#适用的治安调解情形" class="headerlink" title="适用的治安调解情形"></a>适用的治安调解情形</h3><ul><li>亲友、邻里、同事、在校学生之间因琐事发生纠纷引起的</li><li>行为人的侵害行为系由被侵害人事前的过错行为引起的</li><li>其他适用调解处理更易化解矛盾的</li></ul><h3 id="现场调解"><a href="#现场调解" class="headerlink" title="现场调解"></a>现场调解</h3><ul><li><strong>对情节轻微、事实清楚、因果关系明确，不涉及医疗费用、物品损失或者双方当事人对医疗费用和物品损失的赔付无争议</strong>，符合治安调解条件，双方当事人同意当场调解并当场履行的治安案件，<strong>可以当场调解</strong></li><li>当场调解原则上是需要制作调解协议书的，但是<strong>当事人基本情况、主要违法事实和协议内容在现场录音录像中明确记录的，不再制作调解协议书。</strong></li></ul><h3 id="治安调解结果"><a href="#治安调解结果" class="headerlink" title="治安调解结果"></a>治安调解结果</h3><ul><li>调解<strong>达成协议并履行</strong>的，公安机关<strong>不再处罚</strong></li><li>对调解<strong>未达成协议</strong>或者达成协议后<strong>不履行</strong>的，<strong>应当对违反治安管理行为人依法予以处罚；</strong>对违法行为造成的损害赔偿纠纷，公安机关可以进行调解，调解不成的，<strong>应当告知当事人向人民法院提起民事诉讼。</strong></li><li><strong>注意:对治安调解不服的，不能提起行政复议或行政诉讼</strong></li></ul><h3 id="治安调解时间"><a href="#治安调解时间" class="headerlink" title="治安调解时间"></a>治安调解时间</h3><p><strong>调解一般为一次(三个工作日)。</strong>对一次调解不成，公安机关认为有必要或者当事人申请的，可以再次调解，并应当在第一次调解后的<strong>七个工作日</strong>内完成。</p><h3 id="禁止治安调解"><a href="#禁止治安调解" class="headerlink" title="禁止治安调解"></a>禁止治安调解</h3><ul><li><strong>雇凶</strong>伤害他人的</li><li><strong>结伙斗殴</strong>或其他<strong>寻衅滋事</strong>的；(结伙是一方两人以上)</li><li>多次实施违反治安管理行为的(多次是三次以上)</li><li>当事人明确表示<strong>不愿意</strong>调解处理的(不愿调解)</li><li>在调解过程中又针对对方实施违反治安管理行为的</li><li>调解过程中,违法嫌疑人逃跑的</li></ul><h3 id="调节案件办案期限"><a href="#调节案件办案期限" class="headerlink" title="调节案件办案期限"></a>调节案件办案期限</h3><p>从调节未达成或达成后不履行之日起算</p><h3 id="刑事公诉案件和解"><a href="#刑事公诉案件和解" class="headerlink" title="刑事公诉案件和解"></a>刑事公诉案件和解</h3><ul><li>民间纠纷而起，可能判处三年以下刑罚的</li><li>除渎职罪以外，可能判处七年有期以下的过失犯罪</li></ul><h2 id="★★★涉案财物管理和处理【重点、高频考点】"><a href="#★★★涉案财物管理和处理【重点、高频考点】" class="headerlink" title="★★★涉案财物管理和处理【重点、高频考点】"></a>★★★涉案财物管理和处理【重点、高频考点】</h2><h3 id="24小时上交制度"><a href="#24小时上交制度" class="headerlink" title="24小时上交制度"></a>24小时上交制度</h3><p>办案人民警察应当在依法提取涉案财物后的<strong>二十四小时内将财物移交涉案财物管理人员</strong></p><h3 id="扣押"><a href="#扣押" class="headerlink" title="扣押"></a>扣押</h3><ul><li><strong>扣押是收缴和追缴的前置程序</strong>，是调查取证中的一种临时性的措施，<strong>民警在现场处置过程中</strong>发现了与案件有关的需要作为证据使用的物品，<strong>都可以先行扣押，带回公安机关之后再研究收缴还是追缴。【对应法律文书为《证据保全决定书》和《证据保全清单》】</strong></li><li>实施<strong>扣押、扣留</strong>、查封、抽样存证、先行登记保存等证据保存措施时，应当会同当事人查点清楚，制作并<strong>当场交付</strong>证据保全决定书。</li><li>扣押期限为<strong>三十日</strong>，情况复杂的，经县级以上公安机关负责人批准，可以延长三十日；</li><li><strong>注意：</strong>上面内容说的题干里提到“现场”要选扣押，但是只有一个特例在前面的知识点给大家讲解过。《程序规定》第三十七条，违法事实确凿，且具有下列情形之一的，人民警察可以<strong>当场作出处罚决定，有违禁品的，可以当场收缴</strong></li></ul><h3 id="收缴"><a href="#收缴" class="headerlink" title="收缴"></a>收缴</h3><p>对在办理行政案件中查获的下列物品应当依法收缴：</p><ul><li><strong>毒品、淫秽物品</strong>等违禁品</li><li><strong>赌具</strong>和<strong>赌资</strong></li><li><strong>吸食、注射毒品的用具</strong></li><li>伪造、变造的公文、证件、证明文件、票证、印章等</li><li>倒卖的车船票、文艺演出票、体育比赛入场券等有价票证:</li><li>主要用于实施违法行为的<strong>本人所有的工具</strong>以及直接用于实施<strong>毒品违法行为的资金</strong></li><li>法律、法规规定可以收缴的其他非法财物。</li></ul><blockquote><p>注意：收缴适用于违禁品、违反治安管理行为的本人所有的工具等非法财物。</p><p><strong>决定：收缴由县级以上公安机关决定，但是，违禁品、管制器具，吸食、注射毒品的用具以及价值 500 元以下的非法财物且当事人无异议的，派出所可以收缴。</strong></p></blockquote><h3 id="追缴"><a href="#追缴" class="headerlink" title="追缴"></a>追缴</h3><ul><li>追缴：<strong>违法所得。</strong></li><li>决定：追缴由县级以上公安机关决定，但追缴的财物应当退还被侵害人的，公安派出所可以追缴。</li></ul><blockquote><p>嫖资是追缴</p></blockquote><h3 id="登记"><a href="#登记" class="headerlink" title="登记"></a>登记</h3><p><strong>被侵害人</strong>或者<strong>善意第三人合法占有的财产</strong>。对具有本条第二款第二项、第三项情形的，应当予以<strong>登记</strong>，写明登记财物的名称、规格、数量、特征，并由占有人签名或者捺指印。<strong>必要时，可以进行拍照</strong>。但是，<strong>与案件有关必须鉴定的，可以依法扣押结束后应当立即解除。</strong></p><h3 id="没收"><a href="#没收" class="headerlink" title="没收"></a>没收</h3><p>在涉案财物管理知识点中《治安管理处罚法》和《行政处罚法》都没有“没收”这个词汇，所以在考试中如果题干说的是涉案财物管理，选项里提到了“没收”大概率是错误的。虽然涉案财物管理里没有“没收”这个词，<strong>但是“没收”是《行政处罚法》规定的行政处罚</strong></p><h2 id="结案和中止调查"><a href="#结案和中止调查" class="headerlink" title="结案和中止调查"></a>结案和中止调查</h2><h3 id="结案"><a href="#结案" class="headerlink" title="结案"></a>结案</h3><ul><li>作出<strong>不予行政处罚决定的</strong></li><li>按照本规定第十章的规定<strong>达成调解、和解协议并已履行的</strong></li><li><strong>作出行政处罚等处理决定，且已执行的</strong></li><li>违法行为涉嫌构成犯罪，<strong>转为刑事案件办理的</strong></li><li>作出处理决定后，因<strong>执行对象灭失、死亡</strong>等客观原因导致无法执行或者无需执行的。</li></ul><h3 id="终止调查"><a href="#终止调查" class="headerlink" title="终止调查"></a>终止调查</h3><ul><li>没有违法事实的</li><li>违法行为已过追究时效的</li><li>违法嫌疑人死亡的</li></ul><h2 id="【注】"><a href="#【注】" class="headerlink" title="【注】"></a>【注】</h2><h3 id="事后不需要补证"><a href="#事后不需要补证" class="headerlink" title="事后不需要补证"></a>事后不需要补证</h3><ul><li>口头传唤</li><li>搜查</li><li>检查</li></ul>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 公专 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公务员 </tag>
            
            <tag> 公专 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断推理第三章——逻辑论证之数量论证</title>
      <link href="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/"/>
      <url>/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="判断推理第三章——逻辑论证之数量论证"><a href="#判断推理第三章——逻辑论证之数量论证" class="headerlink" title="判断推理第三章——逻辑论证之数量论证"></a>判断推理第三章——逻辑论证之数量论证</h2><p><strong>数量论证：</strong>一种“数学+逻辑”的综合题目，题干中存在的逻辑漏洞和数学知识有关，可针对常见逻辑漏洞攻击。</p><h2 id="比例类论证"><a href="#比例类论证" class="headerlink" title="比例类论证"></a>比例类论证</h2><p><strong>比例类论证：</strong>此类问题常犯的逻辑错误是用“分子的多少”代替“分子/分母的比例”得出结论，题干往往包含数字（分子部分），我们需要在选项中找到带“数字”的分母部分，识别题型，可以秒杀。</p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240807231716211.png" alt="image-20240807231716211"></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240807232243207.png" alt="image-20240807232243207"></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240807232954915.png" alt="image-20240807232954915"></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240807233909334.png" alt="image-20240807233909334"></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240807234306743.png" alt="image-20240807234306743"></p><h2 id="抽样类论证"><a href="#抽样类论证" class="headerlink" title="抽样类论证"></a>抽样类论证</h2><p><strong>抽样类论证：</strong>此类问题常犯的逻辑错误是从某一特殊群体中抽样，该群体并不能代表整体情况。</p><h2 id="盐水类论证"><a href="#盐水类论证" class="headerlink" title="盐水类论证"></a>盐水类论证</h2><p><strong>盐水类论证：</strong>可看成盐水问题，混合浓度要在两部分浓度之间。 </p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240813013304198.png" alt="image-20240813013304198"></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240813092446936.png" alt="image-20240813092446936"></p><h2 id="其他数学模型"><a href="#其他数学模型" class="headerlink" title="其他数学模型"></a>其他数学模型</h2><h3 id="容斥交集"><a href="#容斥交集" class="headerlink" title="容斥交集"></a>容斥交集</h3><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240813094321239.png" alt="image-20240813094321239"></p><h3 id="人数人次"><a href="#人数人次" class="headerlink" title="人数人次"></a>人数人次</h3><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240813094944051.png" alt="image-20240813094944051"></p><h3 id="乘积模型"><a href="#乘积模型" class="headerlink" title="乘积模型"></a>乘积模型</h3><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240813130402424.png" alt="image-20240813130402424"></p><h3 id="分数大小变化"><a href="#分数大小变化" class="headerlink" title="分数大小变化"></a>分数大小变化</h3><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240813131605942.png" alt="image-20240813131605942"></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%89%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E6%95%B0%E9%87%8F%E8%AE%BA%E8%AF%81/image-20240808022416294.png" alt="image-20240808022416294"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 判断推理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 判断推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜微——第二节（归纳概括）</title>
      <link href="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E5%BD%92%E7%BA%B3%E6%A6%82%E6%8B%AC%EF%BC%89/"/>
      <url>/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E5%BD%92%E7%BA%B3%E6%A6%82%E6%8B%AC%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第二节（归纳概括）"><a href="#杜微——第二节（归纳概括）" class="headerlink" title="杜微——第二节（归纳概括）"></a>杜微——第二节（归纳概括）</h1><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E5%BD%92%E7%BA%B3%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240807174910213.png" alt="image-20240807174910213"></p><p>17道题</p><p>基础四元素：10道题</p><p>特殊：7道题</p><p>问题：1；原因：1；影响：1；对策：7</p><h2 id="题型判断"><a href="#题型判断" class="headerlink" title="题型判断"></a>题型判断</h2><h3 id="标志词"><a href="#标志词" class="headerlink" title="标志词"></a>标志词</h3><p>概括、阐述、谈谈、分析、提炼、列出、总结、指出</p><h3 id="指定要素"><a href="#指定要素" class="headerlink" title="指定要素"></a>指定要素</h3><ul><li><strong>常规要素</strong><ul><li>问题</li><li>原因</li><li>影响</li><li>对策</li></ul></li><li><strong>新型要素</strong><ul><li>优势</li><li>变化</li><li>新变化</li><li>焦点</li><li>特点</li><li>差异性</li><li>等等</li></ul></li></ul><h2 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h2><p>原文原词，采点给分，列点作答</p><h2 id="审题思路——审题四步走"><a href="#审题思路——审题四步走" class="headerlink" title="审题思路——审题四步走"></a>审题思路——审题四步走</h2><p>审范围——&gt;审题型——&gt;审主题——&gt;审要求</p><h3 id="审范围"><a href="#审范围" class="headerlink" title="审范围"></a>审范围</h3><p>根据材料x</p><h3 id="审要求"><a href="#审要求" class="headerlink" title="审要求"></a>审要求</h3><p>全面：宁滥勿缺，认真细致，写满格</p><p>准确：一般都是原文原词，除非<strong>虚词</strong></p><blockquote><p>虚词：带有比喻色彩；带有拟人色彩；口头化；网络化</p><p>不会超过5%</p></blockquote><p>简明：无需开头结尾，无需啰嗦修饰</p><p>有条理：表情序号，直接列点①②③④</p><h2 id="【原因】要素"><a href="#【原因】要素" class="headerlink" title="【原因】要素"></a>【原因】要素</h2><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E5%BD%92%E7%BA%B3%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240807180854395.png" alt="image-20240807180854395"></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>事情发生之前，引起一件事发生的所有条件</p><h3 id="常见问法"><a href="#常见问法" class="headerlink" title="常见问法"></a>常见问法</h3><p>理由、成因、因素、为什么</p><h3 id="标志引导词"><a href="#标志引导词" class="headerlink" title="标志引导词"></a>标志引导词</h3><p>因为…；…所以；原因是；由于；源于；缘于；基于；…背后；与…分不开；与…相关；为了…；…本质；…根源；追根溯源；推波助澜；随着…；</p><h2 id="【影响】要素"><a href="#【影响】要素" class="headerlink" title="【影响】要素"></a>【影响】要素</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>事情带来的结果</p><h3 id="常见问法-1"><a href="#常见问法-1" class="headerlink" title="常见问法"></a>常见问法</h3><ul><li>好的影响：意义、功能、好处、推动作用、积极效果</li><li>坏的影响：危害、坏处、不良后果、消极影响</li></ul><h3 id="标志引导词-1"><a href="#标志引导词-1" class="headerlink" title="标志引导词"></a>标志引导词</h3><p>让..；使…；带来…；</p><p>导致；造成；引发；扰乱；</p><p>弘扬<strong>了</strong>；改善<strong>了</strong>；推动<strong>了</strong>；促进<strong>了</strong>；</p><h3 id="补充方法"><a href="#补充方法" class="headerlink" title="补充方法"></a>补充方法</h3><ul><li>解释内涵中可能包含影响的答案</li><li>正反影响可以进行对比反推</li><li>解决了过去的问题，也是积极影响</li></ul><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E5%BD%92%E7%BA%B3%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240818174245482.png" alt="image-20240818174245482"></p><h2 id="【问题】要素"><a href="#【问题】要素" class="headerlink" title="【问题】要素"></a>【问题】要素</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>负面词汇，不好的事</p><h3 id="常见问法-2"><a href="#常见问法-2" class="headerlink" title="常见问法"></a>常见问法</h3><p>瓶颈、难题、困扰、不足、困境、缺失</p><h3 id="答案来源"><a href="#答案来源" class="headerlink" title="答案来源"></a>答案来源</h3><p>所有负面词汇都是问题（问题的表现最重要）</p><p>问题的原因和危害也是问题，根据字数补充答案</p><p>对策能否反推问题，结合语气和上下文综合判断</p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E5%BD%92%E7%BA%B3%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240818184404896.png" alt="image-20240818184404896"></p><h2 id="【对策】"><a href="#【对策】" class="headerlink" title="【对策】"></a>【对策】</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>解决问题的好做法</p><h3 id="常见问法-3"><a href="#常见问法-3" class="headerlink" title="常见问法"></a>常见问法</h3><p>措施、举措、做法、方法、努力</p><p>如何做好/怎么当好….</p><h3 id="标志引导词-2"><a href="#标志引导词-2" class="headerlink" title="标志引导词"></a>标志引导词</h3><p>杜哥减肥的做法/举措</p><p>迈开腿、管住嘴、多喝水</p><p><strong>动词  + 名词</strong></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E5%BD%92%E7%BA%B3%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240818203027521.png" alt="image-20240818203027521"></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E5%BD%92%E7%BA%B3%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240818205636105.png" alt="image-20240818205636105"></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E5%BD%92%E7%BA%B3%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240818212357697.png" alt="image-20240818212357697"></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E5%BD%92%E7%BA%B3%E6%A6%82%E6%8B%AC%EF%BC%89/image-20240819004716300.png" alt="image-20240819004716300"></p><p>做法优先写，结果来补充</p><h2 id="阅读技巧总结"><a href="#阅读技巧总结" class="headerlink" title="阅读技巧总结"></a>阅读技巧总结</h2><ul><li>审题四步走，认真细心</li><li>四个基础要素的找点思路理解记住，基础打牢</li><li>分析材料逻辑，把握材料脉络，便于分布答案</li><li>忠于原文原词，极少数，“虚词”，例如“空壳化”，“瓷器失去惊喜”，需要替换</li><li>故事前后必有总结，如果没有自己总结</li><li>按照要求字数决定答案详略</li></ul>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杜微——第一节（申论介绍）</title>
      <link href="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E7%94%B3%E8%AE%BA%E4%BB%8B%E7%BB%8D%EF%BC%89/"/>
      <url>/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E7%94%B3%E8%AE%BA%E4%BB%8B%E7%BB%8D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杜微——第一节（申论介绍）"><a href="#杜微——第一节（申论介绍）" class="headerlink" title="杜微——第一节（申论介绍）"></a>杜微——第一节（申论介绍）</h1><h2 id="考察能力"><a href="#考察能力" class="headerlink" title="考察能力"></a>考察能力</h2><ul><li>阅读理解能力</li><li>提出解决问题能力</li><li>综合分析能力</li><li>贯彻执行能力</li><li>文字表达能力</li></ul><h2 id="申论怎么考"><a href="#申论怎么考" class="headerlink" title="申论怎么考"></a>申论怎么考</h2><h3 id="申论试卷组成"><a href="#申论试卷组成" class="headerlink" title="申论试卷组成"></a>申论试卷组成</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>150分钟 = 2.5小时</p><p>1.5小时 ——&gt; 前三个小题</p><p> 1小时   ——&gt; 大作文</p><p>严禁折叠答题卡</p><h4 id="给定材料"><a href="#给定材料" class="headerlink" title="给定材料"></a>给定材料</h4><p>6000字左右</p><p>4个材料——12个材料</p><h5 id="五位一体"><a href="#五位一体" class="headerlink" title="五位一体"></a>五位一体</h5><p>国家五大领域</p><ul><li>政治</li><li>经济</li><li>文化</li><li>社会</li><li>生态</li></ul><p>综合性强</p><h5 id="资料来源"><a href="#资料来源" class="headerlink" title="资料来源"></a>资料来源</h5><ul><li>时政热点</li><li>哲学思想</li><li>调研报告</li><li>官方文献</li><li>新闻报道</li></ul><h5 id="四大基础要素"><a href="#四大基础要素" class="headerlink" title="四大基础要素"></a>四大基础要素</h5><ul><li>问题</li><li>原因</li><li>影响</li><li>对策</li></ul><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E7%94%B3%E8%AE%BA%E4%BB%8B%E7%BB%8D%EF%BC%89/image-20240807151746483.png" alt="image-20240807151746483"></p><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E7%94%B3%E8%AE%BA%E4%BB%8B%E7%BB%8D%EF%BC%89/image-20240807151736675.png" alt="image-20240807151736675"></p><h4 id="作答要求"><a href="#作答要求" class="headerlink" title="作答要求"></a>作答要求</h4><div class="table-container"><table><thead><tr><th style="text-align:center">概况归纳题</th><th style="text-align:left">请你根据给定XX材料，概况总结谈谈一个具体要素</th></tr></thead><tbody><tr><td style="text-align:center"><strong>对策启示题</strong></td><td style="text-align:left"><strong>请你根据XX材料，提出解决问题的对策建议</strong></td></tr><tr><td style="text-align:center"><strong>综合分析题</strong></td><td style="text-align:left"><strong>请你根据XX材料中的某个词或某句话谈谈理解或看法</strong></td></tr><tr><td style="text-align:center"><strong>公文写作题</strong></td><td style="text-align:left"><strong>请你根据XX材料，写一份公文</strong></td></tr><tr><td style="text-align:center"><strong>大作文</strong></td><td style="text-align:left"><strong>请你根据XX材料或整篇材料，以XX为主题，写一篇文章</strong></td></tr></tbody></table></div><h2 id="申论学科的本质"><a href="#申论学科的本质" class="headerlink" title="申论学科的本质"></a>申论学科的本质</h2><p>给你具体的问题，去给定的材料文字中找到作者的答案。</p><p>考察的是你<strong>抄</strong>材料的能力。</p><h2 id="申论怎么答，怎么抄？"><a href="#申论怎么答，怎么抄？" class="headerlink" title="申论怎么答，怎么抄？"></a>申论怎么答，怎么抄？</h2><p><strong>原文原词+采点给分+列点作答</strong></p><h2 id="阅卷流程背后的启示"><a href="#阅卷流程背后的启示" class="headerlink" title="阅卷流程背后的启示"></a>阅卷流程背后的启示</h2><p>20-30秒/题</p><p>有<strong>词</strong>有分，无<strong>词</strong>无分（<strong>名词</strong>）</p><h2 id="考情分析"><a href="#考情分析" class="headerlink" title="考情分析"></a>考情分析</h2><p><img src="/2024/08/07/%E5%85%AC%E5%8A%A1%E5%91%98/%E7%94%B3%E8%AE%BA/%E6%9D%9C%E5%BE%AE%E2%80%94%E2%80%94%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E7%94%B3%E8%AE%BA%E4%BB%8B%E7%BB%8D%EF%BC%89/image-20240807161316298.png" alt="image-20240807161316298"></p><h3 id="省市卷"><a href="#省市卷" class="headerlink" title="省市卷"></a>省市卷</h3><p>习近平新发展理念</p><h3 id="行政执法卷"><a href="#行政执法卷" class="headerlink" title="行政执法卷"></a>行政执法卷</h3><p>党内新法规新政策</p><h3 id="县乡卷"><a href="#县乡卷" class="headerlink" title="县乡卷"></a>县乡卷</h3><p>乡村振兴成果巩固</p><h2 id="正确学习方法"><a href="#正确学习方法" class="headerlink" title="正确学习方法"></a>正确学习方法</h2><ul><li>忠于原文，不要无脑升华</li><li>字迹工整，不要随意涂画</li><li>跟住课程，不要盲目做题</li><li>勤能补拙，不要坐以待毙</li><li>端正心态，不要急功近利</li></ul>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 申论 </category>
          
          <category> 杜微 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 申论 </tag>
            
            <tag> 杜微 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断推理第二章——逻辑论证之归因论证</title>
      <link href="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/"/>
      <url>/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="判断推理第二章——逻辑论证之归因论证"><a href="#判断推理第二章——逻辑论证之归因论证" class="headerlink" title="判断推理第二章——逻辑论证之归因论证"></a>判断推理第二章——逻辑论证之归因论证</h1><h2 id="归因论证整体概述"><a href="#归因论证整体概述" class="headerlink" title="归因论证整体概述"></a>归因论证整体概述</h2><h3 id="归因介绍"><a href="#归因介绍" class="headerlink" title="归因介绍"></a>归因介绍</h3><p>指人们对他人或自己行为的原因的推论过程。具体的说，就是观察者对他人的行为过程或自己的行为过程所进行的因果解释和推论。</p><h3 id="题目形式"><a href="#题目形式" class="headerlink" title="题目形式"></a>题目形式</h3><p>一般由对比实验和原因分析（对策建议）或不同平常或过往的既成事实和原因分析两部分组成，有些题目会省略原因分析的过程，直接给出结论或建议。前者可称为对比实验归因，后者可称为一般归因。</p><h3 id="题型分类"><a href="#题型分类" class="headerlink" title="题型分类"></a>题型分类</h3><p>归因论证可分为对比实验归因、一般归因、直接根本原因三类，其中，对比实验归因既是重点也是难点，这类题目学员们普遍未找到解题思路，但如果“开窍”，是可以“秒杀”题型。</p><h3 id="提问方法"><a href="#提问方法" class="headerlink" title="提问方法"></a>提问方法</h3><p>绝大多数为“以下哪项如果为真，最能削弱上述结论？”；少数为“以下哪项如果为真，最能质疑研究人员的解释？”，后者更加简单，抓住“解释”即可。</p><h3 id="质疑方式"><a href="#质疑方式" class="headerlink" title="质疑方式"></a>质疑方式</h3><p>常见有<strong>另有他因</strong>、<strong>因果倒置</strong>、否定此因三种。其中，另有他因需注意“回到实验中”（极少数会根据结果重新分组），因果倒置需要注意时间先后（本质为原因在结果之后，不能是此原因导致了结果）。</p><p>另外，极少数题目选项不针对原因质疑，而是通过摆事实或列数据质疑实验结果。</p><h3 id="正确和错误选项特征"><a href="#正确和错误选项特征" class="headerlink" title="正确和错误选项特征"></a>正确和错误选项特征</h3><p>正确选项要讨论原因且<strong>分组正确</strong>，<strong>实验瑕疵类选项</strong>（样本数量不足、样本未全<br>覆盖等）质疑力度很弱，此类问题中“<strong>有些</strong>”、<strong>特例选项</strong>是正确答案概率极低。</p><h2 id="对比实验归因"><a href="#对比实验归因" class="headerlink" title="对比实验归因"></a>对比实验归因</h2><h3 id="另有他因质疑"><a href="#另有他因质疑" class="headerlink" title="另有他因质疑"></a>另有他因质疑</h3><p>另有他因指的是在题干认为的原有原因之外，增加一个也可能导致结果的原因，从而降低原有原因成立的可能性。</p><p>另有他因选项往往只是“将水搅混”，而并非完全否定原有原因。</p><h4 id="正确另有他因选项特征"><a href="#正确另有他因选项特征" class="headerlink" title="正确另有他因选项特征"></a>正确另有他因选项特征</h4><p>回归实验，找到实验组和对照组的另一可能影响结果的不同点。</p><h4 id="归因类题目常见错误选项"><a href="#归因类题目常见错误选项" class="headerlink" title="归因类题目常见错误选项"></a>归因类题目常见错误选项</h4><p>未谈论原因、未分组的典型伪他因、“有些”类选项、实验瑕疵类选项。</p><h4 id="“继发关联”的另有他因"><a href="#“继发关联”的另有他因" class="headerlink" title="“继发关联”的另有他因"></a>“继发关联”的另有他因</h4><p>继发关联是指疾病A 与疾病B 并不存在因果关系，而是由于两者（A 和B）有共同的原因C 而产生的关联。</p><p>归因论证中的“继发关联”指的是，A 与B 不存在因果关联，A 与B 均是其共同原因C 导致的结果。</p><h4 id="利用分组正确找到另有他因选项"><a href="#利用分组正确找到另有他因选项" class="headerlink" title="利用分组正确找到另有他因选项"></a>利用分组正确找到另有他因选项</h4><p>题干中有多种实验分组方式时，根据最终的结论确定实验组和对照组，并根据正确的分组找出另有他因选项。</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805134554797.png" alt="image-20240805134554797"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805141415861.png" alt="image-20240805141415861"></p><p><strong>继发关联</strong></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805142441487.png" alt="image-20240805142441487"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805163535168.png" alt="image-20240805163535168"></p><p> <strong>分组</strong></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805163904450.png" alt="image-20240805163904450"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805165247098.png" alt="image-20240805165247098"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805170843176.png" alt="image-20240805170843176"></p><h3 id="因果倒置质疑"><a href="#因果倒置质疑" class="headerlink" title="因果倒置质疑"></a>因果倒置质疑</h3><p>因果倒置是一种在相对确定的条件下把原因和结果相互颠倒，视结果为原因和视原因为结果而引起的谬误。</p><h4 id="因果倒置和另有他因力度比较"><a href="#因果倒置和另有他因力度比较" class="headerlink" title="因果倒置和另有他因力度比较"></a>因果倒置和另有他因力度比较</h4><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805171630386.png" alt="image-20240805171630386"></p><h3 id="否定此因质疑"><a href="#否定此因质疑" class="headerlink" title="否定此因质疑"></a>否定此因质疑</h3><p>否定此因并不探讨题干中某结果的原因是什么，只是否定题干中认定的原因。</p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805172213414.png" alt="image-20240805172213414"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805172638130.png" alt="image-20240805172638130"></p><h3 id="排除他因支持"><a href="#排除他因支持" class="headerlink" title="排除他因支持"></a>排除他因支持</h3><p>排除他因支持指的是排除其他可能影响结果的原因的可能性，让题干中认定的原因成为唯一的可能原因，从而进行支持。</p><h2 id="时间对比归因"><a href="#时间对比归因" class="headerlink" title="时间对比归因"></a>时间对比归因</h2><p>时间对比归因指的是当前与以往相比出现某种变化，并找到此种变化的可能原因。此时，可通过找到当前与过去的另一点不同，来进行他因削弱。</p><blockquote><p>注意，一直存在且无变化的事实不会是某种变化的原因，“变化”才是“变化”的原因。</p></blockquote><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240806212727181.png" alt="image-20240806212727181"></p><h2 id="反常情况归因"><a href="#反常情况归因" class="headerlink" title="反常情况归因"></a>反常情况归因</h2><p>反常情况归因指的是为不同于正常情况的反常情况寻找原因。</p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240806214240257.png" alt="image-20240806214240257"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240806215151300.png" alt="image-20240806215151300"></p><h2 id="直接根本原因"><a href="#直接根本原因" class="headerlink" title="直接根本原因"></a>直接根本原因</h2><p>直接根本原因是一种固定题型，可直接“秒杀”，一般由原观点、反对者观点组成，多数设问为质疑反对者。正确答案一般为“原观点认为的原因”导致了“反对者认为的原因”，即原观点是根本原因，反对者是直接原因。</p><h2 id="构成或补充对比实验"><a href="#构成或补充对比实验" class="headerlink" title="构成或补充对比实验"></a>构成或补充对比实验</h2><h3 id="构成对比实验"><a href="#构成对比实验" class="headerlink" title="构成对比实验"></a>构成对比实验</h3><p>构成对比实验指的是选项与题干分别为实验组和对照组，通过“异因异果”进行支持（四圈支持）或通过“异因同果”/“同因异果”进行质疑（三圈质疑）。</p><h4 id="四圈支持"><a href="#四圈支持" class="headerlink" title="四圈支持"></a>四圈支持</h4><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240806231139564.png" alt="image-20240806231139564"></p><h4 id="三圈质疑"><a href="#三圈质疑" class="headerlink" title="三圈质疑"></a>三圈质疑</h4><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240806234003318.png" alt="image-20240806234003318"></p><h3 id="补充对比实验"><a href="#补充对比实验" class="headerlink" title="补充对比实验"></a>补充对比实验</h3><p>补充对比实验指的是选项本身即是一个对比实验，通过对比实验结果进行支持或削弱。</p><h2 id="归因论证有悖常识结论的质疑"><a href="#归因论证有悖常识结论的质疑" class="headerlink" title="归因论证有悖常识结论的质疑"></a>归因论证有悖常识结论的质疑</h2><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240807225812162.png" alt="image-20240807225812162"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240807225343124.png" alt="image-20240807225343124"></p><h2 id="归因论证的举反例质疑"><a href="#归因论证的举反例质疑" class="headerlink" title="归因论证的举反例质疑"></a>归因论证的举反例质疑</h2><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240805173815284.png" alt="image-20240805173815284"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240806213058633.png" alt="image-20240806213058633"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240806221655480.png" alt="image-20240806221655480"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240806235100439.png" alt="image-20240806235100439"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%BA%8C%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E8%AE%BA%E8%AF%81%E4%B9%8B%E5%BD%92%E5%9B%A0%E8%AE%BA%E8%AF%81/image-20240807230605567.png" alt="image-20240807230605567"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 判断推理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 判断推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断推理第一章——逻辑基础知识</title>
      <link href="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="判断推理第一章——逻辑基础知识"><a href="#判断推理第一章——逻辑基础知识" class="headerlink" title="判断推理第一章——逻辑基础知识"></a>判断推理第一章——逻辑基础知识</h1><h2 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h2><p>用语言、符号或者式子表达的，可以判断真假的陈述句称为命题，一般写为若p，则q.<br>其中判断为真的语句称为真命题，判断为假的语句称为假命题。</p><h3 id="命题的四种形式和关系"><a href="#命题的四种形式和关系" class="headerlink" title="命题的四种形式和关系"></a>命题的四种形式和关系</h3><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805005323131.png" alt="image-20240805005323131"></p><ul><li>原命题与逆否命题的真假是一致的，与否命题和逆命题真假无必然联系。</li><li>逆命题与否命题的真假是一致的，与原命题和逆否命题真假无必然联系。</li></ul><h3 id="命题的传递规则"><a href="#命题的传递规则" class="headerlink" title="命题的传递规则"></a>命题的传递规则</h3><ul><li>A→B，B→C，可联立，得出A→C</li><li>A→B，C→A，可联立，得出C→B</li><li>A→B，非C→非B（逆否得出B→C），可联立，得出A→C</li><li>A→B，C→B，不可联立</li><li>A→B，A→C，不可联立</li></ul><h3 id="命题的真假判断"><a href="#命题的真假判断" class="headerlink" title="命题的真假判断"></a>命题的真假判断</h3><div class="table-container"><table><thead><tr><th style="text-align:center">p</th><th style="text-align:center">q</th><th style="text-align:center">p→q</th></tr></thead><tbody><tr><td style="text-align:center">真</td><td style="text-align:center">真</td><td style="text-align:center">真</td></tr><tr><td style="text-align:center">真</td><td style="text-align:center">假</td><td style="text-align:center">假</td></tr><tr><td style="text-align:center">假</td><td style="text-align:center">真</td><td style="text-align:center">真</td></tr><tr><td style="text-align:center">假</td><td style="text-align:center">假</td><td style="text-align:center">真</td></tr></tbody></table></div><blockquote><p><strong>只有A且非B为假</strong></p></blockquote><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805013528288.png" alt="image-20240805013528288"></p><h2 id="复合命题"><a href="#复合命题" class="headerlink" title="复合命题"></a>复合命题</h2><p>复合命题是指由简单命题用联结词联结而成的命题。</p><h3 id="联言命题（且）"><a href="#联言命题（且）" class="headerlink" title="联言命题（且）"></a>联言命题（且）</h3><p>联言命题是反映事物的若干种情况或者性质同时存在的命题，由逻辑联结词“并且”连接，写成p并且q。</p><div class="table-container"><table><thead><tr><th style="text-align:center">常见指示词</th><th style="text-align:center">并且、也、还、同时、“，”等</th></tr></thead><tbody><tr><td style="text-align:center">矛盾关系</td><td style="text-align:center">非（p 且q）＝  非p或非q</td></tr><tr><td style="text-align:center">真假判断</td><td style="text-align:center">全真为真，一假则假</td></tr></tbody></table></div><blockquote><p>※矛盾关系指的是二者必然一真一假，在原命题前加“不”，即得到矛盾命题。</p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805023619332.png" alt="image-20240805023619332"></p></blockquote><h3 id="选言命题"><a href="#选言命题" class="headerlink" title="选言命题"></a>选言命题</h3><p>选言命题是反映事物的若干种情况或者性质至少有一种存在的命题。可分为相容选言命题和不相容选言命题。由逻辑联结词“或者”或“要么”连接，写成p 或 q、要么p 要么 q。</p><h4 id="相容选言命题（或者）"><a href="#相容选言命题（或者）" class="headerlink" title="相容选言命题（或者）"></a>相容选言命题（或者）</h4><div class="table-container"><table><thead><tr><th style="text-align:center">常见指示词</th><th style="text-align:center">或者或者、A和B 至少一个、A 和B 至多一个</th></tr></thead><tbody><tr><td style="text-align:center">矛盾关系</td><td style="text-align:center">非（p 或q）＝  非p且非q</td></tr><tr><td style="text-align:center">真假判断</td><td style="text-align:center">一真则真，全假为假</td></tr><tr><td style="text-align:center">等价规则</td><td style="text-align:center">p 或q＝非p→q＝非q→p</td></tr></tbody></table></div><blockquote><p>※A 和 B 至少1 个可翻译为“A 或B”。<br>※A 和 B 至多一个，即非A 和 非B 至少一个，可翻译为“非A 或 非B”。<br>※等价规则可记为：“否一推一”。</p></blockquote><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805030115295.png" alt="image-20240805030115295"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805030401813.png" alt="image-20240805030401813"></p><h4 id="不相容选言命题（要么）"><a href="#不相容选言命题（要么）" class="headerlink" title="不相容选言命题（要么）"></a>不相容选言命题（要么）</h4><div class="table-container"><table><thead><tr><th>常见指示词</th><th>要么要么、A和B 二者不可兼得、不是A 就是 B</th></tr></thead><tbody><tr><td>真假判断</td><td>一真一假为真，全真全假为假</td></tr></tbody></table></div><blockquote><p>不是A就是B，二者不可兼得</p></blockquote><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805030836789.png" alt="image-20240805030836789"></p><h3 id="假言命题"><a href="#假言命题" class="headerlink" title="假言命题"></a>假言命题</h3><p>假言命题就是陈述某一事物情况是另一件事物情况的条件的命题，假言命题亦称条件命题。<br>在形式逻辑中，命题联结词“如果，则”被理解为“前件真而后件假”是假的，即“若A 则B”假，当且仅当A 真而B 假；而当A 假时，整个复合命题总是真的。在现代逻辑中，命题之间的这样的真假关系<br>叫做实质蕴涵。</p><h4 id="关联词之如果那么"><a href="#关联词之如果那么" class="headerlink" title="关联词之如果那么"></a>关联词之如果那么</h4><div class="table-container"><table><thead><tr><th style="text-align:center">常见指示词</th><th style="text-align:center">如果…那么、若…则、只要…就、一…就、所有…都等</th></tr></thead><tbody><tr><td style="text-align:center">翻译规则</td><td style="text-align:center">前推后（若p 则q，翻译为，p→q）</td></tr><tr><td style="text-align:center">真假判断</td><td style="text-align:center">（p→q）当且仅当（p 真 q 假）时为假</td></tr><tr><td style="text-align:center">等价规则</td><td style="text-align:center">p→q＝非q→非q＝非p 或q</td></tr></tbody></table></div><blockquote><p>※真假判断口诀：前件为假命题为真，后件为真命题为真，当且仅当A 且非B 时为假。<br>※等价规则可记为：“否前或后”。</p></blockquote><h4 id="关联词之只有才"><a href="#关联词之只有才" class="headerlink" title="关联词之只有才"></a>关联词之只有才</h4><div class="table-container"><table><thead><tr><th style="text-align:center">常见指示词</th><th style="text-align:center">只有…才、必须…才、才、不…不等</th></tr></thead><tbody><tr><td style="text-align:center">翻译规则</td><td style="text-align:center">后推前（只有p 才 q，翻译为，q→p）<br>不不（只有p 才 q，翻译为，非p→非q）</td></tr></tbody></table></div><blockquote><p>※真假判断、等价规则：翻译成“a→b”形式后，同“p→q”。</p></blockquote><h4 id="关联词之除非否则"><a href="#关联词之除非否则" class="headerlink" title="关联词之除非否则"></a>关联词之除非否则</h4><div class="table-container"><table><thead><tr><th style="text-align:center">常见指示词</th><th style="text-align:center">除非…否则、必须…否则、否则等</th></tr></thead><tbody><tr><td style="text-align:center">翻译规则</td><td style="text-align:center">否A 则B（除非p 否则q，翻译为，非p→q）</td></tr><tr><td style="text-align:center">等价规则</td><td style="text-align:center">除非p 否则q＝非p→q＝p 或q</td></tr></tbody></table></div><blockquote><p>※真假判断：翻译成“a→b”形式后，同“p→q”。</p></blockquote><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805032951716.png" alt="image-20240805032951716"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805034524666.png" alt="image-20240805034524666"></p><h2 id="模态命题（可能必然）"><a href="#模态命题（可能必然）" class="headerlink" title="模态命题（可能必然）"></a>模态命题（可能必然）</h2><p>模态命题就是陈述事物情况的必然性或可能性的命题。</p><div class="table-container"><table><thead><tr><th style="text-align:center">矛盾关系</th><th style="text-align:center">必然丄可能不，可能丄必然不</th></tr></thead><tbody><tr><td style="text-align:center"><strong>推出关系</strong></td><td style="text-align:center"><strong>必然能推出可能，可能推不出必然</strong></td></tr><tr><td style="text-align:center"><strong>等价关系</strong></td><td style="text-align:center"><strong>非必然＝可能不，非可能＝必然不</strong></td></tr></tbody></table></div><blockquote><p>※矛盾关系的记忆口诀为“两词互换，后面加不”。</p></blockquote><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805034728089.png" alt="image-20240805034728089"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805010933057.png" alt="image-20240805010933057"></p><blockquote><p>※上反对关系必有一假，下反对关系必有一真。</p></blockquote><h2 id="直言命题（所有有些）"><a href="#直言命题（所有有些）" class="headerlink" title="直言命题（所有有些）"></a>直言命题（所有有些）</h2><p>直言命题亦称“定言命题”，即性质命题，是断定事物性质的简单命题。</p><p>​    由于在性质命题中，对对象具有或不具有某种性质的断定是直接的、无条件的，因而，逻辑史上把这种命题称为直言命题，以别于假言命题（对对象的某种断定是有条件的）和选言命题（对对象的某种断定是有选择的）。</p><div class="table-container"><table><thead><tr><th style="text-align:center">矛盾关系</th><th style="text-align:center">非所有＝有些不，非有些＝所有不</th></tr></thead><tbody><tr><td style="text-align:center"><strong>上反对关系</strong></td><td style="text-align:center"><strong>两个所有必有一假</strong></td></tr><tr><td style="text-align:center"><strong>下反对关系</strong></td><td style="text-align:center"><strong>两个有些必有一真</strong></td></tr><tr><td style="text-align:center"><strong>推出关系</strong></td><td style="text-align:center"><strong>所有→特指→有些<br>有些p 是q→有些q 是p<br>有些p 是q 推不出有些p 不是q</strong></td></tr></tbody></table></div><blockquote><p>※矛盾关系的记忆口诀为“两词互换，后面加不”。</p></blockquote><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805035035200.png" alt="image-20240805035035200"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805011138411.png" alt="image-20240805011138411"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805035346425.png" alt="image-20240805035346425"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805040712388.png" alt="image-20240805040712388"></p><h2 id="充分必要条件"><a href="#充分必要条件" class="headerlink" title="充分必要条件"></a>充分必要条件</h2><p>对于p→q，p 是充分条件，q 是必要条件，若p 能推出q 且q 能推出p，则p、q 互为充分必要条件。</p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805011203152.png" alt="image-20240805011203152"></p><blockquote><p>※可简单记为：谁是必要条件谁在箭头后面，离不开谁  谁是必要条件。</p></blockquote><h2 id="演绎推理、归纳推理、类比推理"><a href="#演绎推理、归纳推理、类比推理" class="headerlink" title="演绎推理、归纳推理、类比推理"></a>演绎推理、归纳推理、类比推理</h2><p>一般来说，推理可分为演绎推理、归纳推理和类比推理三种形式。</p><h3 id="演绎推理"><a href="#演绎推理" class="headerlink" title="演绎推理"></a>演绎推理</h3><p>是指从一般性的前提得出了特殊性的结论的推理。演绎推理包括三段论、假言推理、选言推理等。</p><h3 id="归纳推理"><a href="#归纳推理" class="headerlink" title="归纳推理"></a>归纳推理</h3><p>即从个别到一般，从特殊性的前提推出普遍的一般结论。归纳推理可分为完全归纳推理、不完全（简单枚举）归纳推理。</p><h3 id="类比推理"><a href="#类比推理" class="headerlink" title="类比推理"></a>类比推理</h3><p>是指从特殊性的前提得出特殊性的结论。一般情况下，这种推理基于两个或两类对象在某些属性上的相同或相似性，推断它们在其他属性上也可能相同或相似。</p><h3 id="三段论推理"><a href="#三段论推理" class="headerlink" title="三段论推理"></a>三段论推理</h3><p>演绎推理中的一种简单推理判断。</p><p>它包含：一个一般性的原则（大前提），一个附属于前面大前提的特殊化陈述（小前提），以及由此引申出的特殊化陈述符合一般性原则的结论。</p><h2 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h2><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805011356480.png" alt="image-20240805011356480"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805011405804.png" alt="image-20240805011405804"></p><p><img src="/2024/08/05/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86/%E5%88%A4%E6%96%AD%E6%8E%A8%E7%90%86%E7%AC%AC%E4%B8%80%E7%AB%A0%E2%80%94%E2%80%94%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20240805011414064.png" alt="image-20240805011414064"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 判断推理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 判断推理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第二章（中心理解题目之结构分析）</title>
      <link href="/2024/08/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%8A%E5%8D%8A%E5%B9%B4%EF%BC%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%EF%BC%89/"/>
      <url>/2024/08/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%8A%E5%8D%8A%E5%B9%B4%EF%BC%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第二章（中心理解题目之结构分析）"><a href="#言语理解第二章（中心理解题目之结构分析）" class="headerlink" title="言语理解第二章（中心理解题目之结构分析）"></a>言语理解第二章（中心理解题目之结构分析）</h1><h2 id="结构分析之概述"><a href="#结构分析之概述" class="headerlink" title="结构分析之概述"></a>结构分析之概述</h2><h3 id="五种常见行文结构"><a href="#五种常见行文结构" class="headerlink" title="五种常见行文结构"></a>五种常见行文结构</h3><p>前对策、后对策、总分/分总、并列/大并列、二层结构。</p><h3 id="分析行文结构方法"><a href="#分析行文结构方法" class="headerlink" title="分析行文结构方法"></a>分析行文结构方法</h3><p>宏观上，熟练掌握五种常见结构，大胆“套用”；微观上，重视逻辑关联词与指示代词。</p><h3 id="五种常见引出话题方式"><a href="#五种常见引出话题方式" class="headerlink" title="五种常见引出话题方式"></a>五种常见引出话题方式</h3><p>开门见山（首句确定谈论重点）、对比引出（紧跟观点或对策）、转折引出（紧跟观点或对策）、背景/背景知识引出（背景不重要）、设问引出。</p><h3 id="五种常见对策"><a href="#五种常见对策" class="headerlink" title="五种常见对策"></a>五种常见对策</h3><ul><li>祈使句对策（应当、需要等）</li><li>禁止性对策（不能、如果……就不……）</li><li>必要条件表对策（关键、基础、前提、离不开、必不可少等）</li><li>关联词表对策（只有……才……、必须……否则……、要……就……等）</li><li>语义表对策（时代命题、重要议题、负有……义务、长远目标、必经之路、必然趋势、有助于等）。</li></ul><h2 id="说理结构之“后对策”"><a href="#说理结构之“后对策”" class="headerlink" title="说理结构之“后对策”"></a>说理结构之“后对策”</h2><h3 id="两种常见说理结构之“后对策”"><a href="#两种常见说理结构之“后对策”" class="headerlink" title="两种常见说理结构之“后对策”"></a>两种常见说理结构之“后对策”</h3><p>引出话题（问题）→分析说明→给出对策或观点；</p><p>此结构的<strong>对策或观点</strong>最重要，正确答案由此提炼。</p><blockquote><p>常见问法：意在说明、意在强调、主旨……等。</p></blockquote><h2 id="说理结构之“前对策”"><a href="#说理结构之“前对策”" class="headerlink" title="说理结构之“前对策”"></a>说理结构之“前对策”</h2><h3 id="两种常见说理结构之“前对策”"><a href="#两种常见说理结构之“前对策”" class="headerlink" title="两种常见说理结构之“前对策”"></a>两种常见说理结构之“前对策”</h3><p>引出话题（问题）→直接给出对策或观点→论证（重复观点对策）；</p><p>此结构的对策或观点最重要，正确答案由此提炼。</p><blockquote><p>注意：对比、转折引出对策或观点是非常常见的行文结构。</p><p>常见问法：意在说明、意在强调、主旨……等。</p></blockquote><h2 id="两种容易识别结构之“总分-分总”“并列-大并列”"><a href="#两种容易识别结构之“总分-分总”“并列-大并列”" class="headerlink" title="两种容易识别结构之“总分/分总”“并列/大并列”"></a>两种容易识别结构之“总分/分总”“并列/大并列”</h2><h3 id="两种容易识别结构之“总分”、“分总”"><a href="#两种容易识别结构之“总分”、“分总”" class="headerlink" title="两种容易识别结构之“总分”、“分总”"></a>两种容易识别结构之“总分”、“分总”</h3><ul><li>此类结构中的“分”可指并列关系，即分论点（总概况＋分论点/分论点＋总结）</li><li>也可指总观点后面的分析（总观点＋分析/分析＋总结）</li></ul><h3 id="两种容易识别结构之“并列”、“大并列”"><a href="#两种容易识别结构之“并列”、“大并列”" class="headerlink" title="两种容易识别结构之“并列”、“大并列”"></a>两种容易识别结构之“并列”、“大并列”</h3><ul><li>表并列的常见提示有“还、也、另外、同时、另一方面”等，表并列的常见结构为相同句式引出；</li><li>“大并列”指的是根据时间、地区、人物等分段、分类介绍。</li></ul><h2 id="常见结构之“二层结构”"><a href="#常见结构之“二层结构”" class="headerlink" title="常见结构之“二层结构”"></a>常见结构之“二层结构”</h2><h3 id="二层结构"><a href="#二层结构" class="headerlink" title="二层结构"></a>二层结构</h3><p>可分成前后两部分（A＋B）的文段结构，都可称之为二层结构。</p><blockquote><p>常见的二层结构有转折、果因/因果、对比（国家对比、时间对比等）、背景/背景知识＋新发现/新成就/新变化/现状（尤其重视我国）、设问＋回答……等。</p><p>PS：并列也是一种考察频率较高的二层结构。</p></blockquote><h2 id="中心理解之如何“抓准”对策"><a href="#中心理解之如何“抓准”对策" class="headerlink" title="中心理解之如何“抓准”对策"></a>中心理解之如何“抓准”对策</h2><h3 id="对策重点"><a href="#对策重点" class="headerlink" title="对策重点"></a>对策重点</h3><ul><li>多个选项均出自对策句，需注意对策句中的主体与必要条件；</li><li>选项中出现多个不同对策，需注意论证部分论证的内容及对策所针对的问题。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/08/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%8A%E5%8D%8A%E5%B9%B4%EF%BC%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%88%E4%B8%AD%E5%BF%83%E7%90%86%E8%A7%A3%E9%A2%98%E7%9B%AE%E4%B9%8B%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90%EF%BC%89/image-20240803221543751.png" alt="image-20240803221543751"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解（上半年） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解第一章（片段阅读整体概述）</title>
      <link href="/2024/08/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%8A%E5%8D%8A%E5%B9%B4%EF%BC%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%88%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0%EF%BC%89/"/>
      <url>/2024/08/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%8A%E5%8D%8A%E5%B9%B4%EF%BC%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%88%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解第一章（片段阅读整体概述）"><a href="#言语理解第一章（片段阅读整体概述）" class="headerlink" title="言语理解第一章（片段阅读整体概述）"></a>言语理解第一章（片段阅读整体概述）</h1><h2 id="题型分类"><a href="#题型分类" class="headerlink" title="题型分类"></a>题型分类</h2><p>片段阅读一般有<strong>中心理解题</strong>、<strong>标题拟定题</strong>、<strong>下文推断题</strong>、<strong>语句填入题</strong>、<strong>语句排序题</strong>、<strong>细节判断题</strong>六种。</p><h2 id="常见问法"><a href="#常见问法" class="headerlink" title="常见问法"></a>常见问法</h2><h3 id="中心理解题"><a href="#中心理解题" class="headerlink" title="中心理解题"></a>中心理解题</h3><ul><li>“这段文字意在说明：”</li><li>“这段文字意在强调：”</li><li>“这段文字主要介绍了：”</li><li>“下列对文意概括最恰当的是：”</li><li>“这段文字的核心观点是：”</li></ul><h3 id="标题拟定题"><a href="#标题拟定题" class="headerlink" title="标题拟定题"></a>标题拟定题</h3><ul><li>“最适合做这段文字标题的是：”</li></ul><h3 id="下文推断题"><a href="#下文推断题" class="headerlink" title="下文推断题"></a>下文推断题</h3><ul><li>“这段文字接下来最可能讲的是：”</li></ul><h3 id="语句填入题"><a href="#语句填入题" class="headerlink" title="语句填入题"></a>语句填入题</h3><ul><li>“填入画横线部分最恰当的一项是：”</li></ul><h3 id="语句排序题"><a href="#语句排序题" class="headerlink" title="语句排序题"></a>语句排序题</h3><ul><li>“将以上6 个句子重新排列，语序正确的是：”</li></ul><h3 id="细节判断题"><a href="#细节判断题" class="headerlink" title="细节判断题"></a>细节判断题</h3><ul><li>“下列选项中，与这段文字意思不相符的是：”</li><li>“对这段文字理解错误的是：”</li><li>“下列关于……（文段描写对象）的说法与文意不符的是”</li></ul><h2 id="文段分类"><a href="#文段分类" class="headerlink" title="文段分类"></a>文段分类</h2><p>根据文段内容，可将题干文段分为说理类、科普介绍类、新闻类三种。</p><h3 id="各类文段常见问法"><a href="#各类文段常见问法" class="headerlink" title="各类文段常见问法"></a>各类文段常见问法</h3><h4 id="说理类文章常见问法"><a href="#说理类文章常见问法" class="headerlink" title="说理类文章常见问法"></a>说理类文章常见问法</h4><p>主旨是什么、意在说明什么、意图强调什么、观点是什么……等；</p><h4 id="科普介绍类常见问法"><a href="#科普介绍类常见问法" class="headerlink" title="科普介绍类常见问法"></a>科普介绍类常见问法</h4><p>主要介绍了什么、主要讲了什么、最适合的概括是……等；</p><h4 id="新闻类文章常见问法"><a href="#新闻类文章常见问法" class="headerlink" title="新闻类文章常见问法"></a>新闻类文章常见问法</h4><p>主要讲了什么、意在强调什么、重在强调什么……等。</p><h3 id="三类文段解题原则"><a href="#三类文段解题原则" class="headerlink" title="三类文段解题原则"></a>三类文段解题原则</h3><h4 id="说理类文章"><a href="#说理类文章" class="headerlink" title="说理类文章"></a>说理类文章</h4><p>原文有对策优先选对策（极少数会改造对策句）、原文有作者观点或态度选观<br>点态度、原文有问题可概括问题也可解决问题（无优先选择）；</p><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/08/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%8A%E5%8D%8A%E5%B9%B4%EF%BC%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%88%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0%EF%BC%89/image-20240803181048432.png" alt="image-20240803181048432"></p><h4 id="科普介绍类"><a href="#科普介绍类" class="headerlink" title="科普介绍类"></a>科普介绍类</h4><p>选“中性”的概括选项，此时不选对策与问题；</p><h5 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/08/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%8A%E5%8D%8A%E5%B9%B4%EF%BC%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%88%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0%EF%BC%89/image-20240803175215344.png" alt="image-20240803175215344"></p><h4 id="新闻类文章"><a href="#新闻类文章" class="headerlink" title="新闻类文章"></a>新闻类文章</h4><p>重视新状况、新成绩、新突破等“新”。</p><h3 id="整体解题思路"><a href="#整体解题思路" class="headerlink" title="整体解题思路"></a>整体解题思路</h3><p><img src="/2024/08/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%8A%E5%8D%8A%E5%B9%B4%EF%BC%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%88%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0%EF%BC%89/image-20240803180304680.png" alt="image-20240803180304680"></p><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><p><img src="/2024/08/03/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%EF%BC%88%E4%B8%8A%E5%8D%8A%E5%B9%B4%EF%BC%89/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%88%E7%89%87%E6%AE%B5%E9%98%85%E8%AF%BB%E6%95%B4%E4%BD%93%E6%A6%82%E8%BF%B0%EF%BC%89/image-20240803182249506.png" alt="image-20240803182249506"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 言语理解（上半年） </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 言语理解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析第七节（特殊考点——拉动增长、贡献率和容斥问题）</title>
      <link href="/2024/08/02/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E7%89%B9%E6%AE%8A%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%8B%89%E5%8A%A8%E5%A2%9E%E9%95%BF%E3%80%81%E8%B4%A1%E7%8C%AE%E7%8E%87%E5%92%8C%E5%AE%B9%E6%96%A5%E9%97%AE%E9%A2%98%EF%BC%89/"/>
      <url>/2024/08/02/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E7%89%B9%E6%AE%8A%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%8B%89%E5%8A%A8%E5%A2%9E%E9%95%BF%E3%80%81%E8%B4%A1%E7%8C%AE%E7%8E%87%E5%92%8C%E5%AE%B9%E6%96%A5%E9%97%AE%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="资料分析第七节（特殊考点——拉动增长、贡献率和容斥问题）"><a href="#资料分析第七节（特殊考点——拉动增长、贡献率和容斥问题）" class="headerlink" title="资料分析第七节（特殊考点——拉动增长、贡献率和容斥问题）"></a>资料分析第七节（特殊考点——拉动增长、贡献率和容斥问题）</h1><h2 id="拉动增长和增量贡献率"><a href="#拉动增长和增量贡献率" class="headerlink" title="拉动增长和增量贡献率"></a>拉动增长和增量贡献率</h2><h3 id="知识点介绍"><a href="#知识点介绍" class="headerlink" title="知识点介绍"></a>知识点介绍</h3><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><script type="math/tex; mode=display">拉动增长=\frac{部分增量}{整体前期}</script><script type="math/tex; mode=display">增量贡献率=\frac{部分增量}{整体增量}</script><h4 id="考点细节"><a href="#考点细节" class="headerlink" title="考点细节"></a>考点细节</h4><p>增量贡献率比较大小：当比较不同部分对同一整体的增量贡献率时，因整体增量相同，只比较部分增量大小即可。</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><img src="/2024/08/02/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E7%89%B9%E6%AE%8A%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%8B%89%E5%8A%A8%E5%A2%9E%E9%95%BF%E3%80%81%E8%B4%A1%E7%8C%AE%E7%8E%87%E5%92%8C%E5%AE%B9%E6%96%A5%E9%97%AE%E9%A2%98%EF%BC%89/image-20240802213604903.png" alt="image-20240802213604903"></p><p><img src="/2024/08/02/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E7%89%B9%E6%AE%8A%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%8B%89%E5%8A%A8%E5%A2%9E%E9%95%BF%E3%80%81%E8%B4%A1%E7%8C%AE%E7%8E%87%E5%92%8C%E5%AE%B9%E6%96%A5%E9%97%AE%E9%A2%98%EF%BC%89/image-20240802214000099.png" alt="image-20240802214000099"></p><p><img src="/2024/08/02/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E7%89%B9%E6%AE%8A%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%8B%89%E5%8A%A8%E5%A2%9E%E9%95%BF%E3%80%81%E8%B4%A1%E7%8C%AE%E7%8E%87%E5%92%8C%E5%AE%B9%E6%96%A5%E9%97%AE%E9%A2%98%EF%BC%89/image-20240802214548973.png" alt="image-20240802214548973"></p><h2 id="容斥问题"><a href="#容斥问题" class="headerlink" title="容斥问题"></a>容斥问题</h2><h3 id="常见考法与思路"><a href="#常见考法与思路" class="headerlink" title="常见考法与思路"></a>常见考法与思路</h3><ul><li><strong>若问有无交集：</strong>占比之和超过100%，则一定有交集；</li><li><strong>若问至少：</strong><ul><li>（1）考虑“尽量相斥”、“重合尽量少”</li><li>（2）公式：“a＋b－100%”或“a＋b－总量”；</li></ul></li><li><strong>若问至多：</strong><ul><li>（1）考虑“包含”</li><li>（2）至多有“占比较少项的比重”；</li></ul></li><li><strong>既A 又B 的占比范围：</strong>在“至少”和“至多”之间。</li></ul><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><p><img src="/2024/08/02/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E7%89%B9%E6%AE%8A%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%8B%89%E5%8A%A8%E5%A2%9E%E9%95%BF%E3%80%81%E8%B4%A1%E7%8C%AE%E7%8E%87%E5%92%8C%E5%AE%B9%E6%96%A5%E9%97%AE%E9%A2%98%EF%BC%89/image-20240802220047936.png" alt="image-20240802220047936"></p><p><img src="/2024/08/02/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%83%E8%8A%82%EF%BC%88%E7%89%B9%E6%AE%8A%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%8B%89%E5%8A%A8%E5%A2%9E%E9%95%BF%E3%80%81%E8%B4%A1%E7%8C%AE%E7%8E%87%E5%92%8C%E5%AE%B9%E6%96%A5%E9%97%AE%E9%A2%98%EF%BC%89/image-20240802220724352.png" alt="image-20240802220724352"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 资料分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析第六节（高频考点——平均倍数类）</title>
      <link href="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/"/>
      <url>/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="资料分析第六节（高频考点——平均倍数类）"><a href="#资料分析第六节（高频考点——平均倍数类）" class="headerlink" title="资料分析第六节（高频考点——平均倍数类）"></a>资料分析第六节（高频考点——平均倍数类）</h1><h2 id="平均数"><a href="#平均数" class="headerlink" title="平均数"></a>平均数</h2><h3 id="平均数考点介绍"><a href="#平均数考点介绍" class="headerlink" title="平均数考点介绍"></a>平均数考点介绍</h3><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801033343994.png" alt="image-20240801033343994"></p><ul><li><strong>平均数**</strong>：**是指在一组数据中所有数据之和（A）再除以数据的个数（B），即平均数=总数A/个数B</li><li><strong>题目类型：</strong><ul><li>求单个平均数（注意和时间有关的平均数）</li><li>两个平均数之差（即比值差）</li><li>两个平均数之比（即A/B/C/D）</li><li>平均数的增长率（即比值增长率）</li><li>基期平均数（同基期比重）</li><li>平均数的变化情况（同比重趋势）</li></ul></li><li>考点细节<ul><li>题型识别：注意“均”、“每”、“单位”，均前每后做分母（或简单记为后除前）</li><li>(A/B)/(C/D)＝AD/BC（两边除中间）</li><li>时间平均数要注意闰年天数（366 天）、季度个数等</li></ul></li></ul><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801035439823.png" alt="image-20240801035439823"></p><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801035855835.png" alt="image-20240801035855835"></p><h2 id="倍数"><a href="#倍数" class="headerlink" title="倍数"></a>倍数</h2><h3 id="倍数考点介绍"><a href="#倍数考点介绍" class="headerlink" title="倍数考点介绍"></a>倍数考点介绍</h3><ul><li><strong>倍数：</strong>一个数除以另一数所得的商。如a÷b=c，就是说，a 是b 的倍数。例如：A÷B=C，就可以说A是B的C倍。</li><li><strong>倍数与增长率关系：</strong>1倍=100%，倍数=增长率+100%，例如：增长了1.5倍=增长了150%，A比B增长了60%，即A是B的1.6倍。</li><li><strong>题目类型：</strong><ul><li>求单个倍数</li><li>两个倍数之比（A/B/C/D）</li><li>基期倍数（同基期比重）</li><li>比值增长率/间隔增长率变为倍数提问（比值倍数=比值增长率+100%、间隔倍数=间隔增长率+100%）</li></ul></li></ul><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801105400455.png" alt="image-20240801105400455"></p><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801110825829.png" alt="image-20240801110825829"></p><blockquote><p><strong>倍数 = （率+1）</strong></p></blockquote><h2 id="年均增长量"><a href="#年均增长量" class="headerlink" title="年均增长量"></a>年均增长量</h2><h3 id="年均增量考点介绍"><a href="#年均增量考点介绍" class="headerlink" title="年均增量考点介绍"></a>年均增量考点介绍</h3><h4 id="年均增长量-1"><a href="#年均增长量-1" class="headerlink" title="年均增长量"></a>年均增长量</h4><p>表示的是n 年间增量的绝对平均值，年均增量= </p><script type="math/tex; mode=display">\frac{末期-基期}{n}</script><p>其中，严谨来说，基期应向前推一年（但有时按照不严谨处理），n 为末期、基期年份差值。</p><h4 id="年均增长量基期说明"><a href="#年均增长量基期说明" class="headerlink" title="年均增长量基期说明"></a>年均增长量基期说明</h4><h5 id="一、从公式角度看"><a href="#一、从公式角度看" class="headerlink" title="一、从公式角度看"></a>一、从公式角度看</h5><p>2016～2020 年的年均增量应该是2016、2017、2018、2019、2020 这五年增量的平均值，既然涉及到了2016 年的增量那就应该是以2015 年为基期，因为X＝B－A，2016 年的增量必然是以2015 年为基期求出的。</p><h5 id="二、从语言习惯看"><a href="#二、从语言习惯看" class="headerlink" title="二、从语言习惯看"></a>二、从语言习惯看</h5><p>2016～2020 年的增量从语言习惯来看应该是从2016 年初到2020 年末所增加的量，而题干中一般给的是当年年末的数据，那么2016 年初的数据应该从哪里获得呢？我们一般都认为2016 年第一秒的数据就等于2015 年的最后一秒的数据，也就是题干中2015 年的数据，所以从语言习惯上来看2016～2020 年增量的基期应该为2015 年。</p><h5 id="三、从权威解释看"><a href="#三、从权威解释看" class="headerlink" title="三、从权威解释看"></a>三、从权威解释看</h5><p>“本《年鉴》内所列的平均增长速度，除固定资产投资用‘累计法’计算外，其余均用‘水平法’计算。从某年到某年平均增长速度的年份，均不包括基期年在内。如建国四十三年以来的平均增长速度是以1949 年为基期计算的，则写为1950～1992 年平均增长速度，其余类推。”（摘自中国统计年鉴统计指标解释）。</p><h4 id="年均增长量情况总结"><a href="#年均增长量情况总结" class="headerlink" title="年均增长量情况总结"></a>年均增长量情况总结</h4><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801031149774.png" alt="image-20240801031149774"></p><h5 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801131843532.png" alt="image-20240801131843532"></p><h2 id="年均增长率"><a href="#年均增长率" class="headerlink" title="年均增长率"></a>年均增长率</h2><h3 id="年均增长率考点介绍"><a href="#年均增长率考点介绍" class="headerlink" title="年均增长率考点介绍"></a>年均增长率考点介绍</h3><h4 id="年均增长率-1"><a href="#年均增长率-1" class="headerlink" title="年均增长率"></a>年均增长率</h4><p>表示的是n年间的年平均增速，因为涉及平方与开方，是资料分析中相对较难的知识点，但考法单一容易掌握。</p><h4 id="年均增长率公式"><a href="#年均增长率公式" class="headerlink" title="年均增长率公式"></a>年均增长率公式</h4><script type="math/tex; mode=display">(1+r)^n=\frac{末期}{基期}</script><script type="math/tex; mode=display">在年均增长率极小时，可简化为:\frac{末期}{基期}\geq1+nr</script><h4 id="需记住的数字"><a href="#需记住的数字" class="headerlink" title="需记住的数字"></a>需记住的数字</h4><script type="math/tex; mode=display">1.05^4＝1.216，1.1^4＝1.46，1.15^4＝1.75，1.2^4＝2.07，中间数字可平均分段</script><h5 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801134912300.png" alt="image-20240801134912300"></p><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801135155143.png" alt="image-20240801135155143"></p><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801135514171.png" alt="image-20240801135514171"></p><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801135739403.png" alt="image-20240801135739403"></p><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801140611029.png" alt="image-20240801140611029"></p><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801140827764.png" alt="image-20240801140827764"></p><h5 id="例题——年均增长率与间隔增长率结合"><a href="#例题——年均增长率与间隔增长率结合" class="headerlink" title="例题——年均增长率与间隔增长率结合"></a>例题——年均增长率与间隔增长率结合</h5><p> <img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801141414209.png" alt="image-20240801141414209"></p><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801141907714.png" alt="image-20240801141907714"></p><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801142435913.png" alt="image-20240801142435913"></p><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801142749931.png" alt="image-20240801142749931"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801142819191.png" alt="image-20240801142819191"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/08/01/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%85%AD%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E5%B9%B3%E5%9D%87%E5%80%8D%E6%95%B0%E7%B1%BB%EF%BC%89/image-20240801143309416.png" alt="image-20240801143309416"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 资料分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析——思维导图（一）</title>
      <link href="/2024/07/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/07/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="资料分析——思维导图（一）"><a href="#资料分析——思维导图（一）" class="headerlink" title="资料分析——思维导图（一）"></a>资料分析——思维导图（一）</h1><h2 id="ABRX类"><a href="#ABRX类" class="headerlink" title="ABRX类"></a>ABRX类</h2><p><img src="/2024/07/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%EF%BC%88%E4%B8%80%EF%BC%89/image-20240731234749801.png" alt="image-20240731234749801"></p><p><img src="/2024/07/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%EF%BC%88%E4%B8%80%EF%BC%89/image-20240731235105968.png" alt="image-20240731235105968"></p><h2 id="比重类"><a href="#比重类" class="headerlink" title="比重类"></a>比重类</h2><p><img src="/2024/07/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%EF%BC%88%E4%B8%80%EF%BC%89/image-20240801000541497.png" alt="image-20240801000541497"></p><p><img src="/2024/07/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%EF%BC%88%E4%B8%80%EF%BC%89/image-20240801001239520.png" alt="image-20240801001239520"></p><h2 id="比较类"><a href="#比较类" class="headerlink" title="比较类"></a>比较类</h2><p><img src="/2024/07/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%EF%BC%88%E4%B8%80%EF%BC%89/image-20240801001433708.png" alt="image-20240801001433708"></p><h2 id="盐水类"><a href="#盐水类" class="headerlink" title="盐水类"></a>盐水类</h2><p><img src="/2024/07/31/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%EF%BC%88%E4%B8%80%EF%BC%89/image-20240801001559116.png" alt="image-20240801001559116"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 资料分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数量关系第一节（和差倍比与方程法）</title>
      <link href="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/"/>
      <url>/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="数量关系第一节（和差倍比与方程法）"><a href="#数量关系第一节（和差倍比与方程法）" class="headerlink" title="数量关系第一节（和差倍比与方程法）"></a>数量关系第一节（和差倍比与方程法）</h1><h2 id="方程法"><a href="#方程法" class="headerlink" title="方程法"></a>方程法</h2><p>找到题干的等式关系</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727010443623.png" alt="image-20240727010443623"></p><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727011308947.png" alt="image-20240727011308947"></p><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727014013780.png" alt="image-20240727014013780"></p><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727014428106.png" alt="image-20240727014428106"></p><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727015800464.png" alt="image-20240727015800464"></p><h2 id="不定方程"><a href="#不定方程" class="headerlink" title="不定方程"></a>不定方程</h2><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727142354919.png" alt="image-20240727142354919"></p><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><h4 id="倍数特性"><a href="#倍数特性" class="headerlink" title="倍数特性"></a>倍数特性</h4><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727142552742.png" alt="image-20240727142552742"></p><h4 id="尾数"><a href="#尾数" class="headerlink" title="尾数"></a>尾数</h4><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727143118117.png" alt="image-20240727143118117"></p><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727143737930.png" alt="image-20240727143737930"></p><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727144225602.png" alt="image-20240727144225602"></p><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727145006030.png" alt="image-20240727145006030"></p><h4 id="约分还原"><a href="#约分还原" class="headerlink" title="约分还原"></a>约分还原</h4><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727150230783.png" alt="image-20240727150230783"></p><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727150950577.png" alt="image-20240727150950577"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/07/27/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB/%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%92%8C%E5%B7%AE%E5%80%8D%E6%AF%94%E4%B8%8E%E6%96%B9%E7%A8%8B%E6%B3%95%EF%BC%89/image-20240727151229529.png" alt="image-20240727151229529"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 数量关系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 数量关系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析第五节（高频考点——盐水类）</title>
      <link href="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/"/>
      <url>/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="资料分析第五节（高频考点——盐水类）"><a href="#资料分析第五节（高频考点——盐水类）" class="headerlink" title="资料分析第五节（高频考点——盐水类）"></a>资料分析第五节（高频考点——盐水类）</h1><h2 id="盐水思想（混合思维）介绍"><a href="#盐水思想（混合思维）介绍" class="headerlink" title="盐水思想（混合思维）介绍"></a>盐水思想（混合思维）介绍</h2><p>资料分析题目中，经常会有整体（增长率），部分A（增长率），部分B（增长率）的关系，这样的关系和混合溶液（浓度），溶液A（浓度），溶液B（浓度）的关系非常相似，所以，我们可以将盐水思想和十字交叉法运用到资料分析中。</p><p><strong>但需要注意的是</strong>，资料分析中的增长率R，是针对基期A 所言，所以如果要用十字交叉法求解，溶液A、B 质量对应的是基期值，但有时可以用现期值代替。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726205320009.png" alt="image-20240726205320009"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726205931633.png" alt="image-20240726205931633"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726215013898.png" alt="image-20240726215013898"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726215521195.png" alt="image-20240726215521195"></p><h2 id="盐水题目识别特征"><a href="#盐水题目识别特征" class="headerlink" title="盐水题目识别特征"></a>盐水题目识别特征</h2><p>整体由两部分组成（A＝A1＋A2），且整体部分均可表示为A=B/C.</p><h2 id="资料分析中，适用盐水思维的常见类型有"><a href="#资料分析中，适用盐水思维的常见类型有" class="headerlink" title="资料分析中，适用盐水思维的常见类型有"></a>资料分析中，适用盐水思维的常见类型有</h2><p>整体增长率和两部分增长率、累计（累计量=当月量+上月累计量）增速和两部分（当月量、上月累计量）增速、整体平均数（例如人均收入、人均消费、单位面积产量等）和两部分平均数、整体比重和两部分比重、出口额（出口额=贸易顺差+进口额）增速和贸易顺差进口额增速等等。</p><h2 id="盐水之定性分析"><a href="#盐水之定性分析" class="headerlink" title="盐水之定性分析"></a>盐水之定性分析</h2><h3 id="常见考法与思路"><a href="#常见考法与思路" class="headerlink" title="常见考法与思路"></a>常见考法与思路</h3><h4 id="混合溶液浓度（可指增长率、比重、平均数等）"><a href="#混合溶液浓度（可指增长率、比重、平均数等）" class="headerlink" title="混合溶液浓度（可指增长率、比重、平均数等）"></a>混合溶液浓度（可指增长率、比重、平均数等）</h4><p>根据“在中间不在正中间（混合溶液浓度在两部分溶液浓度之间且靠近溶液质量大的一部分）”原则，定性的判断整体或部分增长率；</p><h4 id="三浓度排序"><a href="#三浓度排序" class="headerlink" title="三浓度排序"></a>三浓度排序</h4><p>牢记“部分A 浓度＞整体浓度＞部分B 浓度”，“部分A 浓度＞整体浓度”等价于“整体浓度＞部分B 浓度”，反之亦然。</p><h5 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726215832148.png" alt="image-20240726215832148"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726220543901.png" alt="image-20240726220543901"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726220844117.png" alt="image-20240726220844117"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726221157599.png" alt="image-20240726221157599"></p><h2 id="十字交叉法、线段法介绍"><a href="#十字交叉法、线段法介绍" class="headerlink" title="十字交叉法、线段法介绍"></a>十字交叉法、线段法介绍</h2><p>分母是什么就代入什么</p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726184832152.png" alt="image-20240726184832152"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726184850868.png" alt="image-20240726184850868"></p><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726222226756.png" alt="image-20240726222226756"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726222555289.png" alt="image-20240726222555289"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726224439877.png" alt="image-20240726224439877"></p><h2 id="盐水之定量分析"><a href="#盐水之定量分析" class="headerlink" title="盐水之定量分析"></a>盐水之定量分析</h2><h3 id="常见考法与思路-1"><a href="#常见考法与思路-1" class="headerlink" title="常见考法与思路"></a>常见考法与思路</h3><h4 id="已知3R-求量之比"><a href="#已知3R-求量之比" class="headerlink" title="已知3R 求量之比"></a>已知<strong>3R 求量</strong>之比</h4><p>直接将“3R”代入十字交叉模型求得量之比，“3R”中的“R”可以是增长率、比重、平均数等，求得的“量之比”多为基期量或人数<strong>（求人数想盐水）</strong>之比；</p><h5 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726230415894.png" alt="image-20240726230415894"></p><h4 id="已知2R-和量之比求得第三R"><a href="#已知2R-和量之比求得第三R" class="headerlink" title="已知2R 和量之比求得第三R"></a>已知2R 和量之比求得第三R</h4><p>将“2R”和“量之比”代入十字交叉模型求得“第三R”。</p><h5 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726231555674.png" alt="image-20240726231555674"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726232054673.png" alt="image-20240726232054673"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240731222534053.png" alt="image-20240731222534053"></p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240726232754046.png" alt="image-20240726232754046"></p><h2 id="方法拓展之利用盐水思想比较大小"><a href="#方法拓展之利用盐水思想比较大小" class="headerlink" title="方法拓展之利用盐水思想比较大小"></a>方法拓展之利用盐水思想比较大小</h2><p>利用盐水思想，将分子分母同时拆分，可以判断数字是否大于或小于某个数字。</p><h3 id="例题-5"><a href="#例题-5" class="headerlink" title="例题"></a>例题</h3><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240731224716479.png" alt="image-20240731224716479"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240731231038763.png" alt="image-20240731231038763"></p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240731231514924.png" alt="image-20240731231514924"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240731232352791.png" alt="image-20240731232352791"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%94%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E7%9B%90%E6%B0%B4%E7%B1%BB%EF%BC%89/image-20240731232740446.png" alt="image-20240731232740446"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 资料分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析第四节（高频考点——比较类）</title>
      <link href="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/"/>
      <url>/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="资料分析第四节（高频考点——比较类）"><a href="#资料分析第四节（高频考点——比较类）" class="headerlink" title="资料分析第四节（高频考点——比较类）"></a>资料分析第四节（高频考点——比较类）</h1><h2 id="比值（增速、比重、基期等）大小比较"><a href="#比值（增速、比重、基期等）大小比较" class="headerlink" title="比值（增速、比重、基期等）大小比较"></a>比值（增速、比重、基期等）大小比较</h2><h3 id="双线法介绍"><a href="#双线法介绍" class="headerlink" title="双线法介绍"></a>双线法介绍</h3><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726035327828.png" alt="image-20240726035327828"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726040527598.png" alt="image-20240726040527598"></p><h3 id="常见分数大小比较方法介绍"><a href="#常见分数大小比较方法介绍" class="headerlink" title="常见分数大小比较方法介绍"></a>常见分数大小比较方法介绍</h3><blockquote><p>趋势比较法：借用比重趋势解题思路，根据分子分母增速大小判断分数大小</p><p>通分法：可将要比较的两个分数的分子或分母换算成同样大小<br>分数大小比较规律如下：</p><ul><li>分母相同比分子，分子大的分数大</li><li>分子相同比分母，分母小的分数大</li></ul><p>计算比较：用拆分法或直除法简单计算分数大小进行比较</p></blockquote><h3 id="比值大小"><a href="#比值大小" class="headerlink" title="比值大小"></a>比值大小</h3><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726042509055.png" alt="image-20240726042509055"></p><h3 id="替代比较"><a href="#替代比较" class="headerlink" title="替代比较"></a>替代比较</h3><blockquote><p>替代比较思路：</p><ul><li>用末期/基期代替年均增长率比较（年份间隔相同）；</li><li>用倍数（B/A）代替增速（B/A—1）比较；</li><li>用部分A/部分非A 代替部分A/整体比较；</li><li>用X/B 代替X/A 比较。</li></ul></blockquote><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726131619342.png" alt="image-20240726131619342"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726135203154.png" alt="image-20240726135203154"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726135530574.png" alt="image-20240726135530574"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726135952072.png" alt="image-20240726135952072"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726140511904.png" alt="image-20240726140511904"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726140550934.png" alt="image-20240726140550934"></p><h3 id="特殊比较（超过某数值、折线图等）"><a href="#特殊比较（超过某数值、折线图等）" class="headerlink" title="特殊比较（超过某数值、折线图等）"></a>特殊比较（超过某数值、折线图等）</h3><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726141456999.png" alt="image-20240726141456999"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726142534470.png" alt="image-20240726142534470"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726142840918.png" alt="image-20240726142840918"></p><h2 id="增量大小比较"><a href="#增量大小比较" class="headerlink" title="增量大小比较"></a>增量大小比较</h2><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726143118899.png" alt="image-20240726143118899"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726143240485.png" alt="image-20240726143240485"></p><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h4><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726144307239.png" alt="image-20240726144307239"></p><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726145606243.png" alt="image-20240726145606243">          </p><h3 id="利用增量大小确定差值变化（追及问题）"><a href="#利用增量大小确定差值变化（追及问题）" class="headerlink" title="利用增量大小确定差值变化（追及问题）"></a>利用增量大小确定差值变化（追及问题）</h3><h4 id="例题（还是比较增量）"><a href="#例题（还是比较增量）" class="headerlink" title="例题（还是比较增量）"></a>例题（还是比较增量）</h4><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726145853656.png" alt="image-20240726145853656"></p><h2 id="查找比较-计算"><a href="#查找比较-计算" class="headerlink" title="查找比较+计算"></a>查找比较+计算</h2><h3 id="解题原则"><a href="#解题原则" class="headerlink" title="解题原则"></a>解题原则</h3><p>读题分两步，先查找比较，再计算，避免遗忘，反复读题。</p><h4 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h4><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726150239362.png" alt="image-20240726150239362"></p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="/2024/07/26/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E5%9B%9B%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E8%BE%83%E7%B1%BB%EF%BC%89/image-20240726150457167.png" alt="image-20240726150457167"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 资料分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析第三节（高频考点——比重类）</title>
      <link href="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/"/>
      <url>/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="资料分析第三节（高频考点——比重类）"><a href="#资料分析第三节（高频考点——比重类）" class="headerlink" title="资料分析第三节（高频考点——比重类）"></a>资料分析第三节（高频考点——比重类）</h1><h2 id="单期比重之现期比重"><a href="#单期比重之现期比重" class="headerlink" title="单期比重之现期比重"></a>单期比重之现期比重</h2><h3 id="常见考法与思路"><a href="#常见考法与思路" class="headerlink" title="常见考法与思路"></a>常见考法与思路</h3><h4 id="比重"><a href="#比重" class="headerlink" title="比重"></a>比重</h4><p>套用公式即可，比重＝部分/整体、部分＝整体×比重、整体＝部分/比重；</p><h4 id="部分比重和或比重差"><a href="#部分比重和或比重差" class="headerlink" title="部分比重和或比重差"></a>部分比重和或比重差</h4><p>套用公式即可，比重和（比重差）＝部分和（部分差）/整体；</p><h4 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h4><p>确定各部分所占比例，多利用1/2、1/3、1/4、1/8 等或两部分之间的倍数关系，注意饼图中各部分的位置关系一般为从12 点钟方向起，顺时针依次排列；</p><h4 id="根据整体求部分"><a href="#根据整体求部分" class="headerlink" title="根据整体求部分"></a>根据整体求部分</h4><p>假设某一部分情况和整体一致，按照整体情况求部分。</p><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240724134026229.png" alt=" "></p><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240724134418132.png" alt="image-20240724134418132"></p><h2 id="单期比重之基期比重"><a href="#单期比重之基期比重" class="headerlink" title="单期比重之基期比重"></a>单期比重之基期比重</h2><h3 id="基期比重考点介绍"><a href="#基期比重考点介绍" class="headerlink" title="基期比重考点介绍"></a>基期比重考点介绍</h3><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240723183930176.png" alt="image-20240723183930176"></p><h5 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240724172418925.png" alt="image-20240724172418925"></p><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240724173123322.png" alt="image-20240724173123322"></p><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240724173530677.png" alt="image-20240724173530677"></p><h2 id="单期比重之隔级比重"><a href="#单期比重之隔级比重" class="headerlink" title="单期比重之隔级比重"></a>单期比重之隔级比重</h2><h3 id="隔级比重考点介绍"><a href="#隔级比重考点介绍" class="headerlink" title="隔级比重考点介绍"></a>隔级比重考点介绍</h3><p>​        隔级比重，指的是题目中存在大集合、中集合、小集合的关系，求得两集合的占比关系。例如，学校为大集合，班级为中集合，班级内的女同学为小集合，若问的是班级内的女同学在学校中的比重为为多少，即是隔级比重。</p><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240723184031434.png" alt="image-20240723184031434"></p><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240724174048347.png" alt="image-20240724174048347"></p><h5 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240724174714079.png" alt="image-20240724174714079"></p><h2 id="两期比重变化之比重趋势"><a href="#两期比重变化之比重趋势" class="headerlink" title="两期比重变化之比重趋势"></a>两期比重变化之比重趋势</h2><h3 id="比重趋势考点介绍"><a href="#比重趋势考点介绍" class="headerlink" title="比重趋势考点介绍"></a>比重趋势考点介绍</h3><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240723184057897.png" alt="image-20240723184057897"></p><h5 id="例题（比重趋势逆运用）"><a href="#例题（比重趋势逆运用）" class="headerlink" title="例题（比重趋势逆运用）"></a>例题（比重趋势逆运用）</h5><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240724225239837.png" alt="image-20240724225239837"></p><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240724230127741.png" alt="image-20240724230127741"></p><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240724232346604.png" alt="image-20240724232346604"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240725005748419.png" alt="image-20240725005748419"></p><h2 id="两期比重比较之比重差"><a href="#两期比重比较之比重差" class="headerlink" title="两期比重比较之比重差"></a>两期比重比较之比重差</h2><h3 id="比重差考点介绍"><a href="#比重差考点介绍" class="headerlink" title="比重差考点介绍"></a>比重差考点介绍</h3><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240723184130956.png" alt="image-20240723184130956"></p><h4 id="另一个公式"><a href="#另一个公式" class="headerlink" title="另一个公式"></a>另一个公式</h4><script type="math/tex; mode=display">\frac{A}{B}×\frac{r_1-r_2}{1+r_1}</script><h5 id="例题（可秒杀）"><a href="#例题（可秒杀）" class="headerlink" title="例题（可秒杀）"></a>例题（可秒杀）</h5><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240725010426638.png" alt="image-20240725010426638"></p><h5 id="例题（需要计算）"><a href="#例题（需要计算）" class="headerlink" title="例题（需要计算）"></a>例题（需要计算）</h5><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240725011615115.png" alt="image-20240725011615115"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240725013239231.png" alt="image-20240725013239231"></p><h2 id="比值差"><a href="#比值差" class="headerlink" title="比值差"></a>比值差</h2><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240725013100236.png" alt="image-20240725013100236"></p><h5 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240725015508291.png" alt="image-20240725015508291"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240725020507103.png" alt="image-20240725020507103"></p><p><img src="/2024/07/23/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%89%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94%E6%AF%94%E9%87%8D%E7%B1%BB%EF%BC%89/image-20240725020944395.png" alt="image-20240725020944395"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 资料分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析第二节（高频考点——ABRX类）</title>
      <link href="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/"/>
      <url>/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="资料分析第二节（高频考点——ABRX类）"><a href="#资料分析第二节（高频考点——ABRX类）" class="headerlink" title="资料分析第二节（高频考点——ABRX类）"></a>资料分析第二节（高频考点——ABRX类）</h1><h2 id="ABRX-类之“A”"><a href="#ABRX-类之“A”" class="headerlink" title="ABRX 类之“A”"></a>ABRX 类之“A”</h2><h3 id="常见考法与思路"><a href="#常见考法与思路" class="headerlink" title="常见考法与思路"></a>常见考法与思路</h3><h4 id="基期"><a href="#基期" class="headerlink" title="基期"></a>基期</h4><p>代入、直除、假设分配；</p><h4 id="间隔基期"><a href="#间隔基期" class="headerlink" title="间隔基期"></a><strong>间隔基期</strong></h4><p>求出隔年增长率(r1+r2+r1×r2 )，即变成第一类考法；</p><h4 id="基期差值"><a href="#基期差值" class="headerlink" title="基期差值"></a><strong>基期差值</strong></h4><p>假设分配法求得两个基期作差。</p><h4 id="已知变化情况求基期"><a href="#已知变化情况求基期" class="headerlink" title="已知变化情况求基期"></a><strong>已知变化情况求基期</strong></h4><p>利用公式</p><script type="math/tex; mode=display">A = \frac{X}{R}</script><p>求出基期。</p><blockquote><p><strong>※【注】</strong>基期、现期（前期、本期）区分：与谁相比，谁为基期。</p></blockquote><p><strong>同比与环比</strong></p><p>一、<strong>同比</strong>的基本概念:</p><p>同比是以上年同期为基期相比较，即现期某一时间段与上年某一时间段相比，可以理解为今年第n 月与去年第n 月的比较。</p><p>如，2023 年12 月份与2022 年12 月份相比较，2023 年上半年与2022 年上半年相比较就是同比。</p><p>二、<strong>环比</strong>的基本概念:</p><p>环比是与上一个相邻统计周期相比较，表明统计指标逐期的发展变化,可以理解为第n 月与第n-1 月的比较。</p><blockquote><p>如，2023 年12 月份与2023 年11 月份相比较，2023 年1 月份与2022 年12 月份相比较就是环比。</p></blockquote><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721024043992.png" alt="image-20240721024043992"></p><h2 id="ABRX-类之“B”"><a href="#ABRX-类之“B”" class="headerlink" title="ABRX 类之“B”"></a>ABRX 类之“B”</h2><h3 id="常见考法与思路-1"><a href="#常见考法与思路-1" class="headerlink" title="常见考法与思路"></a>常见考法与思路</h3><h4 id="假设增量求后期"><a href="#假设增量求后期" class="headerlink" title="假设增量求后期"></a><strong>假设增量求后期</strong></h4><p>求出X，列不等式即可；</p><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p>列不等式：</p><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721153243000-17226669528391.png" alt="image-20240721153243000"></p><h4 id="假设增速求后期"><a href="#假设增速求后期" class="headerlink" title="假设增速求后期"></a><strong>假设增速求后期</strong></h4><p>利用公式“B＝A＋AR”依次求出后一年，一般两到三次即可求得答案；</p><h5 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h5><blockquote><p>当两段增速相同时，则浓度相同（整体增长率相同）</p></blockquote><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721154519054.png" alt></p><h4 id="按照实际增长率求后期"><a href="#按照实际增长率求后期" class="headerlink" title="按照实际增长率求后期"></a><strong>按照实际增长率求后期</strong></h4><p>根据名义增长率求得基期后，在利用实际增长率求后期。</p><blockquote><p>建议将两个分数进行约分，不建议实用假设分配。</p></blockquote><h5 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721155734410.png" alt="image-20240721155734410"></p><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721160143720.png" alt="image-20240721160143720"></p><h2 id="ABRX-类之“X”"><a href="#ABRX-类之“X”" class="headerlink" title="ABRX 类之“X”"></a>ABRX 类之“X”</h2><h3 id="常见考法与思路-2"><a href="#常见考法与思路-2" class="headerlink" title="常见考法与思路"></a>常见考法与思路</h3><h4 id="一般增长量（求X）"><a href="#一般增长量（求X）" class="headerlink" title="一般增长量（求X）"></a><strong>一般增长量（求X）</strong></h4><p>R 靠近某分数可使用415 份数法，R 极小可直接BR，其他可假设分配；</p><h4 id="两期增长量倍数或比值（X1-X2）"><a href="#两期增长量倍数或比值（X1-X2）" class="headerlink" title="两期增长量倍数或比值（X1/X2）"></a><strong>两期增长量倍数或比值（X1/X2）</strong></h4><p>依次求得X1、X2，再求比值即可；</p><h4 id="整体增量-部分增量（X＝X1＋X2＋X3…）"><a href="#整体增量-部分增量（X＝X1＋X2＋X3…）" class="headerlink" title="整体增量/部分增量（X＝X1＋X2＋X3…）"></a><strong>整体增量/部分增量（X＝X1＋X2＋X3…）</strong></h4><p>各部分增量相加等于总增量。</p><h5 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721163859683.png" alt="image-20240721163859683"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721165036517.png" alt="image-20240721165036517"></p><h2 id="ABRX-类之“R”"><a href="#ABRX-类之“R”" class="headerlink" title="ABRX 类之“R”"></a>ABRX 类之“R”</h2><h3 id="常见考法与思路-3"><a href="#常见考法与思路-3" class="headerlink" title="常见考法与思路"></a>常见考法与思路</h3><h4 id="一般增长率"><a href="#一般增长率" class="headerlink" title="一般增长率"></a><strong>一般增长率</strong></h4><p>直接套用公式“R＝X/A”即可； </p><blockquote><p>和谁相比谁做基期（除以谁）</p></blockquote><h4 id="间隔增长率"><a href="#间隔增长率" class="headerlink" title="间隔增长率"></a><strong>间隔增长率</strong></h4><p>已知今年较去年增长R1，去年较前年增长R2，则今年较前年增长R1＋R2＋R1×R2；</p><blockquote><p>负负得正（-r1 × -r2）</p></blockquote><h5 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721225337868.png" alt="image-20240721225337868"></p><h5 id="间隔增长率逆运用例题"><a href="#间隔增长率逆运用例题" class="headerlink" title="间隔增长率逆运用例题"></a>间隔增长率逆运用例题</h5><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721230133019.png" alt="image-20240721230133019"></p><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721230505142.png" alt="image-20240721230505142"></p><h4 id="比值增长率（平均数增长率）"><a href="#比值增长率（平均数增长率）" class="headerlink" title="比值增长率（平均数增长率）"></a><strong>比值增长率</strong>（平均数增长率）</h4><p>符合表达式A＝B/C，材料中有B、C 增长率，求A 的增长率，即为比值增长率（多以平均数增长率形式出现），公式为</p><script type="math/tex; mode=display">\frac{R_b-R_c}{1+R_c}</script><blockquote><h4 id="后除前"><a href="#后除前" class="headerlink" title="后除前"></a>后除前</h4></blockquote><h5 id="例题-5"><a href="#例题-5" class="headerlink" title="例题"></a>例题</h5><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240721234521421.png" alt="image-20240721234521421"></p><blockquote><p>每万元</p><p>先算一元的，最后 × 一万</p></blockquote><h5 id="例题（比值倍数）"><a href="#例题（比值倍数）" class="headerlink" title="例题（比值倍数）"></a>例题（比值倍数）</h5><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240722001314657.png" alt="image-20240722001314657"></p><h5 id="例题（需要求两个增长率再计算）"><a href="#例题（需要求两个增长率再计算）" class="headerlink" title="例题（需要求两个增长率再计算）"></a>例题（需要求两个增长率再计算）</h5><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240722003100162.png" alt="image-20240722003100162"></p><h4 id="乘积增长率"><a href="#乘积增长率" class="headerlink" title="乘积增长率"></a><strong>乘积增长率</strong></h4><p>符合表达式A＝B×C，材料中有B、C 增长率，求A 的增长率，即为乘积增长率（多以实际含义关系式和部分增长率形式出现），公式为</p><script type="math/tex; mode=display">R_b+R_c+R_b×R_c</script><blockquote><p><strong>【常见名词区分】</strong><br><strong>增长量、增长率</strong>（增长速度、增长幅度）<br>在一般情况下，“增长率”等价于“增长速度（增速）”等价于“增长幅度（增幅）”。</p><p><strong>※【注】</strong><br>①增长了2.5 倍＝增长率为250%，即1 倍＝100%。<br>②在一些“最值”比较题的题干表述中，经常出现“增加（长）最多”和“增加（长）最快”的问法，我们需要注意，前者（即多少/大小）比较的是增长量，而后者（即快慢）比较的是增长率。<br>③若问的是“变化幅度最大”，看增速绝对值大小；若问的是“增长幅度最大”，看增速实际大小。</p><p><strong>百分数、百分点</strong></p><p>百分数，用“%”表示，通过数值相除得到，在资料分析题目中通常用在以下情况：</p><p>（1）部分在整体中所占的比重；<br>（2）表示某个指标的增长率。</p><p>百分点，是一个差值（常见于综合分析、间隔增长率题目中），通过百分数相减得到，在资料分析题目中通常用在两个增长率、比例等以百分数表示的数值的差值这样的情况。</p><p><strong>例如</strong>：2024 年某校男毕业生比重为52%（比重写成百分数的形式），2023 年男毕业生比重为48%，则2024 年比重上升了4 个百分点（比重的差值写成百分点的形式）。<br>2024 年该校男毕业生人数增长率为12%（增长率写成百分数的形式），增速较上年放缓（或下降）3个百分点（增长率的差值写成百分点的形式），则2023 年该校男毕业生人数增长率为15%。</p></blockquote><h5 id="例题-6"><a href="#例题-6" class="headerlink" title="例题"></a>例题</h5><h5 id><a href="#" class="headerlink" title></a><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240722003915030.png" alt="image-20240722003915030"></h5><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240722005355875.png" alt="image-20240722005355875"></p><h4 id="增速变化说明（“部分-整体×占比”乘积增长率）"><a href="#增速变化说明（“部分-整体×占比”乘积增长率）" class="headerlink" title="增速变化说明（“部分=整体×占比”乘积增长率）"></a><strong>增速变化说明（“部分=整体×占比”乘积增长率）</strong></h4><p><strong>增速变化的几种表示：</strong></p><ul><li>“今年增长率是10%，增幅扩大（上升）5 个百分点”：去年增速为5%；</li><li>“今年增长率是10%，增幅缩小（下降）5 个百分点”：去年增速为15%；</li><li>“今年增长率是10%，增幅回落5 个百分点”：去年增速为15%；</li><li>“今年增长率是-10%，降幅扩大5 个百分点”：去年增速为-5%；</li><li>“今年增长率是-10%，降幅收窄5 个百分点”：去年增速为-15%。</li></ul><h5 id="例题-7"><a href="#例题-7" class="headerlink" title="例题"></a>例题</h5><blockquote><p>材料一般都会给一个比重构成的图或者表</p><p>求整体中某一部分的增长率</p><p>找部分与整体的关系（两个率，可能需要自己求率），运用乘积增长率公式进行求解</p></blockquote><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240722010627245.png" alt="image-20240722010627245"></p><p> <img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240722011916429.png" alt="image-20240722011916429"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p><img src="/2024/07/21/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%BA%8C%E8%8A%82%EF%BC%88%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9%E2%80%94%E2%80%94ABRX%E7%B1%BB%EF%BC%89/image-20240722012454481.png" alt="image-20240722012454481"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 资料分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析第一节（实用速算技巧）</title>
      <link href="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/"/>
      <url>/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="资料分析第一节（实用速算技巧）"><a href="#资料分析第一节（实用速算技巧）" class="headerlink" title="资料分析第一节（实用速算技巧）"></a>资料分析第一节（实用速算技巧）</h1><h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><h3 id="尾数法"><a href="#尾数法" class="headerlink" title="尾数法"></a>尾数法</h3><p>多个数字<strong>精确求和</strong>或求差时，从尾数入手，一般观察<strong>后两位</strong>。</p><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240719235700939-17215834096791.png" alt="image-20240719235700939"></p><p>后面有单位时无法使用尾数法。</p><blockquote><p>高校 333所：125所 + 262所</p><p>精确可以使用</p></blockquote><p>最后一位重复看后两位。</p><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720000149506-17215834253822.png" alt="image-20240720000149506-17215834253822"></p><h3 id="高位叠加"><a href="#高位叠加" class="headerlink" title="高位叠加"></a>高位叠加</h3><p> 从高位加起，抓住问题的主要矛盾，非精确求和和没有选项可以参考时，可以选用高位叠加。</p><p>不一定要加到最后一位。 </p><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720000852215-17215834409863.png" alt="image-20240720000852215"></p><blockquote><p>十三五：2016——2020</p></blockquote><h2 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h2><h3 id="整数基准值法"><a href="#整数基准值法" class="headerlink" title="整数基准值法"></a>整数基准值法</h3><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720001255158-17215834536524.png" alt="image-20240720001255158"></p><h3 id="“21”-“12”-分段法"><a href="#“21”-“12”-分段法" class="headerlink" title="“21” -“12” 分段法"></a>“21” -“12” 分段法</h3><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720001630478-17215834668355.png" alt="image-20240720001630478"></p><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><h3 id="小分互换法"><a href="#小分互换法" class="headerlink" title="小分互换法"></a>小分互换法</h3><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720011014012-17215834889606.png" alt="image-20240720011014012"></p><h3 id="乘法拆分"><a href="#乘法拆分" class="headerlink" title="乘法拆分"></a>乘法拆分</h3><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720014457517-17215835006077.png" alt="image-20240720014457517"></p><h2 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h2><h3 id="拆分法"><a href="#拆分法" class="headerlink" title="拆分法"></a>拆分法</h3><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720020556384-17215835202728.png" alt="image-20240720020556384"></p><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720020651574-17215835322779.png" alt="image-20240720020651574"></p><p>好算的先算完，不好算的大胆估算，因为占比小。 </p><h3 id="直除法"><a href="#直除法" class="headerlink" title="直除法"></a>直除法</h3><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720023345951-172158354394810.png" alt="image-20240720023345951"></p><h2 id="基础概念介绍"><a href="#基础概念介绍" class="headerlink" title="基础概念介绍"></a>基础概念介绍</h2><h3 id="ABRX四量关系"><a href="#ABRX四量关系" class="headerlink" title="ABRX四量关系"></a>ABRX四量关系</h3><h4 id="基期和现期："><a href="#基期和现期：" class="headerlink" title="基期和现期："></a>基期和现期：</h4><ul><li>基期（A）：表示的是在比较两个时期的变化时，用来做比较值（基准值）的时期；</li><li>现期（B）：相对于基期而言，是当前所处的时期。</li></ul><blockquote><p>※【注】与谁相比，谁为基期。</p></blockquote><h4 id="增长量和增长率："><a href="#增长量和增长率：" class="headerlink" title="增长量和增长率："></a>增长量和增长率：</h4><ul><li>增长量（X）：表示的是现期与基期之间的绝对差值，是一绝对量。</li><li>增长率（R）：表示的是现期与基期之间的相对差异，是一相对量。</li></ul><blockquote><p>在一般情况下，“增长率”等价于“增长速度（增速）”等价于“增长幅度（增幅）”。</p></blockquote><h4 id="ABRX之间的关系："><a href="#ABRX之间的关系：" class="headerlink" title="ABRX之间的关系："></a>ABRX之间的关系：</h4><h5 id="一、已知：基期A-现期B"><a href="#一、已知：基期A-现期B" class="headerlink" title="一、已知：基期A 现期B"></a>一、已知：基期A 现期B</h5><script type="math/tex; mode=display">X=B-A</script><script type="math/tex; mode=display">R=\frac{B-A}{A}=\frac{X}{A}=\frac{B-1}{A}</script><h5 id="二、已知：基期A-增长量X"><a href="#二、已知：基期A-增长量X" class="headerlink" title="二、已知：基期A 增长量X"></a>二、已知：基期A 增长量X</h5><script type="math/tex; mode=display">B=A+X</script><script type="math/tex; mode=display">R=\frac{X}{A}</script><h5 id="三、已知：现期B-增长量X"><a href="#三、已知：现期B-增长量X" class="headerlink" title="三、已知：现期B 增长量X"></a>三、已知：现期B 增长量X</h5><script type="math/tex; mode=display">A=B-X</script><script type="math/tex; mode=display">R=\frac{X}{B-X}=\frac{X}{A}</script><h5 id="四、已知：现期B-增长率R"><a href="#四、已知：现期B-增长率R" class="headerlink" title="四、已知：现期B 增长率R"></a>四、已知：现期B 增长率R</h5><script type="math/tex; mode=display">A=\frac{B}{1+R}</script><script type="math/tex; mode=display">X=AR=\frac{B}{1+R}\times R</script><h5 id="五、已知：基期A-增长率R"><a href="#五、已知：基期A-增长率R" class="headerlink" title="五、已知：基期A 增长率R"></a>五、已知：基期A 增长率R</h5><script type="math/tex; mode=display">B=A\times(1+R)=A+AR</script><script type="math/tex; mode=display">X=A\times R</script><h5 id="六、已知：增长量X-增长率R"><a href="#六、已知：增长量X-增长率R" class="headerlink" title="六、已知：增长量X 增长率R"></a>六、已知：增长量X 增长率R</h5><script type="math/tex; mode=display">A=\frac{X}{R}</script><script type="math/tex; mode=display">B=A+X=\frac{X}{R}+X</script><h2 id="速算技巧——“415”分数法"><a href="#速算技巧——“415”分数法" class="headerlink" title="速算技巧——“415”分数法"></a>速算技巧——“415”分数法</h2><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><ul><li>415 份数法是将数量关系转化为份数比例关系，从而简化计算。</li><li>415 份数法中“415”分别代表基期、变化量、现期的份数。</li></ul><blockquote><p>【例】<br>若增长率为25%（25%＝1/4），为方便计算我们可以将基期设为4 份，变化量X＝AR＝1 份，现期为基<br>期和变化量的和，即为5 份。则基期、变化量、现期的份数分别为4、1、5。这也是415 份数法名字的由<br>来。</p></blockquote><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720141455850-172158356161211.png" alt="image-20240720141455850"></p><blockquote><p>需注意：</p><ul><li>①需要特别注意的是，增长率为负数时变化量a 也为负数，此时“415 份数法”即变成“4（－1）3份数法”。</li><li>②很多时候增长率R 并不与某个分数完全相等，而是将R 近似的看成某个分数。估算必然会产生误差，<br>对于估算出的一份量，规则为“估大则一份变大、估小则一份变小”（把23%估算成1/4，即是估大了，则求出的一份量比实际量要大：把23%估算成1/5，即是估小了，则求出的一份量比实际量要小）。</li></ul></blockquote><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720142059687-172158357116112.png" alt="image-20240720142059687"></p><h2 id="速算技巧——“415”分数法-1"><a href="#速算技巧——“415”分数法-1" class="headerlink" title="速算技巧——“415”分数法"></a>速算技巧——“415”分数法</h2><h4 id="方法介绍-1"><a href="#方法介绍-1" class="headerlink" title="方法介绍"></a>方法介绍</h4><p>假设分配的核心思想和拆分一样，都是“抓大放小”，将“大数”分完，“小数”有误差也不影响结果了。</p><blockquote><p>核心公式：X＝AR；使用步骤：确定分配数，画出分配树。</p><p><strong>【注】若增长率为负，假设分配法较繁琐，不适用！</strong></p><p>使用时机：增长率很小（一般认为小于10%）或基期较接近整数时，最为适用。</p></blockquote><p>假设分配最后一步分配方法：</p><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720144014318-172158358336113.png" alt="image-20240720144014318"></p><p>假设分配和直除法比较：</p><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720144029184-172158359499814.png" alt="image-20240720144029184"></p><p><img src="/2024/07/19/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%AC%E4%B8%80%E8%8A%82%EF%BC%88%E5%AE%9E%E7%94%A8%E9%80%9F%E7%AE%97%E6%8A%80%E5%B7%A7%EF%BC%89/image-20240720144145670-172158360785415.png" alt="image-20240720144145670"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
          <category> 资料分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课前动员</title>
      <link href="/2024/07/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%AF%BE%E5%89%8D%E5%8A%A8%E5%91%98/"/>
      <url>/2024/07/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%AF%BE%E5%89%8D%E5%8A%A8%E5%91%98/</url>
      
        <content type="html"><![CDATA[<h1 id="课前动员"><a href="#课前动员" class="headerlink" title="课前动员"></a>课前动员</h1><h2 id="课程安排"><a href="#课程安排" class="headerlink" title="课程安排"></a>课程安排</h2><p><img src="/2024/07/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%AF%BE%E5%89%8D%E5%8A%A8%E5%91%98/image-20240803145215468-17226679384701.png" alt="image-20240803145215468"></p><p><img src="/2024/07/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%AF%BE%E5%89%8D%E5%8A%A8%E5%91%98/image-20240803145226307.png" alt="image-20240803145226307"></p><p><img src="/2024/07/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%AF%BE%E5%89%8D%E5%8A%A8%E5%91%98/image-20240803145240945.png" alt="image-20240803145240945"></p><p>7月17——11月底  国考前</p><p>共4个半月</p><p>2个半月课程+2个月套题</p><h2 id="在职备考"><a href="#在职备考" class="headerlink" title="在职备考"></a>在职备考</h2><p>重点利用好早上，午休。以及晚上的学习时间，无纸化学习，重在自律。</p><p>周末休息：</p><p>多听两遍课程，夯实基础，整理错题。</p><p>考前冲刺阶段，在工作之余要挤出时间，保证练习，保证做题手感。</p><p>在每一个学科模块结束后，使用配套子类刷题。</p><h2 id="预习"><a href="#预习" class="headerlink" title="预习"></a>预习</h2><p>课前一定要过一遍讲义，会做的题都做出来，不会的及时标记。</p><p>听课时应该记得自己做时的思路。</p><h2 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h2><p>听课之后复盘</p><ol><li>在职侧重老师上课讲解的知识点，一节课之后的思维导图梳理。</li><li>全职侧重知识点+做题（资料1200）</li></ol><p><img src="/2024/07/18/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%8A%B1%E7%94%9F%E5%8D%81%E4%B8%89/%E8%AF%BE%E5%89%8D%E5%8A%A8%E5%91%98/image-20240724181756858.png" alt="image-20240724181756858"></p><h2 id="时间分配"><a href="#时间分配" class="headerlink" title="时间分配"></a>时间分配</h2><p>做题与复盘时间比在1：2到1：3之间，不是题目做的越多越好，一定要有复盘、整理错题的时间；行测都是选择题，做起来很轻松，但复盘才是更重要的环节，也是能力、提升成绩的重要一步。</p><h2 id="总结错题"><a href="#总结错题" class="headerlink" title="总结错题"></a>总结错题</h2><p>首先知道为什么错，哪些是不会做的，哪些是马虎错的，自己当时的问题出在哪，记下来踩的坑，以后如何避免这些坑，把经典的题目当作母题记下来。</p><h2 id="11月末国考"><a href="#11月末国考" class="headerlink" title="11月末国考"></a>11月末国考</h2>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 花生十三 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2023/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p><img src="/2023/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20240613022241567-17182165624671.png" alt="image-20240613022241567"></p><p>抽象工厂模式与工厂方法模式虽然主要意图都是为了解决，接口选择问题。但在实现上，抽象工厂是一个中心工厂，创建其他工厂的模式。</p><h2 id="案例例场景模拟"><a href="#案例例场景模拟" class="headerlink" title="案例例场景模拟"></a>案例例场景模拟</h2><p><img src="/2023/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20240613024811108-17182180921562.png" alt="image-20240613024811108"></p><p>很多时候初期业务的蛮荒发展，也会牵动着研发对系统的建设。</p><p>但随着业务超过预期的快速发展，系统的负载能力也要随着跟上。原有的单机 Redis 已经满足不了系统需求。这时候就需要更换为更为健壮的Redis集群服务，虽然需要修改但是不能影响目前系统的运行，还要平滑过渡过去。</p><p>随着这次的升级，可以预见的问题会有；</p><ol><li>很多服务用到了Redis需要一起升级到集群。</li><li>需要兼容集群A和集群B，便于后续的灾备。</li><li>两套集群提供的接口和方法各有差异，需要做适配。 </li><li>不能影响到目前正常运行的系统。</li></ol><h3 id="场景简述"><a href="#场景简述" class="headerlink" title="场景简述"></a>场景简述</h3><h4 id="模拟单机服务RedisUtils"><a href="#模拟单机服务RedisUtils" class="headerlink" title="模拟单机服务RedisUtils"></a>模拟单机服务RedisUtils</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(RedisUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; dataMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Redis获取数据 key：&#123;&#125;&quot;</span>, key);</span><br><span class="line">        <span class="keyword">return</span> dataMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Redis写入数据 key：&#123;&#125; val：&#123;&#125;&quot;</span>, key, value);</span><br><span class="line">        dataMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Redis写入数据 key：&#123;&#125; val：&#123;&#125; timeout：&#123;&#125; timeUnit：&#123;&#125;&quot;</span>, key, value, timeout, timeUnit.toString());</span><br><span class="line">        dataMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Redis删除数据 key：&#123;&#125;&quot;</span>, key);</span><br><span class="line">        dataMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>模拟Redis功能，也就是假定目前所有的系统都在使用的服务 </li><li>类和方法名次都固定写死到各个业务系统中，改动略微麻烦</li></ul><h4 id="模拟集群EGM"><a href="#模拟集群EGM" class="headerlink" title="模拟集群EGM"></a>模拟集群EGM</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EGM</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(EGM.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; dataMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">gain</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;EGM获取数据 key：&#123;&#125;&quot;</span>, key);</span><br><span class="line">        <span class="keyword">return</span> dataMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;EGM写入数据 key：&#123;&#125; val：&#123;&#125;&quot;</span>, key, value);</span><br><span class="line">        dataMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEx</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;EGM写入数据 key：&#123;&#125; val：&#123;&#125; timeout：&#123;&#125; timeUnit：&#123;&#125;&quot;</span>, key, value, timeout, timeUnit.toString());</span><br><span class="line">        dataMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;EGM删除数据 key：&#123;&#125;&quot;</span>, key);</span><br><span class="line">        dataMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟一个集群服务，但是方法名与各业务系统中使用的方法名不同。有点像你mac，我用win。做一样的事，但有不同的操作。</p><h4 id="模拟集群IIR"><a href="#模拟集群IIR" class="headerlink" title="模拟集群IIR"></a>模拟集群IIR</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IIR</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(IIR.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; dataMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;IIR获取数据 key：&#123;&#125;&quot;</span>, key);</span><br><span class="line">        <span class="keyword">return</span> dataMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;IIR写入数据 key：&#123;&#125; val：&#123;&#125;&quot;</span>, key, value);</span><br><span class="line">        dataMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExpire</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;IIR写入数据 key：&#123;&#125; val：&#123;&#125; timeout：&#123;&#125; timeUnit：&#123;&#125;&quot;</span>, key, value, timeout, timeUnit.toString());</span><br><span class="line">        dataMap.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;IIR删除数据 key：&#123;&#125;&quot;</span>, key);</span><br><span class="line">        dataMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是另外一套集群服务，有时候在企业开发中就很有可能出现两套服务，这里我们也是为了做模拟案例，所以添加两套实现同样功能的不同服务，来学习抽象工厂式。</p><p>综上可以看到，我们目前的系统中已经在大量的使用redis服务，但是因为系统不能满足业务的快速发展，因此需要迁移到集群服务中。而这时有两套集群服务需要兼容使用，又要满足所有的业务系统改造的同时不影响线上使用。</p><h3 id="单集群代码使用"><a href="#单集群代码使用" class="headerlink" title="单集群代码使用"></a>单集群代码使用</h3><p>以下是案例模拟中原有的单集群Redis使用方式，后续会通过对这里的代码进行改造。</p><p><img src="/2023/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20240613032323898-17182202057773.png" alt="image-20240613032323898"></p><h4 id="定义使用接口"><a href="#定义使用接口" class="headerlink" title="定义使用接口"></a>定义使用接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CacheService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">get</span><span class="params">(<span class="keyword">final</span> String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现调用代码"><a href="#实现调用代码" class="headerlink" title="实现调用代码"></a>实现调用代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CacheService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">RedisUtils</span> <span class="variable">redisUtils</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisUtils</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisUtils.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        redisUtils.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        redisUtils.set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        redisUtils.del(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前的代码对于当前场景下的使用没有什么问题，也比较简单。但是所有的业务系统都在使用同时，需要改造就不那么容易了。这里可以思考下，看如何改造才是合理的。</p><h2 id="if-else实现需求"><a href="#if-else实现需求" class="headerlink" title="if-else实现需求"></a>if-else实现需求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CacheService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">RedisUtils</span> <span class="variable">redisUtils</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisUtils</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EGM</span> <span class="variable">egm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EGM</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">IIR</span> <span class="variable">iir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IIR</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key, <span class="type">int</span> redisType)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == redisType) &#123;</span><br><span class="line">            <span class="keyword">return</span> egm.gain(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> == redisType) &#123;</span><br><span class="line">            <span class="keyword">return</span> iir.get(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisUtils.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">int</span> redisType)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == redisType) &#123;</span><br><span class="line">            egm.set(key, value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> == redisType) &#123;</span><br><span class="line">            iir.set(key, value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        redisUtils.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit, <span class="type">int</span> redisType)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == redisType) &#123;</span><br><span class="line">            egm.setEx(key, value, timeout, timeUnit);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> == redisType) &#123;</span><br><span class="line">            iir.setExpire(key, value, timeout, timeUnit);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        redisUtils.set(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key, <span class="type">int</span> redisType)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == redisType) &#123;</span><br><span class="line">            egm.delete(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> == redisType) &#123;</span><br><span class="line">            iir.del(key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        redisUtils.del(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里的实现过程非常简单，主要根据类型判断是哪个Redis集群。</li><li>虽然实现是简单了，但是对使用者来说就麻烦了，并且也很难应对后期的拓展和不停的维护。</li></ul><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_CacheService</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CacheService</span> <span class="variable">cacheService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        cacheService.set(<span class="string">&quot;user_name_01&quot;</span>, <span class="string">&quot;浩东&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">val01</span> <span class="operator">=</span> cacheService.get(<span class="string">&quot;user_name_01&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：&quot;</span> + val01);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><p><img src="/2023/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20240613141644471-17182594056904.png" alt="image-20240613141644471"></p><p>从结果上看运行正常，并没有什么问题。但这样的代码只要到生成运行起来以后，想再改就真的难了!</p><h2 id="抽象模式工厂重构代码"><a href="#抽象模式工厂重构代码" class="headerlink" title="抽象模式工厂重构代码"></a>抽象模式工厂重构代码</h2><p>接下来使用抽象工厂模式来进行代码优化，也算是一次很小的重构。</p><p>这里的抽象工厂的创建和获取方式，会采用代理类的方式进行实现。所被代理的类就是目前的Redis操作方法类，让这个类在不需要任何修改下，就可以实现调用集群A和集群B的数据服务。</p><p>并且这里还有一点非常重要，由于集群A和集群B在部分方法提供上是不同的，因此需要做一个接口适配，而这个适配类就相当于工厂中的工厂，用于创建把不同的服务抽象为统一的接口做相同的业务。</p><h3 id="抽象工厂模型结构"><a href="#抽象工厂模型结构" class="headerlink" title="抽象工厂模型结构"></a>抽象工厂模型结构</h3><p><img src="/2023/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20240613141858155-17182595389675.png" alt="image-20240613141858155"></p><p>工程中涉及的部分核心功能代码，如下;</p><ul><li><code>Icacheadapter</code>，定义了适配接口，分别包装两个集群中差异化的接口名称。<code>EGMCacheAdapter</code>、<code>IIRCacheAdapter</code></li><li><code>JDKProxy</code>、<code>JDKInvocationHandler</code>，是代理类的定义和实现，这部分也就是抽象工厂的另外一种实现方式。通过这样的方式可以很好的把原有操作Redis的方法进行代理操作，通过控制不同的入参对象，控制缓存的使用。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="定义适配接口"><a href="#定义适配接口" class="headerlink" title="定义适配接口"></a>定义适配接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类的主要作用是让所有集群的提供方，能在统一的方法名称下进行操作。也方面后续的拓展。</p><h4 id="实现集群使用服务"><a href="#实现集群使用服务" class="headerlink" title="实现集群使用服务"></a>实现集群使用服务</h4><p><strong>EGMCacheAdapter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EGMCacheAdapter</span> <span class="keyword">implements</span> <span class="title class_">ICacheAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EGM</span> <span class="variable">egm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EGM</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> egm.gain(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        egm.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        egm.setEx(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        egm.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IIRCacheAdapter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IIRCacheAdapter</span> <span class="keyword">implements</span> <span class="title class_">ICacheAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">IIR</span> <span class="variable">iir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IIR</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> iir.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        iir.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        iir.setExpire(key, value, timeout, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        iir.del(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两个实现都非常容易，在统一方法名下进行包装。</p><h4 id="定义抽象工程代理类和实现"><a href="#定义抽象工程代理类和实现" class="headerlink" title="定义抽象工程代理类和实现"></a>定义抽象工程代理类和实现</h4><p><strong>JDKProxy</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Class&lt;T&gt; interfaceClass, ICacheAdapter cacheAdapter)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDKInvocationHandler</span>(cacheAdapter);</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] classes = interfaceClass.getInterfaces();</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(classLoader, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;classes[<span class="number">0</span>]&#125;, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要的作用就是完成代理类，同时对于使用哪个集群有外部通过入参进行传递。</p><p><strong>JDKInvocationHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICacheAdapter cacheAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JDKInvocationHandler</span><span class="params">(ICacheAdapter cacheAdapter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cacheAdapter = cacheAdapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">return</span> ICacheAdapter.class.getMethod(method.getName(), ClassLoaderUtils.getClazzByArgs(args)).invoke(cacheAdapter, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在代理类的实现中其实也非常简单，通过穿透进来的集群服务进行方法操作。</li><li>另外在 <code>invoke</code> 中通过使用获取方法名称反射方式，调用对应的方法功能，也就简化了整体的使用。</li><li>到这我们就已经将整体的功能实现完成了，关于抽象工厂这部分也可以使用非代理的方式进行实现。</li></ul><h4 id="测试验证-1"><a href="#测试验证-1" class="headerlink" title="测试验证"></a>测试验证</h4><p>编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_CacheService</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CacheService</span> <span class="variable">proxy_EGM</span> <span class="operator">=</span> JDKProxy.getProxy(CacheServiceImpl.class, <span class="keyword">new</span> <span class="title class_">EGMCacheAdapter</span>());</span><br><span class="line">        proxy_EGM.set(<span class="string">&quot;user_name_01&quot;</span>, <span class="string">&quot;浩东&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">val01</span> <span class="operator">=</span> proxy_EGM.get(<span class="string">&quot;user_name_01&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：&quot;</span> + val01);</span><br><span class="line"></span><br><span class="line">        <span class="type">CacheService</span> <span class="variable">proxy_IIR</span> <span class="operator">=</span> JDKProxy.getProxy(CacheServiceImpl.class, <span class="keyword">new</span> <span class="title class_">IIRCacheAdapter</span>());</span><br><span class="line">        proxy_IIR.set(<span class="string">&quot;user_name_01&quot;</span>, <span class="string">&quot;浩东&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">val02</span> <span class="operator">=</span> proxy_IIR.get(<span class="string">&quot;user_name_01&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;测试结果：&quot;</span> + val02);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在测试的代码中通过传入不同的集群类型，就可以调用不同的集群下的方法。<code>JDKProxy.getproxy(CacheServiceImpl.class,new EGMCacheAdapter())</code>;</li><li>如果后续有扩展的需求，也可以按照这样的类型方式进行补充，同时对于改造上来说并没有改动原来的方法，降低了修改成本。</li></ul><p>结果</p><p><img src="/2023/10/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/image-20240613143845934-17182607274986.png" alt="image-20240613143845934"></p><ul><li>运行结果正常，这样的代码满足了这次拓展的需求，同时你的技术能力也给老板留下了深刻的印象。</li><li>研发自我能力的提升远不是外接的压力就是编写一坨坨代码的接口，如果你已经熟练了很多技能那么可以在即使紧急的情况下，也能做出完善的方案。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>抽象工厂模式，所要解决的问题就是在一个产品族，存在多个不同类型的产品(Redis集群、操作系统)情况下，接口选择的问题。而这种场景在业务开发中也是非常多见的，只不过可能有时候没有将它们抽象化出来。</li><li><code>你的代码只是被if-else埋上了!</code> 当你知道什么场景下何时可以被抽象工程优化代码，那么你的代码层级结构以及满足业务需求上，都可以得到很好的完成功能实现并提升扩展性和优雅度。那么这个设计模式满足了：单一职责、开闭原则、解耦等优点，但如果说随着业务的不断拓展，可能会造成类实现上的复杂度。但也可以说算不上缺点，因为可以随着其他设计方式的引入和代理类以及自动生成加载的方式降低此项缺点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式</title>
      <link href="/2023/09/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><p><img src="/2023/09/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/image-20240613022224355-17183516955331.png" alt="image-20240613022224355"></p><p>工厂模式又称工厂方法模式，是一种创建型设计模式，其在父类中提供一个创建对象的方法， 允许子类决定实例化对象的类型。<br>这种设计模式也是Java 开发中最常见的一种模式，它的主要意图是定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。<br>简单说就是为了提供代码结构的扩展性，屏蔽每一个功能类中的具体实现逻辑。让外部可以更加简单的只是知道调用即可，同时，这也是去掉众多 if-else 的方式。当然这可能也有一些缺点，比如需要实现的类非常多，如何去维护，怎样减低开发成本。但这些问题都可以在后续的设计模式结合使用中，逐步降低。</p><p>在工厂方法模式中，通常有四个角色：</p><ol><li>Product（抽象产品类）：定义了产品的接口，声明了产品的方法和属性。</li><li>ConcreteProduct（具体产品类）：实现了Product接口，提供了具体的产品实现。</li><li>Factory（抽象工厂类）：定义了创建产品的接口，声明了工厂方法。</li><li>ConcreteFactory（具体工厂类）：实现了Factory接口，提供了具体的工厂实现，负责创建具体的产品对象。</li></ol><p>工厂方法模式的优点：</p><ul><li>松耦合：客户端代码只需要依赖抽象工厂和抽象产品，不需要知道具体的实现类。</li><li>高扩展性：可以轻松地添加新的产品或工厂实现， 无需修改客户端代码。</li><li>更好的代码重用：可以在不同的应用场景中重用工厂和产品的实现。</li></ul><p><img src="/2023/09/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/image-20240612234820529-17182073016541.png" alt="image-20240612234820529"></p><div class="table-container"><table><thead><tr><th>序号</th><th>类型</th><th>接口</th></tr></thead><tbody><tr><td>1</td><td>优惠券</td><td>CouponResult sendCoupon(String uId, StringcouponNumber, String uuid)</td></tr><tr><td>2</td><td>实物商品</td><td>Boolean deliverGoods(DeliverReq req)</td></tr><tr><td>3</td><td>第三方爱奇艺兑换卡</td><td>void grantToken(String bindMobileNumber, String cardId)</td></tr></tbody></table></div><p>从以上接口来看有如下信息：</p><ul><li>三个接口返回类型不同，有对象类型、布尔类型、还有一个空类型。</li><li>入参不同，发放优惠券需要仿重、兑换卡需要卡ID、实物商品需要发货位置(对象中含有)。</li><li>另外可能会随着后续的业务的发展，会新增其他种商品类型。因为你所有的开发需求都是随着业务对市场的拓展而带来的。</li></ul><h2 id="if-else实现需求"><a href="#if-else实现需求" class="headerlink" title="if-else实现需求"></a>if-else实现需求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrizeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(PrizeController.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AwardRes <span class="title function_">awardToUser</span><span class="params">(AwardReq req)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">reqJson</span> <span class="operator">=</span> JSON.toJSONString(req);</span><br><span class="line">        <span class="type">AwardRes</span> <span class="variable">awardRes</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;奖品发放开始&#123;&#125;。req:&#123;&#125;&quot;</span>, req.getuId(), reqJson);</span><br><span class="line">            <span class="comment">// 按照不同类型方法商品[1优惠券、2实物商品、3第三方兑换卡(爱奇艺)]</span></span><br><span class="line">            <span class="keyword">if</span> (req.getAwardType() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">CouponService</span> <span class="variable">couponService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CouponService</span>();</span><br><span class="line">                <span class="type">CouponResult</span> <span class="variable">couponResult</span> <span class="operator">=</span> couponService.sendCoupon(req.getuId(), req.getAwardNumber(), req.getBizId());</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;0000&quot;</span>.equals(couponResult.getCode())) &#123;</span><br><span class="line">                    awardRes = <span class="keyword">new</span> <span class="title class_">AwardRes</span>(<span class="string">&quot;0000&quot;</span>, <span class="string">&quot;发放成功&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    awardRes = <span class="keyword">new</span> <span class="title class_">AwardRes</span>(<span class="string">&quot;0001&quot;</span>, couponResult.getInfo());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.getAwardType() == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GoodsService</span>();</span><br><span class="line">                <span class="type">DeliverReq</span> <span class="variable">deliverReq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeliverReq</span>();</span><br><span class="line">                deliverReq.setUserName(queryUserName(req.getuId()));</span><br><span class="line">                deliverReq.setUserPhone(queryUserPhoneNumber(req.getuId()));</span><br><span class="line">                deliverReq.setSku(req.getAwardNumber());</span><br><span class="line">                deliverReq.setOrderId(req.getBizId());</span><br><span class="line">                deliverReq.setConsigneeUserName(req.getExtMap().get(<span class="string">&quot;consigneeUserName&quot;</span>));</span><br><span class="line">                deliverReq.setConsigneeUserPhone(req.getExtMap().get(<span class="string">&quot;consigneeUserPhone&quot;</span>));</span><br><span class="line">                deliverReq.setConsigneeUserAddress(req.getExtMap().get(<span class="string">&quot;consigneeUserAddress&quot;</span>));</span><br><span class="line">                <span class="type">Boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> goodsService.deliverGoods(deliverReq);</span><br><span class="line">                <span class="keyword">if</span> (isSuccess) &#123;</span><br><span class="line">                    awardRes = <span class="keyword">new</span> <span class="title class_">AwardRes</span>(<span class="string">&quot;0000&quot;</span>, <span class="string">&quot;发放成功&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    awardRes = <span class="keyword">new</span> <span class="title class_">AwardRes</span>(<span class="string">&quot;0001&quot;</span>, <span class="string">&quot;发放失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.getAwardType() == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">bindMobileNumber</span> <span class="operator">=</span> queryUserPhoneNumber(req.getuId());</span><br><span class="line">                <span class="type">IQiYiCardService</span> <span class="variable">iQiYiCardService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IQiYiCardService</span>();</span><br><span class="line">                iQiYiCardService.grantToken(bindMobileNumber, req.getAwardNumber());</span><br><span class="line">                awardRes = <span class="keyword">new</span> <span class="title class_">AwardRes</span>(<span class="string">&quot;0000&quot;</span>, <span class="string">&quot;发放成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">&quot;奖品发放完成&#123;&#125;。&quot;</span>, req.getuId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;奖品发放失败&#123;&#125;。req:&#123;&#125;&quot;</span>, req.getuId(), reqJson, e);</span><br><span class="line">            awardRes = <span class="keyword">new</span> <span class="title class_">AwardRes</span>(<span class="string">&quot;0001&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> awardRes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">queryUserName</span><span class="params">(String uId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;浩东&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">queryUserPhoneNumber</span><span class="params">(String uId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;13000001221&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if-else实现出来的代码目前不会有问题，但经过几次迭代后，研发将变得十分痛苦。重构成本高需要理清之前每一个接口的使用，测试回归验证时间长。</p><h2 id="工厂模式优化代码"><a href="#工厂模式优化代码" class="headerlink" title="工厂模式优化代码"></a>工厂模式优化代码</h2><p>接下来使用工厂方法模式来进行代码优化，也算是一次很小的重构。整理重构会你会发现代码结构清晰了、也具备了下次新增业务需求的扩展性。但在实际使用中还会对此进行完善，目前的只是抽离出最核心的部分体现到你面前，方便学习。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="定义发奖接口"><a href="#定义发奖接口" class="headerlink" title="定义发奖接口"></a>定义发奖接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICommodity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendCommodity</span><span class="params">(String uId, String commodityId, String bizId, Map&lt;String, String&gt; extMap)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>所有的奖品无论是实物、虚拟还是第三方，都需要通过我们的程序实现此接口进行处理，以保证最终入参出参的统一性。</li><li>接口的入参包括;用户ID、奖品ID 、业务ID 以及 扩展字段 用于处理发放实物商品时的收获地址。</li></ul><h4 id="实现奖品发放接口"><a href="#实现奖品发放接口" class="headerlink" title="实现奖品发放接口"></a>实现奖品发放接口</h4><h5 id="优惠券"><a href="#优惠券" class="headerlink" title="优惠券"></a>优惠券</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponCommodityService</span> <span class="keyword">implements</span> <span class="title class_">ICommodity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CouponCommodityService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">CouponService</span> <span class="variable">couponService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CouponService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCommodity</span><span class="params">(String uId, String commodityId, String bizId, Map&lt;String, String&gt; extMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CouponResult</span> <span class="variable">couponResult</span> <span class="operator">=</span> couponService.sendCoupon(uId, commodityId, bizId);</span><br><span class="line">        logger.info(<span class="string">&quot;请求参数[优惠券] =&gt; uId：&#123;&#125; commodityId：&#123;&#125; bizId：&#123;&#125; extMap：&#123;&#125;&quot;</span>, uId, commodityId, bizId, JSON.toJSON(extMap));</span><br><span class="line">        logger.info(<span class="string">&quot;测试结果[优惠券]：&#123;&#125;&quot;</span>, JSON.toJSON(couponResult));</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;0000&quot;</span>.equals(couponResult.getCode())) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(couponResult.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实物商品"><a href="#实物商品" class="headerlink" title="实物商品"></a>实物商品</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsCommodityService</span> <span class="keyword">implements</span> <span class="title class_">ICommodity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(GoodsCommodityService.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">GoodsService</span> <span class="variable">goodsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GoodsService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCommodity</span><span class="params">(String uId, String commodityId, String bizId, Map&lt;String, String&gt; extMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DeliverReq</span> <span class="variable">deliverReq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeliverReq</span>();</span><br><span class="line">        deliverReq.setUserName(queryUserName(uId));</span><br><span class="line">        deliverReq.setUserPhone(queryUserPhoneNumber(uId));</span><br><span class="line">        deliverReq.setSku(commodityId);</span><br><span class="line">        deliverReq.setOrderId(bizId);</span><br><span class="line">        deliverReq.setConsigneeUserName(extMap.get(<span class="string">&quot;consigneeUserName&quot;</span>));</span><br><span class="line">        deliverReq.setConsigneeUserPhone(extMap.get(<span class="string">&quot;consigneeUserPhone&quot;</span>));</span><br><span class="line">        deliverReq.setConsigneeUserAddress(extMap.get(<span class="string">&quot;consigneeUserAddress&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">isSuccess</span> <span class="operator">=</span> goodsService.deliverGoods(deliverReq);</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;请求参数[优惠券] =&gt; uId：&#123;&#125; commodityId：&#123;&#125; bizId：&#123;&#125; extMap：&#123;&#125;&quot;</span>, uId, commodityId, bizId, JSON.toJSON(extMap));</span><br><span class="line">        logger.info(<span class="string">&quot;测试结果[优惠券]：&#123;&#125;&quot;</span>, isSuccess);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isSuccess) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;实物商品发放失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">queryUserName</span><span class="params">(String uId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;浩东&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">queryUserPhoneNumber</span><span class="params">(String uId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;13000001221&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三方兑换卡"><a href="#第三方兑换卡" class="headerlink" title="第三方兑换卡"></a>第三方兑换卡</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CardCommodityService</span> <span class="keyword">implements</span> <span class="title class_">ICommodity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CardCommodityService.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟注入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">IQiYiCardService</span> <span class="variable">iQiYiCardService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IQiYiCardService</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCommodity</span><span class="params">(String uId, String commodityId, String bizId, Map&lt;String, String&gt; extMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">mobile</span> <span class="operator">=</span> queryUserMobile(uId);</span><br><span class="line">        iQiYiCardService.grantToken(mobile, bizId);</span><br><span class="line">        logger.info(<span class="string">&quot;请求参数[爱奇艺兑换卡] =&gt; uId：&#123;&#125; commodityId：&#123;&#125; bizId：&#123;&#125; extMap：&#123;&#125;&quot;</span>, uId, commodityId, bizId, JSON.toJSON(extMap));</span><br><span class="line">        logger.info(<span class="string">&quot;测试结果[爱奇艺兑换卡]：success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">queryUserMobile</span><span class="params">(String uId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;15200101232&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从上面可以看到每一种奖品的实现都包括在自己的类中，新增、修改或者删除都不会影响其他奖品功能的测试，降低回归测试的可能。</li><li>后续在新增的奖品只需要按照此结构进行填充即可，非常易于维护和扩展。</li><li>在统一了入参以及出参后，调用方不在需要关心奖品发放的内部逻辑，按照统一的方式即可处理。</li></ul><h4 id="创建商店工厂"><a href="#创建商店工厂" class="headerlink" title="创建商店工厂"></a>创建商店工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ICommodity <span class="title function_">getCommodityService</span><span class="params">(Integer commodityType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == commodityType) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == commodityType) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CouponCommodityService</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> == commodityType) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GoodsCommodityService</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">3</span> == commodityType) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CardCommodityService</span>();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不存在的商品服务类型&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里我们定义了一个商店的工厂类，在里面按照类型实现各种商品的服务。可以非常干净整洁的处理你的代码，后续新增的商品在这里扩展即可。如果你不喜欢 if 判断，也可以使用 switch 或者 map 配置结构，会让代码更加干净。</li><li>另外很多代码检查软件和编码要求，不喜欢if语句后面不写扩展，这里是为了更加干净的向你体现逻辑。在实际的业务编码中可以添加括号。</li></ul><h4 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_commodity</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">StoreFactory</span> <span class="variable">storeFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoreFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 优惠券</span></span><br><span class="line">        <span class="type">ICommodity</span> <span class="variable">commodityService_1</span> <span class="operator">=</span> storeFactory.getCommodityService(<span class="number">1</span>);</span><br><span class="line">        commodityService_1.sendCommodity(<span class="string">&quot;10001&quot;</span>, <span class="string">&quot;EGM1023938910232121323432&quot;</span>, <span class="string">&quot;791098764902132&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 实物商品</span></span><br><span class="line">        <span class="type">ICommodity</span> <span class="variable">commodityService_2</span> <span class="operator">=</span> storeFactory.getCommodityService(<span class="number">2</span>);</span><br><span class="line">        Map&lt;String,String&gt; extMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();</span><br><span class="line">        extMap.put(<span class="string">&quot;consigneeUserName&quot;</span>, <span class="string">&quot;谢飞机&quot;</span>);</span><br><span class="line">        extMap.put(<span class="string">&quot;consigneeUserPhone&quot;</span>, <span class="string">&quot;15200292123&quot;</span>);</span><br><span class="line">        extMap.put(<span class="string">&quot;consigneeUserAddress&quot;</span>, <span class="string">&quot;吉林省.长春市.双阳区.XX街道.檀溪苑小区.#18-2109&quot;</span>);</span><br><span class="line"></span><br><span class="line">        commodityService_2.sendCommodity(<span class="string">&quot;10001&quot;</span>,<span class="string">&quot;9820198721311&quot;</span>,<span class="string">&quot;1023000020112221113&quot;</span>,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;() &#123;&#123;</span><br><span class="line">            put(<span class="string">&quot;consigneeUserName&quot;</span>, <span class="string">&quot;谢飞机&quot;</span>);</span><br><span class="line">            put(<span class="string">&quot;consigneeUserPhone&quot;</span>, <span class="string">&quot;15200292123&quot;</span>);</span><br><span class="line">            put(<span class="string">&quot;consigneeUserAddress&quot;</span>, <span class="string">&quot;吉林省.长春市.双阳区.XX街道.檀溪苑小区.#18-2109&quot;</span>);</span><br><span class="line">        &#125;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 第三方兑换卡(爱奇艺)</span></span><br><span class="line">        <span class="type">ICommodity</span> <span class="variable">commodityService_3</span> <span class="operator">=</span> storeFactory.getCommodityService(<span class="number">3</span>);</span><br><span class="line">        commodityService_3.sendCommodity(<span class="string">&quot;10001&quot;</span>,<span class="string">&quot;AQY1xjkUodl8LO975GdfrYUio&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">模拟发放优惠券一张：<span class="number">10001</span><span class="punctuation">,</span>EGM1023938910232121323432<span class="punctuation">,</span><span class="number">791098764902132</span></span><br><span class="line"><span class="number">2024</span><span class="number">-06</span><span class="number">-13</span> <span class="number">00</span><span class="punctuation">:</span><span class="number">44</span><span class="punctuation">:</span><span class="number">43.751</span>INFOmain(CouponCommodityService.java<span class="punctuation">:</span><span class="number">20</span>)|请求参数<span class="punctuation">[</span>优惠券<span class="punctuation">]</span> =&gt; uId：<span class="number">10001</span> commodityId：EGM1023938910232121323432 bizId：<span class="number">791098764902132</span> extMap：<span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="number">2024</span><span class="number">-06</span><span class="number">-13</span> <span class="number">00</span><span class="punctuation">:</span><span class="number">44</span><span class="punctuation">:</span><span class="number">43.782</span>INFOmain(CouponCommodityService.java<span class="punctuation">:</span><span class="number">21</span>)|测试结果<span class="punctuation">[</span>优惠券<span class="punctuation">]</span>：<span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="string">&quot;0000&quot;</span><span class="punctuation">,</span><span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="string">&quot;发放成功&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">模拟发货实物商品一个：<span class="punctuation">&#123;</span><span class="attr">&quot;consigneeUserAddress&quot;</span><span class="punctuation">:</span><span class="string">&quot;吉林省.长春市.双阳区.XX街道.檀溪苑小区.#18-2109&quot;</span><span class="punctuation">,</span><span class="attr">&quot;consigneeUserName&quot;</span><span class="punctuation">:</span><span class="string">&quot;谢飞机&quot;</span><span class="punctuation">,</span><span class="attr">&quot;consigneeUserPhone&quot;</span><span class="punctuation">:</span><span class="string">&quot;15200292123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;orderId&quot;</span><span class="punctuation">:</span><span class="string">&quot;1023000020112221113&quot;</span><span class="punctuation">,</span><span class="attr">&quot;sku&quot;</span><span class="punctuation">:</span><span class="string">&quot;9820198721311&quot;</span><span class="punctuation">,</span><span class="attr">&quot;userName&quot;</span><span class="punctuation">:</span><span class="string">&quot;花花&quot;</span><span class="punctuation">,</span><span class="attr">&quot;userPhone&quot;</span><span class="punctuation">:</span><span class="string">&quot;15200101232&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="number">2024</span><span class="number">-06</span><span class="number">-13</span> <span class="number">00</span><span class="punctuation">:</span><span class="number">44</span><span class="punctuation">:</span><span class="number">43.782</span>INFOmain(GoodsCommodityService.java<span class="punctuation">:</span><span class="number">30</span>)|请求参数<span class="punctuation">[</span>优惠券<span class="punctuation">]</span> =&gt; uId：<span class="number">10001</span> commodityId：<span class="number">9820198721311</span> bizId：<span class="number">1023000020112221113</span> extMap：<span class="punctuation">&#123;</span><span class="attr">&quot;consigneeUserName&quot;</span><span class="punctuation">:</span><span class="string">&quot;谢飞机&quot;</span><span class="punctuation">,</span><span class="attr">&quot;consigneeUserAddress&quot;</span><span class="punctuation">:</span><span class="string">&quot;吉林省.长春市.双阳区.XX街道.檀溪苑小区.#18-2109&quot;</span><span class="punctuation">,</span><span class="attr">&quot;consigneeUserPhone&quot;</span><span class="punctuation">:</span><span class="string">&quot;15200292123&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="number">2024</span><span class="number">-06</span><span class="number">-13</span> <span class="number">00</span><span class="punctuation">:</span><span class="number">44</span><span class="punctuation">:</span><span class="number">43.782</span>INFOmain(GoodsCommodityService.java<span class="punctuation">:</span><span class="number">31</span>)|测试结果<span class="punctuation">[</span>优惠券<span class="punctuation">]</span>：<span class="literal"><span class="keyword">true</span></span></span><br><span class="line">模拟发放爱奇艺会员卡一张：<span class="number">15200101232</span>，<span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="number">2024</span><span class="number">-06</span><span class="number">-13</span> <span class="number">00</span><span class="punctuation">:</span><span class="number">44</span><span class="punctuation">:</span><span class="number">43.782</span>INFOmain(CardCommodityService.java<span class="punctuation">:</span><span class="number">21</span>)|请求参数<span class="punctuation">[</span>爱奇艺兑换卡<span class="punctuation">]</span> =&gt; uId：<span class="number">10001</span> commodityId：AQY1xjkUodl8LO975GdfrYUio bizId：<span class="literal"><span class="keyword">null</span></span> extMap：<span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="number">2024</span><span class="number">-06</span><span class="number">-13</span> <span class="number">00</span><span class="punctuation">:</span><span class="number">44</span><span class="punctuation">:</span><span class="number">43.782</span>INFOmain(CardCommodityService.java<span class="punctuation">:</span><span class="number">22</span>)|测试结果<span class="punctuation">[</span>爱奇艺兑换卡<span class="punctuation">]</span>：success</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>从上到下的优化来看，工厂方法模式并不复杂，甚至这样的开发结构在你有所理解后，会发现更加简单了。</li><li>那么这样的开发的好处知道后，也可以总结出来它的优点; 避免创建者与具体的产品逻辑耦合 、 满足单一职责，每一个业务逻辑实现都在所属自己的类中完成 、 满足开闭原则，无需更改使用调用方就可以在程序中引入新的产品类型。但这样也会带来一些问题，比如有非常多的奖品类型，那么实现的子类会极速扩张。因此也需要使用其他的模式进行优化，这些在后续的设计模式中会逐步涉及到。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工厂方法模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/09/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
      <url>/2023/09/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>MySQL是一种开源的关系型数据库管理系统（RDBMS）</p><h2 id="MySQL-的逻辑架构了解吗？"><a href="#MySQL-的逻辑架构了解吗？" class="headerlink" title="MySQL 的逻辑架构了解吗？"></a>MySQL 的逻辑架构了解吗？</h2><ul><li>第一层是服务器层，主要提供连接处理、授权认证、安全等功能。</li><li>第二层实现了 MySQL 核心服务功能，包括查询解析、分析、优化、缓存以及日期和时间等所有内置函数，所有跨存储引擎的功能都在这一层实现，例如存储过程、触发器、视图等。</li><li>第三层是存储引擎层，存储引擎负责 MySQL 中数据的存储和提取。服务器通过 API 与存储引擎通信，这些接口屏蔽了不同存储引擎的差异，使得差异对上层查询过程透明。除了会解析外键定义的 InnoDB 外，存储引擎不会解析 SQL，不同存储引擎之间也不会相互通信，只是简单响应上层服务器请求。</li></ul><p><img src="/2023/09/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/c929f07ee531f68c08139704001d4ff4.jpg" alt="逻辑架构"></p><h2 id="谈一谈-MySQL-的读写锁"><a href="#谈一谈-MySQL-的读写锁" class="headerlink" title="谈一谈 MySQL 的读写锁"></a>谈一谈 MySQL 的读写锁</h2><p>在处理并发读或写时，可以通过实现一个由两种类型组成的锁系统来解决问题。这两种类型的锁通常被称为共享锁和排它锁，也叫读锁和写锁。读锁是共享的，相互不阻塞，多个客户在同一时刻可以同时读取同一个资源而不相互干扰。写锁则是排他的，也就是说一个写锁会阻塞其他的写锁和读锁，确保在给定时间内只有一个用户能执行写入并防止其他用户读取正在写入的同一资源。</p><p>在实际的数据库系统中，每时每刻都在发生锁定，当某个用户在修改某一部分数据时，MySQL 会通过锁定防止其他用户读取同一数据。写锁比读锁有更高的优先级，一个写锁请求可能会被插入到读锁队列的前面，但是读锁不能插入到写锁前面。</p><h2 id="MySQL-的锁策略有什么？"><a href="#MySQL-的锁策略有什么？" class="headerlink" title="MySQL 的锁策略有什么？"></a>MySQL 的锁策略有什么？</h2><p><strong>表锁</strong>是MySQL中最基本的锁策略，并且是开销最小的策略。表锁会锁定整张表，一个用户在对表进行写操作前需要先获得写锁，这会阻塞其他用户对该表的所有读写操作。只有没有写锁时，其他读取的用户才能获取读锁，读锁之间不相互阻塞。</p><p><strong>行锁</strong>可以最大程度地支持并发，同时也带来了最大开销。InnoDB 和 XtraDB 以及一些其他存储引擎实现了行锁。行锁只在存储引擎层实现，而服务器层没有实现。</p><h2 id="数据库死锁如何解决？"><a href="#数据库死锁如何解决？" class="headerlink" title="数据库死锁如何解决？"></a>数据库死锁如何解决？</h2><p>当两个及以上的事务，双方都在等待对方释放已经持有的锁或因为加锁顺序不一致造成循环等待锁资源，就会出现“死锁”。常见的报错信息为 <code>Deadlock found when trying to get lock...</code>。</p><p>举例来说 A 事务持有 X1 锁 ，申请 X2 锁，B事务持有 X2 锁，申请 X1 锁。A 和 B 事务持有锁并且申请对方持有的锁进入循环等待，就造成了死锁。</p><p><img src="/2023/09/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/AFE68E8D486A19B26B7D54B76BD8A6DC.jpg" alt="死锁"></p><p>如上图，是右侧的四辆汽车资源请求产生了回路现象，即死循环，导致了死锁。</p><p>从死锁的定义来看，MySQL 出现死锁的几个要素为：</p><ol><li>两个或者两个以上事务</li><li>每个事务都已经持有锁并且申请新的锁</li><li>锁资源同时只能被同一个事务持有或者不兼容</li><li>事务之间因为持有锁和申请锁导致彼此循环等待</li></ol><h3 id="InnoDB-锁类型"><a href="#InnoDB-锁类型" class="headerlink" title="InnoDB 锁类型"></a>InnoDB 锁类型</h3><p>为了分析死锁，我们有必要对 InnoDB 的锁类型有一个了解。</p><p><img src="/2023/09/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/30A30663CBD02B937C956934D78D6F63.jpg" alt="锁类型"></p><p>MySQL InnoDB 引擎实现了标准的<code>行级别锁：共享锁( S lock ) 和排他锁 ( X lock )</code></p><blockquote><ol><li>不同事务可以同时对同一行记录加 S 锁。</li><li>如果一个事务对某一行记录加 X 锁，其他事务就不能加 S 锁或者 X 锁，从而导致锁等待。</li></ol></blockquote><p>如果事务 T1 持有行 r 的 S 锁，那么另一个事务 T2 请求 r 的锁时，会做如下处理:</p><blockquote><ol><li>T2 请求 S 锁立即被允许，结果 T1 T2 都持有 r 行的 S 锁</li><li>T2 请求 X 锁不能被立即允许</li></ol></blockquote><p>如果 T1 持有 r 的 X 锁，那么 T2 请求 r 的 X、S 锁都不能被立即允许，T2 必须等待 T1 释放 X 锁才可以，因为 X 锁与任何的锁都不兼容。共享锁和排他锁的兼容性如下所示：</p><p><img src="/2023/09/24/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/924A7088376A35A820369F44E82753E7.jpg" alt="兼容性"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>重试机制（Retry Mechanism）：<ul><li>当检测到死锁时，可以设置一个重试机制，让事务在一段时间后重新尝试执行。这种方法可能会多次重试，直到成功或达到最大尝试次数。</li><li>重试时可以释放已经获取的资源，重新请求锁，以避免死锁再次发生。</li></ul></li><li>超时设置（Timeouts）：<ul><li>可以为每个事务设置一个超时时间，在该时间内如果无法获取所需的锁，事务将被中止。</li><li>超时设置可以防止事务无限期地等待锁，但可能会导致事务被中止，需要谨慎设置超时值。</li></ul></li><li>死锁检测和回滚（Deadlock Detection and Rollback）：<ul><li>数据库系统可以周期性地检测死锁的发生，一旦检测到死锁，系统会选择一个或多个事务进行回滚，以解除死锁。</li><li>通常，系统会选择那些最少影响的事务进行回滚，以最小化数据丢失。</li></ul></li><li>锁粒度调整（Lock Granularity Adjustment）：<ul><li>调整事务中锁的粒度，以减少死锁的可能性。例如，将表级锁改为行级锁，或者反之，根据具体情况来选择最合适的锁粒度。</li></ul></li><li>锁等待图（Lock Wait Graph）：<ul><li>使用锁等待图来分析和监控锁的等待关系，以帮助识别和解决死锁问题。</li><li>一旦发现死锁，可以通过中断一个或多个事务来打破死锁。</li></ul></li><li>事务顺序化（Transaction Serialization）：<ul><li>将一部分并发操作转换成串行执行，以避免死锁。这可能会降低性能，但可以确保数据的一致性。</li></ul></li><li>设计良好的应用程序：<ul><li>在应用程序级别，可以通过设计良好的事务管理和锁定策略来减少死锁的发生。确保事务按照相同的顺序请求锁，可以减少死锁的概率。</li></ul></li></ul><h2 id="事务是什么"><a href="#事务是什么" class="headerlink" title="事务是什么?"></a>事务是什么?</h2><p>事务是一组原子性的 SQL 查询，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。也就是说事务内的语句要么全部执行成功，要么全部执行失败。</p><h2 id="事务有什么特性？"><a href="#事务有什么特性？" class="headerlink" title="事务有什么特性？"></a>事务有什么特性？</h2><h3 id="原子性-atomicity"><a href="#原子性-atomicity" class="headerlink" title="原子性 atomicity"></a><strong>原子性 atomicity</strong></h3><p>一个事务在逻辑上是必须不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说不可能只执行其中的一部分。</p><h3 id="一致性-consistency"><a href="#一致性-consistency" class="headerlink" title="一致性 consistency"></a><strong>一致性 consistency</strong></h3><p>数据库总是从一个一致性的状态转换到另一个一致性的状态。</p><h3 id="隔离性-isolation"><a href="#隔离性-isolation" class="headerlink" title="隔离性 isolation"></a><strong>隔离性 isolation</strong></h3><p>针对并发事务而言，隔离性就是要隔离并发运行的多个事务之间的相互影响，一般来说一个事务所做的修改在最终提交以前，对其他事务是不可见的。</p><h3 id="持久性-durability"><a href="#持久性-durability" class="headerlink" title="持久性 durability"></a><strong>持久性 durability</strong></h3><p>一旦事务提交成功，其修改就会永久保存到数据库中，此时即使系统崩溃，修改的数据也不会丢失。</p><h2 id="MySQL-的隔离级别有哪些？"><a href="#MySQL-的隔离级别有哪些？" class="headerlink" title="MySQL 的隔离级别有哪些？"></a>MySQL 的隔离级别有哪些？</h2><h3 id="未提交读-READ-UNCOMMITTED"><a href="#未提交读-READ-UNCOMMITTED" class="headerlink" title="未提交读 READ UNCOMMITTED"></a><strong>未提交读 READ UNCOMMITTED</strong></h3><p>在该级别事务中的修改即使没有被提交，对其他事务也是可见的。事务可以读取其他事务修改完但未提交的数据，这种问题称为脏读。这个级别还会导致不可重复读和幻读，性能没有比其他级别好很多，很少使用。</p><h3 id="提交读-READ-COMMITTED"><a href="#提交读-READ-COMMITTED" class="headerlink" title="提交读 READ COMMITTED"></a><strong>提交读 READ COMMITTED</strong></h3><p>多数数据库系统默认的隔离级别。提交读满足了隔离性的简单定义：一个事务开始时只能”看见”已经提交的事务所做的修改。换句话说，一个事务从开始直到提交之前的任何修改对其他事务都是不可见的。也叫不可重复读，因为两次执行同样的查询可能会得到不同结果。</p><h3 id="可重复读-REPEATABLE-READ（MySQL默认的隔离级别）"><a href="#可重复读-REPEATABLE-READ（MySQL默认的隔离级别）" class="headerlink" title="可重复读 REPEATABLE READ（MySQL默认的隔离级别）"></a><strong>可重复读 REPEATABLE READ</strong>（MySQL默认的隔离级别）</h3><p>可重复读解决了不可重复读的问题，保证了在同一个事务中多次读取同样的记录结果一致。但还是无法解决幻读，所谓幻读指的是当某个事务在读取某个范围内的记录时，会产生幻行。InnoDB 存储引擎通过多版本并发控制MVCC 解决幻读的问题。</p><h3 id="可串行化-SERIALIZABLE"><a href="#可串行化-SERIALIZABLE" class="headerlink" title="可串行化 SERIALIZABLE"></a><strong>可串行化 SERIALIZABLE</strong></h3><p>最高的隔离级别，通过强制事务串行执行，避免幻读。可串行化会在读取的每一行数据上都加锁，可能导致大量的超时和锁争用的问题。实际应用中很少用到这个隔离级别，只有非常需要确保数据一致性且可以接受没有并发的情况下才考虑该级别。</p><h2 id="MVCC-是什么？"><a href="#MVCC-是什么？" class="headerlink" title="MVCC 是什么？"></a>MVCC 是什么？</h2><p>MVCC 是多版本并发控制，在很多情况下避免加锁，大都实现了非阻塞的读操作，写操作也只锁定必要的行。</p><p>InnoDB 的MVCC 通过在每行记录后面保存两个隐藏的列来实现，这两个列一个保存了行的创建时间，一个保存行的过期时间间。不过存储的不是实际的时间值而是系统版本号，每开始一个新的事务系统版本号都会自动递增，事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。</p><p>MVCC 只能在 <code>READ COMMITTED</code> 和 <code>REPEATABLE READ</code> 两个隔离级别下工作，因为 <code>READ UNCOMMITTED</code> 总是读取最新的数据行，而不是符合当前事务版本的数据行，而 <code>SERIALIZABLE</code> 则会对所有读取的行都加锁。</p><h2 id="谈一谈-InnoDB"><a href="#谈一谈-InnoDB" class="headerlink" title="谈一谈 InnoDB"></a>谈一谈 InnoDB</h2><p>InnoDB 是 MySQL 的默认事务型引擎，用来处理大量短期事务。InnoDB 的性能和自动崩溃恢复特性使得它在非事务型存储需求中也很流行，除非有特别原因否则应该优先考虑 InnoDB。</p><p>InnoDB 的数据存储在表空间中，表空间由一系列数据文件组成。MySQL4.1 后 InnoDB 可以将每个表的数据和索引放在单独的文件中。</p><p>InnoDB 采用 MVCC 来支持高并发，并且实现了四个标准的隔离级别。其默认级别是 <code>REPEATABLE READ</code>，并通过间隙锁策略防止幻读，间隙锁使 InnoDB 不仅仅锁定查询涉及的行，还会对索引中的间隙进行锁定防止幻行的插入。</p><p>InnoDB 表是基于聚簇索引建立的，InnoDB 的索引结构和其他存储引擎有很大不同，聚簇索引对主键查询有很高的性能，不过它的二级索引中必须包含主键列，所以如果主键很大的话其他所有索引都会很大，因此如果表上索引较多的话主键应当尽可能小。</p><p>InnoDB 的存储格式是平立的，可以将数据和索引文件从一个平台复制到另一个平台。</p><p>InnoDB 内部做了很多优化，包括从磁盘读取数据时采用的可预测性预读，能够自动在内存中创建加速读操作的自适应哈希索引，以及能够加速插入操作的插入缓冲区等。</p><h2 id="谈一谈-MyISAM"><a href="#谈一谈-MyISAM" class="headerlink" title="谈一谈 MyISAM"></a>谈一谈 MyISAM</h2><p>MySQL5.1及之前，MyISAM 是默认存储引擎，MyISAM 提供了大量的特性，包括全文索引、压缩、空间函数等，但不支持事务和行锁，最大的缺陷就是崩溃后无法安全恢复。对于只读的数据或者表比较小、可以忍受修复操作的情况仍然可以使用 MyISAM。</p><p>MyISAM 将表存储在数据文件和索引文件中，分别以 <code>.MYD</code> 和 <code>.MYI</code> 作为扩展名。MyISAM 表可以包含动态或者静态行，MySQL 会根据表的定义决定行格式。MyISAM 表可以存储的行记录数一般受限于可用磁盘空间或者操作系统中单个文件的最大尺寸。</p><p>MyISAM 对整张表进行加锁，读取时会对需要读到的所有表加共享锁，写入时则对表加排它锁。但是在表有读取查询的同时，也支持并发往表中插入新的记录。</p><p>对于MyISAM 表，MySQL 可以手动或自动执行检查和修复操作，这里的修复和事务恢复以及崩溃恢复的概念不同。执行表的修复可能导致一些数据丢失，而且修复操作很慢。</p><p>对于 MyISAM 表，即使是 BLOB 和 TEXT 等长字段，也可以基于其前 500 个字符创建索引。MyISAM 也支持全文索引，这是一种基于分词创建的索引，可以支持复杂的查询。</p><p>MyISAM 设计简单，数据以紧密格式存储，所以在某些场景下性能很好。MyISAM 最典型的性能问题还是表锁问题，如果所有的查询长期处于 Locked 状态，那么原因毫无疑问就是表锁。</p><h2 id="谈一谈-Memory"><a href="#谈一谈-Memory" class="headerlink" title="谈一谈 Memory"></a>谈一谈 Memory</h2><p>如果需要快速访问数据且这些数据不会被修改，重启以后丢失也没有关系，那么使用 Memory 表是非常有用的。Memory 表至少要比 MyISAM 表快一个数量级，因为所有数据都保存在内存，不需要磁盘 IO，Memory 表的结构在重启后会保留，但数据会丢失。</p><p>Memory 表适合的场景：查找或者映射表、缓存周期性聚合数据的结果、保存数据分析中产生的中间数据。</p><p>Memory 表支持哈希索引，因此查找速度极快。虽然速度很快但还是无法取代传统的基于磁盘的表，Memory 表使用表级锁，因此并发写入的性能较低。它不支持 BLOB 和 TEXT 类型的列，并且每行的长度是固定的，所以即使指定了 VARCHAR 列，实际存储时也会转换成CHAR，这可能导致部分内存的浪费。</p><p>如果 MySQL 在执行查询的过程中需要使用临时表来保持中间结果，内部使用的临时表就是 Memory 表。如果中间结果太大超出了Memory 表的限制，或者含有 BLOB 或 TEXT 字段，临时表会转换成 MyISAM 表。</p><h2 id="查询执行流程是什么？"><a href="#查询执行流程是什么？" class="headerlink" title="查询执行流程是什么？"></a>查询执行流程是什么？</h2><p>简单来说分为五步：</p><ul><li>① 客户端发送一条查询给服务器。</li><li>② 服务器先检查查询缓存，如果命中了缓存则立刻返回存储在缓存中的结果，否则进入下一阶段。</li><li>③ 服务器端进行 SQL 解析、预处理，再由优化器生成对应的执行计划。</li><li>④ MySQL 根据优化器生成的执行计划，调用存储引擎的 API 来执行查询。</li><li>⑤ 将结果返回给客户端。</li></ul><h2 id="VARCHAR-和-CHAR-的区别？"><a href="#VARCHAR-和-CHAR-的区别？" class="headerlink" title="VARCHAR 和 CHAR 的区别？"></a>VARCHAR 和 CHAR 的区别？</h2><p><strong>VARCHAR</strong> 用于存储可变字符串，是最常见的字符串数据类型。它比 CHAR 更节省空间，因为它仅使用必要的空间。VARCHAR 需要 1 或 2 个额外字节记录字符串长度，如果列的最大长度不大于 255 字节则只需要 1 字节。VARCHAR 不会删除末尾空格。</p><p>VARCHAR 适用场景：字符串列的最大长度比平均长度大很多、列的更新很少、使用了 UTF8 这种复杂字符集，每个字符都使用不同的字节数存储。</p><p><strong>CHAR</strong> 是定长的，根据定义的字符串长度分配足够的空间。CHAR 会删除末尾空格。</p><p>CHAR 适合存储很短的字符串，或所有值都接近同一个长度，例如存储密码的 MD5 值。对于经常变更的数据，CHAR 也比 VARCHAR更好，因为定长的 CHAR 不容易产生碎片。对于非常短的列，CHAR 在存储空间上也更有效率，例如用 CHAR 来存储只有 Y 和 N 的值只需要一个字节，但是 VARCHAR 需要两个字节，因为还有一个记录长度的额外字节。</p><h2 id="DATETIME-和-TIMESTAMP-的区别？"><a href="#DATETIME-和-TIMESTAMP-的区别？" class="headerlink" title="DATETIME 和 TIMESTAMP 的区别？"></a>DATETIME 和 TIMESTAMP 的区别？</h2><p><strong>DATETIME</strong> 能保存大范围的值，从 1001~9999 年，精度为秒。把日期和时间封装到了一个整数中，与时区无关，使用 8 字节存储空间。</p><p><strong>TIMESTAMP</strong> 和 UNIX 时间戳相同，只使用 4 字节的存储空间，范围比 DATETIME 小得多，只能表示 1970 ~2038 年，并且依赖于时区。</p><h2 id="索引有什么作用？"><a href="#索引有什么作用？" class="headerlink" title="索引有什么作用？"></a>索引有什么作用？</h2><p>索引也叫键，是存储引擎用于快速找到记录的一种数据结构。索引对于良好的性能很关键，尤其是当表中数据量越来越大时，索引对性能的影响愈发重要。在数据量较小且负载较低时，不恰当的索引对性能的影响可能还不明显，但数据量逐渐增大时，性能会急剧下降。</p><p>索引大大减少了服务器需要扫描的数据量、可以帮助服务器避免排序和临时表、可以将随机 IO 变成顺序 IO。但索引并不总是最好的工具，对于非常小的表，大部分情况下会采用全表扫描。对于中到大型的表，索引就非常有效。但对于特大型的表，建立和使用索引的代价也随之增长，这种情况下应该使用分区技术。</p><p>在MySQL中，首先在索引中找到对应的值，然后根据匹配的索引记录找到对应的数据行。索引可以包括一个或多个列的值，如果索引包含多个列，那么列的顺序也十分重要，因为 MySQL 只能使用索引的最左前缀。</p><h2 id="索引失效的情况有哪些？"><a href="#索引失效的情况有哪些？" class="headerlink" title="索引失效的情况有哪些？"></a>索引失效的情况有哪些？</h2><ol><li><strong>使用不等于操作符（!=）</strong>：在MySQL中，不等于操作符（!=）或非等于操作符（&lt;&gt;）会使索引失效。</li><li><strong>使用LIKE操作符</strong>：在LIKE操作符的查询条件中，如果使用了通配符（%）以外的其他字符，MySQL将无法使用索引。</li><li><strong>使用OR操作符</strong>：在WHERE子句中，如果使用了OR操作符连接多个条件，且这些条件中的列没有形成联合索引，那么索引将可能失效。</li><li><strong>使用函数或表达式</strong>：在查询中，如果对索引列使用了函数或表达式，那么MySQL将无法使用该列的索引。</li><li><strong>数据类型不一致</strong>：如果查询中的数据类型与表中的数据类型不一致，可能会导致索引失效。</li><li><strong>NULL值</strong>：如果索引列包含NULL值，并且查询没有明确处理NULL值，那么索引可能不会正常工作。</li><li><strong>索引碎片过多</strong>：如果数据库中的数据发生了大量的增删改操作，可能会导致索引碎片过多，这可能会影响查询性能，甚至可能导致索引失效。</li><li><strong>查询优化器的选择</strong>：有时候，即使索引可用，MySQL的查询优化器可能会根据其判断选择全表扫描而非使用索引。</li><li><strong>未及时更新索引</strong>：在并发插入、更新、删除操作的场景下，可能会出现刚更新的数据未及时更新到索引中的情况。</li><li><strong>锁竞争和并发控制</strong>：在高并发的场景下，如果对索引的锁竞争过大，可能会导致索引的并发控制能力下降，进而影响查询性能。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2023/09/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>策略模式（Strategy Pattern）也被称为政策模式（Policy Pattern），是在 GoF 23 种设计模式中定义了的行为型模式。</p><p>策略模式是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，使得它们可以互换，被封装起来的算法具有独立性外部不可改变其特性。</p><p>策略模式在实际的项目开发中，这个模式也比较常用。最常见的应用场景是，利用它来避免冗长的 if-else 或 switch 分支判断。不过，它的作用还不止如此。它也可以像模板模式那样，提供框架的扩展点等等。</p><h2 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h2><ul><li>环境类（StrategyContext）：策略上下文对象，维护指向具体策略的引用，通过策略接口 Strategy 与对象进行沟通。</li><li>抽象策略类（Strategy）：策略接口，定义统一的策略入口方法，留给具体策略类实现，且供 StrategyContext 调用。</li><li>具体策略类（ConcreteStrategy）：具体的策略类，实现 Strategy，提供各种不同的算法。</li></ul><p><img src="/2023/09/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/00b734920ee8d3fc72cc539cdda2d890.png" alt="类图"></p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。</li><li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。</li><li>系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节。</li><li>系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。</li><li>多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>策略模式符合开闭原则；</li><li>避免了使用多重条件语句。如 if…else…语句、switch语句；</li><li>使用策略模式可以提高算法的保密性和安全性。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>客户端必须知道所有策略，并自行决定使用那种策略；</li><li>代码中会产生非常多的策略，增加维护难度；</li><li>如果业务逻辑不是很复杂，强行使用策略模式会增加程序的复杂度。</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p> <strong>Context 环境类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持有一个具体策略的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，传入一个具体策略对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategy 具体策略对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(Strategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 策略方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInterface</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        strategy.interfaceStrategy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Strategy 抽象策略类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 策略方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interfaceStrategy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ConcreteStrategy 具体策略类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interfaceStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//相关的业务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interfaceStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//相关的业务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteStrategyC</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interfaceStrategy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//相关的业务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟业务参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">parameter</span> <span class="operator">=</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行使用A策略</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">ConcreteStrategyA</span>());</span><br><span class="line">        context1.contextInterface();</span><br><span class="line">        <span class="comment">// 执行使用B策略</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">ConcreteStrategyB</span>());</span><br><span class="line">        context2.contextInterface();</span><br><span class="line">        <span class="comment">// 执行使用C策略</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">ConcreteStrategyB</span>());</span><br><span class="line">        context3.contextInterface();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="策略模式的应用（Comparator-中的策略模式）"><a href="#策略模式的应用（Comparator-中的策略模式）" class="headerlink" title="策略模式的应用（Comparator 中的策略模式）"></a>策略模式的应用（Comparator 中的策略模式）</h2><p>JDK 中最常见的策略模式，就是 Comparator 中的策略模式。在 Arrays 类中有一个 sort() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arrays</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            sort(a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">                legacyMergeSort(a, c);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Arrays 就是一个环境角色类，这个 sort 方法可以传一个新策略让 Arrays 根据这个策略来进行排序。如下测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Integer[] data = &#123;<span class="number">12</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 实现降序排序</span></span><br><span class="line">        Arrays.sort(data, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(data)); <span class="comment">//[12, 5, 4, 3, 2, 2, 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们在调用 Arrays 的 sort 方法时，第二个参数传递的是 Comparator 接口的子实现类对象。所以 Comparator 充当的是抽象策略角色，而具体的子实现类充当的是具体策略角色。环境角色类（Arrays）应该持有抽象策略的引用来调用。那么，Arrays 类的 sort 方法到底有没有使用 Comparator 子实现类中的 compare() 方法吗？让我们继续查看 TimSort 类的 sort() 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimSort</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] a, <span class="type">int</span> lo, <span class="type">int</span> hi, Comparator&lt;? <span class="built_in">super</span> T&gt; c,</span></span><br><span class="line"><span class="params">                         T[] work, <span class="type">int</span> workBase, <span class="type">int</span> workLen)</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> c != <span class="literal">null</span> &amp;&amp; a != <span class="literal">null</span> &amp;&amp; lo &gt;= <span class="number">0</span> &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">nRemaining</span>  <span class="operator">=</span> hi - lo;</span><br><span class="line">        <span class="keyword">if</span> (nRemaining &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// Arrays of size 0 and 1 are always sorted</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// If array is small, do a &quot;mini-TimSort&quot; with no merges</span></span><br><span class="line">        <span class="keyword">if</span> (nRemaining &lt; MIN_MERGE) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">initRunLen</span> <span class="operator">=</span> countRunAndMakeAscending(a, lo, hi, c);</span><br><span class="line">            binarySort(a, lo, hi, lo + initRunLen, c);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;   </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">int</span> <span class="title function_">countRunAndMakeAscending</span><span class="params">(T[] a, <span class="type">int</span> lo, <span class="type">int</span> hi,Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> lo &lt; hi;</span><br><span class="line">        <span class="type">int</span> <span class="variable">runHi</span> <span class="operator">=</span> lo + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (runHi == hi)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find end of run, and reverse range if descending</span></span><br><span class="line">        <span class="keyword">if</span> (c.compare(a[runHi++], a[lo]) &lt; <span class="number">0</span>) &#123; <span class="comment">// Descending</span></span><br><span class="line">            <span class="keyword">while</span> (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - <span class="number">1</span>]) &lt; <span class="number">0</span>)</span><br><span class="line">                runHi++;</span><br><span class="line">            reverseRange(a, lo, runHi);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                              <span class="comment">// Ascending</span></span><br><span class="line">            <span class="keyword">while</span> (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - <span class="number">1</span>]) &gt;= <span class="number">0</span>)</span><br><span class="line">                runHi++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> runHi - lo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中最终会跑到 countRunAndMakeAscending() 这个方法中。我们可以看见，只用了 compare 方法，所以在调用 Arrays.sort 方法只传具体 compare 重写方法的类对象就行，这也是 Comparator 接口中必须要子类实现的一个方法。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2023/09/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>它确保一个类只有一个实例，并提供了一个全局访问点来访问该实例。</p><blockquote><p>属于创建模式，</p><p>单例类只能有一个实例。</p><p>单例类必须自己创建自己的唯一实例。</p><p>单例类必须给所有其他对象提供这一实例。</p></blockquote><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><ul><li>一个班级只有一个班主任。</li><li>Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</li><li>一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h3><ul><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li><li>避免对资源的多重占用（比如写文件操作）。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>要求生产唯一序列号。</li><li>WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。</li><li>创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</li></ul><blockquote><p><strong>注意事项：</strong>getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p></blockquote><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将创建一个 <em>SingleObject</em> 类。<em>SingleObject</em> 类有它的私有构造函数和本身的一个静态实例。</p><p><em>SingleObject</em> 类提供了一个静态方法，供外界获取它的静态实例。<em>SingletonPatternDemo</em> 类使用 <em>SingleObject</em> 类来获取 <em>SingleObject</em> 对象。</p><p><img src="/2023/09/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/62576915-36E0-4B67-B078-704699CA980A.jpg" alt="类图"></p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>创建一个 Singleton 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//创建 SingleObject 的一个对象</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingleObject</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//让构造函数为 private，这样该类就不会被实例化</span></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>从 singleton 类获取唯一的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonPatternDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//不合法的构造函数</span></span><br><span class="line">      <span class="comment">//编译时错误：构造函数 SingleObject() 是不可见的</span></span><br><span class="line">      <span class="comment">//SingleObject object = new SingleObject();</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取唯一可用的对象</span></span><br><span class="line">      <span class="type">SingleObject</span> <span class="variable">object</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//显示消息</span></span><br><span class="line">      object.showMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>执行程序，输出结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><h2 id="单例模式的几种实现方式"><a href="#单例模式的几种实现方式" class="headerlink" title="单例模式的几种实现方式"></a>单例模式的几种实现方式</h2><h3 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h3><div class="table-container"><table><thead><tr><th><strong>是否 Lazy 初始化</strong></th><th>是</th></tr></thead><tbody><tr><td><strong>是否多线程安全</strong></td><td><strong>否</strong></td></tr><tr><td><strong>实现难度</strong></td><td><strong>易</strong></td></tr></tbody></table></div><blockquote><p>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。</p></blockquote><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h3><div class="table-container"><table><thead><tr><th><strong>是否 Lazy 初始化</strong></th><th>是</th></tr></thead><tbody><tr><td><strong>是否多线程安全</strong></td><td><strong>是</strong></td></tr><tr><td><strong>实现难度</strong></td><td><strong>易</strong></td></tr></tbody></table></div><blockquote><p>这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。</p><ul><li>优点：第一次调用才初始化，避免内存浪费。</li><li>缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。</li></ul><p>getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。</p></blockquote><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><div class="table-container"><table><thead><tr><th><strong>是否 Lazy 初始化</strong></th><th>否</th></tr></thead><tbody><tr><td><strong>是否多线程安全</strong></td><td><strong>是</strong></td></tr><tr><td><strong>实现难度</strong></td><td><strong>易</strong></td></tr></tbody></table></div><blockquote><p>这种方式比较常用，但容易产生垃圾对象。</p><ul><li>优点：没有加锁，执行效率会提高。</li><li>缺点：类加载时就初始化，浪费内存。</li></ul><p>它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p></blockquote><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双检锁-双重校验锁（DCL，即-double-checked-locking）"><a href="#双检锁-双重校验锁（DCL，即-double-checked-locking）" class="headerlink" title="双检锁/双重校验锁（DCL，即 double-checked locking）"></a>双检锁/双重校验锁（DCL，即 double-checked locking）</h3><div class="table-container"><table><thead><tr><th><strong>是否 Lazy 初始化</strong></th><th>是</th></tr></thead><tbody><tr><td><strong>是否多线程安全</strong></td><td><strong>是</strong></td></tr><tr><td><strong>实现难度</strong></td><td><strong>较复杂</strong></td></tr><tr><td><strong>JDK 版本</strong></td><td><strong>JDK1.5</strong> <strong>起</strong></td></tr></tbody></table></div><blockquote><p>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br>getInstance() 的性能对应用程序很关键。</p></blockquote><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">                singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登记式-静态内部类"><a href="#登记式-静态内部类" class="headerlink" title="登记式/静态内部类"></a>登记式/静态内部类</h3><div class="table-container"><table><thead><tr><th><strong>是否 Lazy 初始化</strong></th><th>是</th></tr></thead><tbody><tr><td><strong>是否多线程安全</strong></td><td><strong>是</strong></td></tr><tr><td><strong>实现难度</strong></td><td><strong>一般</strong></td></tr></tbody></table></div><blockquote><p>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。<br>这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p></blockquote><h4 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><div class="table-container"><table><thead><tr><th><strong>是否 Lazy 初始化</strong></th><th>否</th></tr></thead><tbody><tr><td><strong>是否多线程安全</strong></td><td><strong>是</strong></td></tr><tr><td><strong>实现难度</strong></td><td><strong>易</strong></td></tr><tr><td><strong>JDK 版本</strong></td><td><strong>JDK1.5</strong> <strong>起</strong></td></tr></tbody></table></div><blockquote><p>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br>这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。<br>不能通过 reflection attack 来调用私有构造方法。</p></blockquote><h4 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whateverMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a><strong>经验之谈</strong></h2><p>一般情况下，不建议使用第 1 种和第 2 种懒汉方式，建议使用第 3 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2023/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p><strong>观察者模式(Observer Pattern)</strong>： 定义对象间一种一对多的依赖关系，使得当每一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。</p><p>观察者模式是一种<strong>对象行为型模式</strong>。</p><blockquote><ul><li>微信公众号，如果一个用户订阅了某个公众号，那么便会收到公众号发来的消息，那么，公众号就是『被观察者』，而用户就是『观察者』</li><li>气象站可以将每天预测到的温度、湿度、气压等以公告的形式发布给各种第三方网站，如果天气数据有更新，要能够实时的通知给第三方，这里的气象局就是『被观察者』，第三方网站就是『观察者』</li><li>MVC 模式中的模型与视图的关系也属于观察与被观察</li></ul></blockquote><p><img src="/2023/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/1.jpg" alt="调用关系"></p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul><li><strong>Subject（目标）</strong>：被观察者，它是指被观察的对象。 从类图中可以看到，类中有一个用来存放观察者对象的Vector 容器（之所以使用Vector而不使用List，是因为多线程操作时，Vector在是安全的，而List则是不安全的），这个Vector容器是被观察者类的核心，另外还有三个方法：attach方法是向这个容器中添加观察者对象；detach方法是从容器中移除观察者对象；notify方法是依次调用观察者对象的对应方法。这个角色可以是接口，也可以是抽象类或者具体的类，因为很多情况下会与其他的模式混用，所以使用抽象类的情况比较多。</li><li><strong>ConcreteSubject（具体目标）</strong>：具体目标是目标类的子类，通常它包含经常发生改变的数据，当它的状态发生改变时，向它的各个观察者发出通知。同时它还实现了在目标类中定义的抽象业务逻辑方法（如果有的话）。如果无须扩展目标类，则具体目标类可以省略。</li><li><strong>Observer（观察者）</strong>：观察者将对观察目标的改变做出反应，观察者一般定义为<strong>接口</strong>，该接口声明了更新数据的方法 <code>update()</code>，因此又称为<strong>抽象观察者</strong>。</li><li><strong>ConcreteObserver（具体观察者）</strong>：在具体观察者中维护一个指向具体目标对象的引用，它存储具体观察者的有关状态，这些状态需要和具体目标的状态保持一致；它实现了在抽象观察者 Observer 中定义的 update()方法。通常在实现时，可以调用具体目标类的 attach() 方法将自己添加到目标类的集合中或通过 detach() 方法将自己从目标类的集合中删除。</li></ul><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="/2023/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/2.jpg" alt="类图"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>1、定义观察者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、定义被观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; obs = <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(Observer obs)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obs.add(obs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delObserver</span><span class="params">(Observer obs)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.obs.remove(obs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">notifyObserver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer o: obs)&#123;</span><br><span class="line">            o.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、具体的被观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;被观察者事件发生改变&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、具体的被观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteObserver1</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;观察者1收到信息，并进行处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteObserver2</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;观察者2收到信息，并进行处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>();</span><br><span class="line">        sub.addObserver(<span class="keyword">new</span> <span class="title class_">ConcreteObserver1</span>()); <span class="comment">//添加观察者1</span></span><br><span class="line">        sub.addObserver(<span class="keyword">new</span> <span class="title class_">ConcreteObserver2</span>()); <span class="comment">//添加观察者2</span></span><br><span class="line">        sub.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">被观察者事件发生改变</span><br><span class="line">观察者1收到信息，并进行处理</span><br><span class="line">观察者2收到信息，并进行处理</span><br></pre></td></tr></table></figure><p>通过运行结果可以看到，我们只调用了 <code>Subject</code> 的方法，但同时两个观察者的相关方法都被调用了。仔细看一下代码，其实很简单，就是在 <code>Subject</code> 类中关联一下 <code>Observer</code> 类，并且在 <code>doSomething()</code> 方法中遍历一下 <code>Observer</code> 的 <code>update()</code> 方法就行了。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系</li><li>目标与观察者之间建立了一套触发机制</li><li>支持广播通信</li><li>符合“开闭原则”的要求</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用</li><li>当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率</li></ul><h2 id="JDK中的观察者模式"><a href="#JDK中的观察者模式" class="headerlink" title="JDK中的观察者模式"></a>JDK中的观察者模式</h2><p>观察者模式在 Java 语言中的地位非常重要。在 JDK 的 java.util 包中，提供了 Observable 类以及 Observer 接口，它们构成了 JDK 对观察者模式的支持（可以去查看下源码，写的比较严谨）。但是，在 Java9 被弃用了。</p><h2 id="Spring中的观察者模式"><a href="#Spring中的观察者模式" class="headerlink" title="Spring中的观察者模式"></a>Spring中的观察者模式</h2><h4 id="1-事件（ApplicationEvent）"><a href="#1-事件（ApplicationEvent）" class="headerlink" title="1. 事件（ApplicationEvent）"></a><strong>1. 事件（ApplicationEvent）</strong></h4><p>ApplicationEvent 是所有事件对象的父类。ApplicationEvent 继承自 jdk 的 EventObject, 所有的事件都需要继承 ApplicationEvent, 并且通过 source 得到事件源。</p><p>下列描述了Spring提供的内置事件：</p><ul><li>ContextRefreshedEvent：事件发布在 ApplicationContext 初始化或刷新时（例如：通过在 ConfigurableApplicationContext 接口使用refresh()方法）。这里,“初始化”意味着所有 bean 加载，post-processor bean 被检测到并且激活,单例预先实例化，ApplicationContext 对象可以使用了。只要上下文没有关闭,可以触发多次刷新, ApplicationContext 提供了一种可选择的支持这种“热”刷新。例如：XmlWebApplicationContext 支持热刷新,但 GenericApplicationContext 并非如此。具体是在 AbstractApplicationContext 的 finishRefresh() 方法中。</li><li>ContextStartedEvent：事件发布在 ApplicationContext 开始使用 ConfigurableApplicationContext 接口 start() 方法。这里,“开始”意味着所有生命周期 bean 接收到一个明确的起始信号。通常,这个信号用于明确停止后重新启动,但它也可以用于启动组件没有被配置为自动运行（例如：组件还没有开始初始化）。</li><li>ContextStoppedEvent：事件发布在 ApplicationContext 停止时通过使用 ConfigurableApplicationContext 接口上的 stop() 方法。在这里,“停止”意味着所有生命周期bean接收一个显式的停止信号。停止上下文可以通过重新调用start()方法。</li><li>ContextClosedEvent：事件发布在 ApplicationContext 关闭时通过关闭 ConfigurableApplicationContext 接口()方法。这里,“封闭”意味着所有单例 bean 被摧毁。一个封闭的环境达到生命的终结。它不能刷新或重启。</li><li>RequestHandledEvent：一个特定的web事件告诉所有能处理HTTP请求的bean 。这个事件是在请求完成后发布的。这个事件只适用于使用 Spring 的 DispatcherServlet 的web应用程序。</li></ul><h4 id="2-事件监听（ApplicationListener）"><a href="#2-事件监听（ApplicationListener）" class="headerlink" title="2. 事件监听（ApplicationListener）"></a><strong>2. 事件监听（ApplicationListener）</strong></h4><p>ApplicationListener 事件监听器，也就是观察者。继承自 jdk 的 EventListener，该类中只有一个方法 onApplicationEvent。当监听的事件发生后该方法会被执行。</p><h4 id="3-事件发布（ApplicationContext）"><a href="#3-事件发布（ApplicationContext）" class="headerlink" title="3. 事件发布（ApplicationContext）"></a><strong>3. 事件发布（ApplicationContext）</strong></h4><p>ApplicationContext 是 Spring 中的核心容器，在事件监听中 ApplicationContext 可以作为事件的发布者，也就是事件源。因为 ApplicationContext 继承自 ApplicationEventPublisher。在 ApplicationEventPublisher 中定义了事件发布的方法 — publishEvent(Object event)</p><h4 id="4-事件管理（ApplicationEventMulticaster）"><a href="#4-事件管理（ApplicationEventMulticaster）" class="headerlink" title="4. 事件管理（ApplicationEventMulticaster）"></a><strong>4. 事件管理（ApplicationEventMulticaster）</strong></h4><p>ApplicationEventMulticaster 用于事件监听器的注册和事件的广播。监听器的注册就是通过它来实现的，它的作用是把 Applicationcontext 发布的 Event 广播给它的监听器列表。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2023/09/01/%E5%AE%B9%E5%99%A8/Docker/"/>
      <url>/2023/09/01/%E5%AE%B9%E5%99%A8/Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Docker是一个开源的应用容器引擎，基于Go语言并遵从Apache2.0协议开源。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li></ul><h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><h3 id="Docker基础常用命令"><a href="#Docker基础常用命令" class="headerlink" title="Docker基础常用命令"></a>Docker基础常用命令</h3><ul><li><h5 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h5></li></ul><blockquote><p>start docker</p></blockquote><ul><li><h5 id="停止Docker"><a href="#停止Docker" class="headerlink" title="停止Docker"></a>停止Docker</h5></li></ul><blockquote><p>stop docker</p></blockquote><ul><li><h5 id="重启Docker"><a href="#重启Docker" class="headerlink" title="重启Docker"></a>重启Docker</h5></li></ul><blockquote><p>restart docker</p></blockquote><ul><li><h5 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h5></li></ul><blockquote><p>enable docker</p></blockquote><ul><li><h5 id="查看Docker状态"><a href="#查看Docker状态" class="headerlink" title="查看Docker状态"></a>查看Docker状态</h5></li></ul><blockquote><p>status docker</p></blockquote><ul><li><h5 id="查看Docker版本号"><a href="#查看Docker版本号" class="headerlink" title="查看Docker版本号"></a>查看Docker版本号</h5></li></ul><blockquote><p>docker -v</p><p>docker -version</p><p>docker info</p></blockquote><h3 id="Docker镜像常用命令"><a href="#Docker镜像常用命令" class="headerlink" title="Docker镜像常用命令"></a>Docker镜像常用命令</h3><ul><li><h5 id="查看镜像目录"><a href="#查看镜像目录" class="headerlink" title="查看镜像目录"></a>查看镜像目录</h5></li></ul><blockquote><p>docker images</p></blockquote><ul><li><h5 id="拉取镜像，不加tag就是默认版本，加上tag就是指定版本号"><a href="#拉取镜像，不加tag就是默认版本，加上tag就是指定版本号" class="headerlink" title="拉取镜像，不加tag就是默认版本，加上tag就是指定版本号"></a>拉取镜像，不加tag就是默认版本，加上tag就是指定版本号</h5></li></ul><blockquote><p>docker pull <strong>镜像名</strong>:tag</p></blockquote><ul><li><h5 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h5></li></ul><blockquote><p>docker search 镜像名</p></blockquote><ul><li><h5 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h5></li></ul><blockquote><p>docker run <strong>镜像名</strong> </p></blockquote><ul><li><h5 id="删除镜像，加-f就是删除多个，用rm就是强制删除"><a href="#删除镜像，加-f就是删除多个，用rm就是强制删除" class="headerlink" title="删除镜像，加-f就是删除多个，用rm就是强制删除"></a>删除镜像，加-f就是删除多个，用rm就是强制删除</h5></li></ul><blockquote><p>docker rmi <strong>镜像id/镜像名称</strong> ——删除一个</p><p>docker rmi -f <strong>镜像id/镜像名称</strong> ——强制删除</p><p>docker rmi -f <strong>镜像名/镜像id 镜像名/镜像id</strong> ——删除多个镜像</p><p>docker rmi -f <strong>${docker images -aq}</strong> —— 删除全部镜像</p></blockquote><ul><li><h5 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h5></li></ul><blockquote><p>docker save <strong>镜像名称/镜像id</strong> -o 镜像保存在那个位置和取重新的名称</p><p>如：docker save MySQL -o /root/test</p></blockquote><ul><li><h5 id="加载镜像"><a href="#加载镜像" class="headerlink" title="加载镜像"></a>加载镜像</h5></li></ul><blockquote><p>任何装docker的地方加载镜像保存文件，使其恢复为一个镜像</p><p>docker load -i <strong>镜像保存文件位置</strong></p></blockquote><ul><li><h5 id="清除所有没有使用的镜像"><a href="#清除所有没有使用的镜像" class="headerlink" title="清除所有没有使用的镜像"></a>清除所有没有使用的镜像</h5></li></ul><blockquote><p>docker system prune -a</p></blockquote><h3 id="Docker容器常用命令"><a href="#Docker容器常用命令" class="headerlink" title="Docker容器常用命令"></a>Docker容器常用命令</h3><ul><li><h5 id="查看正在运行的容器列表"><a href="#查看正在运行的容器列表" class="headerlink" title="查看正在运行的容器列表"></a>查看正在运行的容器列表</h5></li></ul><blockquote><p>docker ps</p></blockquote><ul><li><h5 id="查看所有容器，包含正在运行和没有运行的容器"><a href="#查看所有容器，包含正在运行和没有运行的容器" class="headerlink" title="查看所有容器，包含正在运行和没有运行的容器"></a>查看所有容器，包含正在运行和没有运行的容器</h5></li></ul><blockquote><p>docker -a</p></blockquote><ul><li><h5 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h5></li></ul><blockquote><p>docker stop 容器名称/容器id</p></blockquote><ul><li><h5 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h5></li></ul><blockquote><p>docker restart <strong>容器名称/容器id</strong></p></blockquote><ul><li><h5 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h5></li></ul><blockquote><p>docker start <strong>容器名称/容器id</strong></p></blockquote><ul><li><h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5></li></ul><blockquote><p>docker rm -f 容器名称/容器id ——删除单个容器</p><p>docker rm -f <strong>容器名称/容器id 容器名称/容器id</strong> ——删除多个容器</p><p>docker rm -f <strong>${docker ps -aq}</strong> ——删除全部容器</p></blockquote><ul><li><h5 id="运行容器详解"><a href="#运行容器详解" class="headerlink" title="运行容器详解"></a>运行容器详解</h5></li></ul><blockquote><p>docker run ——运行容器</p><p>-p ——宿主机端口：容器端口</p><p>如：<strong>-p 3307 : 3306</strong> 是把3306容器端口映射到宿主机3307端口</p><p>运行MySQL容器实例：</p><p>docker run -itd —name mysql-8 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0</p></blockquote><ul><li><h5 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h5></li></ul><blockquote><p>docker exec -it <strong>容器名称/容器id</strong> bin/bash</p><p>或</p><p>docker exec -it <strong>容器名称/容器id</strong> /bin/bash</p></blockquote><ul><li><h5 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h5></li></ul><blockquote><p>exit</p></blockquote><ul><li><h5 id="杀掉容器"><a href="#杀掉容器" class="headerlink" title="杀掉容器"></a>杀掉容器</h5></li></ul><blockquote><p>docker kill <strong>容器id/容器名称</strong></p></blockquote><ul><li><h5 id="更换容器名称"><a href="#更换容器名称" class="headerlink" title="更换容器名称"></a>更换容器名称</h5></li></ul><blockquote><p>docker rename <strong>容器id/容器名称</strong> 新容器名</p></blockquote><ul><li><h5 id="查看容器日志命令"><a href="#查看容器日志命令" class="headerlink" title="查看容器日志命令"></a>查看容器日志命令</h5></li></ul><blockquote><p>docker logs -f —tail=查询多少行 默认查询所有容器/容器名称</p></blockquote><h3 id="Docker其他常用命令"><a href="#Docker其他常用命令" class="headerlink" title="Docker其他常用命令"></a>Docker其他常用命令</h3><ul><li><h5 id="暂停容器所有进程"><a href="#暂停容器所有进程" class="headerlink" title="暂停容器所有进程"></a><strong>暂停容器所有进程</strong></h5></li></ul><blockquote><p>docker pause <strong>容器名称/容器id</strong></p></blockquote><ul><li><strong>恢复容器中所有的进程</strong></li></ul><blockquote><p>docker unpause <strong>容器名称 / 容器ID</strong></p></blockquote><ul><li><strong>创建一个新的容器但不启动它</strong></li></ul><blockquote><p>docker create [OPTIONS] IMAGE [COMMAND] [ARG…]<br>例如:nginx<br>docker create —name myrunoob nginx:latest</p></blockquote><ul><li><strong>查看docker工作目录</strong></li></ul><blockquote><p>sudo docker info |grep “docker root dir”</p></blockquote><ul><li><strong>查看docker磁盘暂用情况</strong></li></ul><blockquote><p>du -hs /var/lib/docker</p></blockquote><ul><li><strong>文件拷贝进容器</strong></li></ul><blockquote><p>docker cp <strong>容器id:/文件目录/文件名 /主机文件目录</strong></p></blockquote><ul><li><strong>查看镜像的元数据</strong></li></ul><blockquote><p>docker inspect <strong>容器id</strong></p></blockquote><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p><img src="/2023/09/01/%E5%AE%B9%E5%99%A8/Docker/image-20240514042835080-17156321167378.png" alt="image-20240514042835080"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>查看端口是否被占用，之后重启网络连接</p><p>通过管理员执行CMD或powerShell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 端口是否被占用</span><br><span class="line">netstat -ano | findstr :3306</span><br></pre></td></tr></table></figure><p>返回空白则为未被占用</p><p>重启winnat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net stop winnat</span><br><span class="line">#docker start container_name</span><br><span class="line">net start winnat</span><br></pre></td></tr></table></figure><h2 id="Windows环境通过docker安装Redis"><a href="#Windows环境通过docker安装Redis" class="headerlink" title="Windows环境通过docker安装Redis"></a>Windows环境通过docker安装Redis</h2><h3 id="拉取Redis"><a href="#拉取Redis" class="headerlink" title="拉取Redis"></a>拉取Redis</h3><p>以管理员身份运行CMD或powerShell，执行如下命令拉取Redis</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><p><img src="/2023/09/01/%E5%AE%B9%E5%99%A8/Docker/image-20240513214018760-17156076221921.png" alt="image-20240513214018760"></p><h3 id="在本地硬盘中创建Redis目录"><a href="#在本地硬盘中创建Redis目录" class="headerlink" title="在本地硬盘中创建Redis目录"></a>在本地硬盘中创建Redis目录</h3><p>在E盘中新建Redis目录，在目录下新建Conf和Data目录，分别用于挂在配置文件和存放数据持久化文件。</p><p>创建<strong>redis.conf</strong>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#密码,本地环境可不配，配置的密码务必复杂，Redis性能很高(150w/s)，弱密码很快就可以撞库破解</span><br><span class="line">#requirepass 123</span><br><span class="line">#最大连接数</span><br><span class="line">maxclients 10000</span><br><span class="line"></span><br><span class="line">#如果要外网访问，请注释掉下面，或者修改为0.0.0.0，保险起见，也可以把protected-mode设置为no</span><br><span class="line">#bind 0.0.0.0</span><br><span class="line"></span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line">#注意修改这里端口，根据你实际暴露端口情况配置</span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line"></span><br><span class="line">#注意!! 这里要把后台运行设置为no，避免docker后台运行冲突</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line">supervised no</span><br><span class="line">pidfile /docker/redis/redis.pid</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line">always-show-logo yes</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">#注意修改这里的目录为容器内目录，默认reids进来是在/data/目录</span><br><span class="line">dir /data/</span><br><span class="line"></span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line">replica-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">replica-priority 100</span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line"></span><br><span class="line">#注意修改这里的配置，yes开启持久化，no关闭持久化</span><br><span class="line">appendonly yes</span><br><span class="line"></span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line">list-compress-depth 0</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">dynamic-hz yes</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将文件存放在<strong>E:\softwares\Redis\Conf</strong>目录下</p><h3 id="构建并启动Redis容器"><a href="#构建并启动Redis容器" class="headerlink" title="构建并启动Redis容器"></a>构建并启动Redis容器</h3><p>执行如下命令构建并启动Redis容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged=true --restart=always -p 6379:6379 -v E:/softwares/Redis/Conf/redis.conf:/etc/redis/redis.conf -v E:/softwares/Redis/Data:/data --name redis7 redis:7.0 redis-server /etc/redis/redis.conf --appendonly yes</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命令解析：</p><blockquote><ul><li><code>docker run</code>：启动一个新的容器。</li><li><code>-d</code>：以后台模式运行容器。</li><li><code>--privileged=true</code>：给予容器特权模式，使容器可以访问主机上的设备和其他资源。</li><li><code>--restart=always</code>：在容器退出时自动重启。</li><li><code>-p 6379:6379</code>：将容器内的Redis端口6379映射到主机上的6379端口。</li><li><code>-v E:/softwares/Redis/Conf/redis.conf:/etc/redis/redis.conf</code>：将主机上<code>E:/softwares/Redis/Conf/redis.conf</code>文件的内容挂载到容器内的<code>/etc/redis/redis.conf</code>路径下。</li><li><code>-v E:/softwares/Redis/Data:/data</code>：将主机上<code>E:/softwares/Redis/Data</code>目录的内容挂载到容器内的<code>/data</code>路径下。</li><li>`—name redis67：为容器指定一个名称。</li><li><code>redis:7.0</code>：使用Redis镜像版本7.0创建容器。</li><li><code>redis-server /etc/redis/redis.conf --appendonly yes</code>：在容器内启动Redis服务器，使用挂载的配置文件，并设置追加写入模式。</li></ul></blockquote><p><img src="/2023/09/01/%E5%AE%B9%E5%99%A8/Docker/image-20240514000104027-17156160656625.png" alt="image-20240514000104027"></p><h2 id="Docker相关面试题"><a href="#Docker相关面试题" class="headerlink" title="Docker相关面试题"></a>Docker相关面试题</h2><h3 id="什么是Docker容器？"><a href="#什么是Docker容器？" class="headerlink" title="什么是Docker容器？"></a>什么是Docker容器？</h3><p>Docker是一种流行的开源软件平台，可简化创建、管理、运行和分发应用程序的过程。它使用容器来打包应用程序及其依赖项。也可将容器视为Docker镜像运行的实例。</p><h3 id="Docker和虚拟机有什么不同？"><a href="#Docker和虚拟机有什么不同？" class="headerlink" title="Docker和虚拟机有什么不同？"></a>Docker和虚拟机有什么不同？</h3><p>Docker是轻量级的沙盒，在其中运行的只是应用，而虚拟机中还有额外的系统。</p><blockquote><p>沙盒：也叫沙箱，在计算机安全领域中是一种安全机制，为运行的程序提供的隔离环境。</p></blockquote><h3 id="什么是DockerFile"><a href="#什么是DockerFile" class="headerlink" title="什么是DockerFile?"></a>什么是DockerFile?</h3><p>DockerFile是一个文本文件，其中包含我们需要运行以构建Docker镜像的所有命令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。Docker使用DockerFile中的指令自动构建镜像。我们可以使用<strong>docker build</strong> 用来创建顺序执行多个命令行指令的自动构建。</p><blockquote><ul><li><p>FROM ：使用 FROM 为后续的指令建立基础映像。在所有有效的 Dockerfile 中， FROM 是第一条指令。</p></li><li><p>LABEL： LABEL 指令用于组织项目映像，模块，许可等。在自动化布署方面 LABEL 也有很大用途。在 LABEL 中指定一组键值对，可用于程序化配置或布署 Docker 。</p></li><li><p>RUN： RUN 指令可在映像当前层执行任何命令并创建一个新层，用于在映像层中添加功能层，也许最来的层会依赖它。</p></li><li><p>CMD： 使用 CMD 指令为执行的容器提供默认值。在 Dockerfile 文件中，若添加多个 CMD 指令，只有最后的 CMD 指令运行。</p></li></ul></blockquote><h3 id="使用Docker-Compose时如何保证容器A先于容器B运行？"><a href="#使用Docker-Compose时如何保证容器A先于容器B运行？" class="headerlink" title="使用Docker Compose时如何保证容器A先于容器B运行？"></a>使用Docker Compose时如何保证容器A先于容器B运行？</h3><blockquote><p>Docker Compose 是一个用来定义和运行复杂应用的Docker工具。</p><p>一个使用Docker容器的应用，通常由多个容器组成，使用Docker Compose不再需要使用shell脚本来启动容器。</p><p>Compose通过一个配置文件来管理多个Docker容器。</p><p>简单理解Docker Compose是Docker的管理工具。</p></blockquote><p>Docker Compose在继续下一个容器之前不会等待容器准备就绪。</p><p>为了控制我们的执行顺序，我们开源使用“取决于”条件，在<strong>depends_on</strong>。</p><p>以下是在docker-commpose.yml文件中使用的示例</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2.4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">backend:</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">build:</span> <span class="string">.</span>    <span class="comment"># 构建自定义镜像</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">depends_on:</span></span><br><span class="line"></span><br><span class="line">     <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line"></span><br><span class="line"> <span class="attr">db:</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">image:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><p>用<strong>docker-compose up</strong>命令按照我们指定的依赖顺序启动和运行服务。</p><h3 id="一个完整的Docker由哪些部分组成"><a href="#一个完整的Docker由哪些部分组成" class="headerlink" title="一个完整的Docker由哪些部分组成"></a>一个完整的Docker由哪些部分组成</h3><ul><li>Docker Client 客户端</li><li>Docker Daemon 守护进程</li><li>Docker Image 镜像</li><li>Docker Container 容器</li></ul><h3 id="描述Docker容器的生命周期"><a href="#描述Docker容器的生命周期" class="headerlink" title="描述Docker容器的生命周期"></a>描述Docker容器的生命周期</h3><ol><li>创建容器</li><li>运行容器</li><li>暂停容器（可选）</li><li>取消暂停容器（可选）</li><li>启动容器</li><li>停止容器</li><li>重启容器</li><li>杀死容器</li><li>销毁容器</li></ol>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析公式</title>
      <link href="/2023/06/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F/"/>
      <url>/2023/06/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="主要考点有七大类"><a href="#主要考点有七大类" class="headerlink" title="主要考点有七大类"></a>主要考点有七大类</h2><ul><li>直接查找</li><li>增长量/增长率</li><li>现期/基期</li><li>比重</li><li>平均数</li><li>和差倍比简单计算（加减乘除）</li><li>比较大小</li></ul><h3 id="一、现期、基期、增长量、增长率"><a href="#一、现期、基期、增长量、增长率" class="headerlink" title="一、现期、基期、增长量、增长率"></a>一、<strong>现期、基期、增长量、增长率</strong></h3><p><img src="/2023/06/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F/v2-bf875653f1b630adb18b3aa7208265e0_720w.jpeg" alt="img"></p><p><img src="/2023/06/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F/v2-57d8d29ad895333a0953e54e07f7d225_720w.jpeg" alt="img"></p><p><img src="/2023/06/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F/v2-8dcb726251853c6f9d2ad755b4d0be21_720w.jpeg" alt="img"></p><p><img src="/2023/06/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F/v2-e77e714a4d842159d8f365289e94c26f_720w.webp" alt="img"></p><p>（整体增长率介于两个部分增长率之间）</p><h3 id="二、年均增长量、年均增长率"><a href="#二、年均增长量、年均增长率" class="headerlink" title="二、年均增长量、年均增长率"></a><strong>二、年均增长量、年均增长率</strong></h3><p><img src="/2023/06/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F/v2-1d9fd46dddd4b7b572301dbbe46eeb9c_720w.webp" alt="img"></p><h3 id="三、比重"><a href="#三、比重" class="headerlink" title="三、比重"></a><strong>三、比重</strong></h3><p><img src="/2023/06/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F/v2-6dcd7f99ad4ace85930a1f2f64edd4a8_720w.jpeg" alt="img"></p><p><img src="/2023/06/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F/v2-59a3ecedbe3901a4a35733deb8b522ab_720w.jpeg" alt="img"></p><p><img src="/2023/06/25/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E5%85%AC%E5%BC%8F/v2-81085e08cfcaef8f0e186c091e3f8951_720w.webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料分析公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语理解与表达</title>
      <link href="/2023/03/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E4%B8%8E%E8%A1%A8%E8%BE%BE/"/>
      <url>/2023/03/13/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%A8%80%E8%AF%AD%E7%90%86%E8%A7%A3%E4%B8%8E%E8%A1%A8%E8%BE%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="言语理解与表达"><a href="#言语理解与表达" class="headerlink" title="言语理解与表达"></a>言语理解与表达</h1>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 言语理解与表达 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>资料分析</title>
      <link href="/2023/03/12/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/"/>
      <url>/2023/03/12/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="资料分析"><a href="#资料分析" class="headerlink" title="资料分析"></a>资料分析</h1><h2 id="除法计算"><a href="#除法计算" class="headerlink" title="除法计算"></a>除法计算</h2><blockquote><p>重点看选项！</p></blockquote><ul><li>分子不变，分母四舍五入截位</li><li>选项首位都不同，分母截2位；选项首位有相同，分母截3位</li><li>选项的数量级相同，则不考虑小数点位置（如末尾的0，中间的.）</li><li>结合选项的大数确定商是多少</li></ul><p><img src="/2023/03/12/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/image-20230312134951085.png" alt="image-20230312134951085"></p><h3 id="乘法计算"><a href="#乘法计算" class="headerlink" title="乘法计算"></a>乘法计算</h3><ul><li>直接划分数</li><li>拆分（尽量拆成有倍数关系的）</li></ul><p>两个分数化一个</p><p><img src="/2023/03/12/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/image-20230312144154334.png" alt="image-20230312144154334"></p><script type="math/tex; mode=display">\frac{1}{2} = 50</script><script type="math/tex; mode=display">\frac{1}{3} = 33.3%</script><script type="math/tex; mode=display">\frac{1}{4} = 25%</script><script type="math/tex; mode=display">\frac{1}{5} = 20%</script><script type="math/tex; mode=display">\frac{1}{6} = 16.7%</script><script type="math/tex; mode=display">\frac{1}{7} = 14.3%</script><script type="math/tex; mode=display">\frac{1}{8} = 12.5%</script><script type="math/tex; mode=display">\frac{1}{9} = 11.1%</script><script type="math/tex; mode=display">\frac{1}{10} = 10%</script><script type="math/tex; mode=display">\frac{1}{11} = 9.1%</script><script type="math/tex; mode=display">\frac{1}{12} = 8.3%</script><script type="math/tex; mode=display">\frac{1}{13} = 7.7%</script><script type="math/tex; mode=display">\frac{1}{14} = 7.2%</script><script type="math/tex; mode=display">\frac{1}{15} = 6.6%</script><script type="math/tex; mode=display">\frac{1}{16} = 6.3%</script><h3 id="化乘为除"><a href="#化乘为除" class="headerlink" title="化乘为除"></a>化乘为除</h3><p><strong>r的绝对值 &lt;= 5%</strong></p><p><img src="/2023/03/12/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B/%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90/image-20230312174255288.png" alt="image-20230312174255288"></p><h3 id="加减计算"><a href="#加减计算" class="headerlink" title="加减计算"></a>加减计算</h3><ul><li>精度相同且尾数不同   (<strong>位数法</strong>)</li><li>偶数位留一半，奇数位留前一多半（<strong>截位法 别忘记四舍五入</strong>）</li></ul><h3 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h3><ul><li>除法</li><li>加法</li><li>乘法</li></ul><p>先排除 （<strong>商的量级</strong>——只看分子与分母的整数部分）  </p><p>再计算</p><h3 id="增长量计算"><a href="#增长量计算" class="headerlink" title="增长量计算"></a>增长量计算</h3><p>求某个量增长或减少且是具体单位</p><p>现期量 - 基期量</p><h3 id="增长量比大小"><a href="#增长量比大小" class="headerlink" title="增长量比大小"></a>增长量比大小</h3><ul><li>大大为大：现期量大，增长率也大，增常量大</li><li>一大一小：看现期量×增长率，乘积越大，增长量越大</li></ul><h3 id="增长率计算"><a href="#增长率计算" class="headerlink" title="增长率计算"></a>增长率计算</h3><p>求增长/减少且单位是%</p><p>给定一个增长率，再给定一个百分点 ，求另一个增长率，<strong>百分点加减计算</strong></p><p>给定具体量，求增长率，<strong>（增长量/基期量）× 100%</strong></p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
          <category> 行测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资料分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行测题型</title>
      <link href="/2023/03/12/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B%E9%A2%98%E5%9E%8B/"/>
      <url>/2023/03/12/%E5%85%AC%E5%8A%A1%E5%91%98/%E8%A1%8C%E6%B5%8B/%E8%A1%8C%E6%B5%8B%E9%A2%98%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="行测题型"><a href="#行测题型" class="headerlink" title="行测题型"></a>行测题型</h1><p>资料分析——&gt;言语理解与表达——&gt;判断推理——&gt;数量关系——&gt;常识判断</p><p>华图的模块宝典和1000题  </p><h2 id="言语理解与表达"><a href="#言语理解与表达" class="headerlink" title="言语理解与表达"></a>言语理解与表达</h2><p>多积累，多总结。</p><h2 id="判断推理"><a href="#判断推理" class="headerlink" title="判断推理"></a>判断推理</h2><p>技巧性最强。</p><h3 id="包含四个题型"><a href="#包含四个题型" class="headerlink" title="包含四个题型"></a>包含四个题型</h3><ul><li>图形推理</li><li>定义判断</li><li>类比推理</li><li>逻辑判断</li></ul><h2 id="数量关系"><a href="#数量关系" class="headerlink" title="数量关系"></a>数量关系</h2><p>最难</p><h2 id="常识判断"><a href="#常识判断" class="headerlink" title="常识判断"></a>常识判断</h2><p>政治和法律</p><h2 id="资料分析"><a href="#资料分析" class="headerlink" title="资料分析"></a>资料分析</h2><p>最有可能满分</p>]]></content>
      
      
      <categories>
          
          <category> 公务员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>JDK5及以上版本提供了对线程池的支持，主要用于支持高并发的访问处理，并且复用线程对象。</p><p>JVM先根据用户的参数创建一定数量的可运行的线程任务，并将其放入队列中，在线程创建后启动这些任务，如果线程数量超过了最大线程数量（用户设置的线程池的大小），则超出数量的线程排队等候，再有任务执行完毕后，线程池调度器会发现有可用的线程，进而再次从队列中取出任务并执行。</p><p>线程池核心原理是创建一个“线程池”(ThreadPool)，在池中对线程对象进行管理，包括创建与销毁，使用池时只需要执行具体的任务即可，线程对象的处理都在池中被封装了。</p><p>线程池类TheadPoolExecutor实现了Executor接口。</p><h3 id="线程复用"><a href="#线程复用" class="headerlink" title="线程复用"></a>线程复用</h3><p>在Java中，每个Thread类都有一个start方法。在程序调用start方法启动线程时，Java虚拟机会调用该类的run方法。在Thread类的run方法中其实调用了Runnable对象的run方法，因此可以继承Thread类，在start方法中不断循环调用传递进来的Runnable对象，程序就会不断执行run方法中的代码。可以将在循环方法中不断获取Runnable对象存放在Queue中，当前线程在获取下一个Runnbale对象之前可以是阻塞的，这样既可以有效控制正在执行的线程个数，也能保证系统中正在等待执行的其他线程有序执行。这样就简单实现了一个线程池，达到了线程多路复用的效果。</p><h3 id="核心组件和核心类"><a href="#核心组件和核心类" class="headerlink" title="核心组件和核心类"></a>核心组件和核心类</h3><ul><li>线程池管理器：用于创建并管理线程池</li><li>工作线程：线程池中执行具体任务的线程</li><li>任务接口：用于定义工作线程的调度和执行策略，只有线程实现了该接口，线程中的任务才能够被线程池调度。</li><li>任务队列：存放待处理的任务，新的任务将会不断被加入队列中，执行完成的任务将被从队列中移除。</li></ul><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303162116152.png" alt="image-20230303162116152"></p><p>ThreadPoolExecutor是构建线程的核心方法：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303162459322.png" alt="image-20230303162459322"></p><p>具体参数含义如下：</p><div class="table-container"><table><thead><tr><th>序号</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>corePoolsize</td><td>线程池中核心线程的数量</td></tr><tr><td>2</td><td>maximumPoolSize</td><td>线程池中最大线程的数量</td></tr><tr><td>3</td><td>keepAliveTime</td><td>当前线程数量超过corePoolSize时，空闲线程的存活时间</td></tr><tr><td>4</td><td>unit</td><td>keepAliveTime时间单位</td></tr><tr><td>5</td><td>workQueue</td><td>任务队列，被提交但尚未被执行的任务存放的地方</td></tr><tr><td>6</td><td>threadFactory</td><td>线程工厂，用于创建线程，可使用默认的线程工厂或自定义线程工厂</td></tr><tr><td>7</td><td>handler</td><td>由于任务过多或其他原因导致线程池无法处理时的任务拒绝策略</td></tr></tbody></table></div><h2 id="Java线程池的工作流程"><a href="#Java线程池的工作流程" class="headerlink" title="Java线程池的工作流程"></a>Java线程池的工作流程</h2><p>Java线程池的工作流程为：线程池刚被创建时，只是向系统申请一个用于执行线程队列和管理线程池的线程资源。在调用execute()添加一个任务时，线程池会按照以下流程执行任务。</p><ol><li>如果正在运行的线程数量少于 corePoo!Size （用户定义的核 线程数 ，线程池就会立刻 建线程并执行该线程任务。</li><li>如果正在运行的线程数量大于等于 corePoolSize ，该任务就将被放入阻 队列中。</li><li>在阻 队列己满且正在运行的线程数量少于 maximumPoolSize 时，线程池会创建非核心线程立刻执行该线程任务。</li><li>在阻塞队列已满且正在运行的线程数量大于等于 maximumPoo!S ze 时，线程池将拒绝执行该线程任务并抛出 RejectExecutionException 异常。</li><li>在线程任务执行完毕后，该任务将被从线程池队列中移除，线程池将从队列中取下一个线程任务继续执行。</li><li>在线程处于空闲状态的时 超过 keepAliveTime 时间时，正在运行的线程数量超过corePoolSize，该线程将会被认定为空闲线程并停止。因此在线程池中所有线程任务都执行完毕后，线程池会收缩到corePoolSize大小。</li></ol><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230307153442063.png" alt="image-20230307153442063"></p><h2 id="Executor接口"><a href="#Executor接口" class="headerlink" title="Executor接口"></a>Executor接口</h2><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303100123837.png" alt="image-20230303100123837"></p><p>仅有一个execute()方法。</p><h3 id="使用Executors工厂类创建线程池"><a href="#使用Executors工厂类创建线程池" class="headerlink" title="使用Executors工厂类创建线程池"></a>使用Executors工厂类创建线程池</h3><p>Executor接口仅仅是一种规范，一种声明，一种定义，它没有实现任何功能。</p><p>所以需要使用接口的实现类来完成指定的功能，如ThreadPoolExecutor就是Executor的实现类。</p><p>但ThreadPoolExecutor在实例化时需要传入多个参数，还要考虑线程的并发数等与线程池运行效率有关的参数，所以建议使用Executors工厂类来创建线程池对象。该类对创建ThreadPoolExecutor线程池进行封装，直接调用即可。</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303101001993.png" alt="image-20230303101001993"></p><h2 id="5种常用的线程池"><a href="#5种常用的线程池" class="headerlink" title="5种常用的线程池"></a>5种常用的线程池</h2><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>newCachedThreadPool</td><td>可缓存的线程池</td></tr><tr><td>newFixdedThreadPool</td><td>固定大小的线程池</td></tr><tr><td>newScheduledThreadPool</td><td>可做任务调度的线程池</td></tr><tr><td>newSingleThreadExecutor</td><td>单个线程的线程池</td></tr><tr><td>newWorkStealingPool</td><td>足够大小的线程池，JDK1.8新增</td></tr></tbody></table></div><h3 id="使用newCachedThreadPool-方法创建无界线程池"><a href="#使用newCachedThreadPool-方法创建无界线程池" class="headerlink" title="使用newCachedThreadPool()方法创建无界线程池"></a>使用newCachedThreadPool()方法创建无界线程池</h3><p>使用Executors类的newCachedThreadPool()方法创建无界线程池，可以进行线程自动回收。所谓“无界线程池”就是池中存放线程个数是理论上的最大值，即Integer.MAX_VALUE。</p><p>在创建新线程时，如果有可重用的线程，则重用它们，否则创建一个新的线程并添加到线程池中。对于执行时间很短的任务而言，newCachedThreadPool线程池能很大程度地重用线程而提高系统的性能。</p><p>在线程池的keepAliveTime时间超过默认的60秒后，该线程会被终止并从缓存中移除，因此在没有线程运行时，newCachedThreadPool将不会占用系统的线程资源。</p><p>在有执行时间很短的大量任务需要执行的情况下， newCachedThreadPool能够很好地复用运行中的线程（任务已经完成但未关闭的线程）资源来提高系统的运行效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">cachedTheadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool()</span><br></pre></td></tr></table></figure><p>创建类Run：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303101455735.png" alt="image-20230303101455735"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>运行结果：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303101511065.png" alt="image-20230303101511065"></p><p>A和B机会是在相同的时间开始打印的，也就是创建了2个线程，而且2个线程之间是异步运行的。</p><p>创建Run类：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303101644182.png" alt="image-20230303101644182"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>运行结果：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303101701162.png" alt="image-20230303101701162"></p><p>循环打印也可成功。</p><h3 id="验证newCachedThreadPool-方法创建线程池和线程复用特性"><a href="#验证newCachedThreadPool-方法创建线程池和线程复用特性" class="headerlink" title="验证newCachedThreadPool()方法创建线程池和线程复用特性"></a>验证newCachedThreadPool()方法创建线程池和线程复用特性</h3><p>创建类MyRunnable：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303102518668.png" alt="image-20230303102518668"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>创建运行类Run：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303102628316.png" alt="image-20230303102628316"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>运行结果：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303102701009.png" alt="image-20230303102701009"></p><p>线程中对象复用</p><p>创建类MyRunnable：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303103135535.png" alt="image-20230303103135535"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>创建运行类：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303103155301.png" alt="image-20230303103155301"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>运行结果：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303103222977.png" alt="image-20230303103222977"></p><p>线程池中线程对象只有处于闲置状态时才可以被复用。</p><h3 id="使用newCachedThreadPool-ThreadFactory-方法定制线程工厂"><a href="#使用newCachedThreadPool-ThreadFactory-方法定制线程工厂" class="headerlink" title="使用newCachedThreadPool(ThreadFactory)方法定制线程工厂"></a>使用newCachedThreadPool(ThreadFactory)方法定制线程工厂</h3><p>无界线程池中创建线程类的过程是可以定制的，可以使用类newCachedThreadPool()方法。</p><p>创建线程类MyThreadFactory：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303134342824.png" alt="image-20230303134342824"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>创建运行类Run：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303134649309.png" alt="image-20230303134649309"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>运行结果：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303134749726.png" alt="image-20230303134749726"></p><p>通过使用自定义的ThreadFactory接口实现类，实现了线程对象的定制性。</p><p>ThreadPoolExecutor、ThreadFactory和Thread之间的关系是ThreadPoolExecutor类使用ThreadFactory方法创建Thread对象。</p><p>内部源码：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303135139260.png" alt="image-20230303135139260"></p><p>在源代码中使用了默认工厂，源代码如下：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303135236932.png" alt="image-20230303135236932"></p><p>Executors.defaultThreadFactory()方法源代码如下：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303135333685.png" alt="image-20230303135333685"></p><p>DefaultThreadFactory类实现关系：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303135425732.png" alt="image-20230303135425732"></p><p>使用无参数的public static ExecutorService newCached-ThreadPool()方法创建线程池时，在内部隐式地使用了DefaultThreadFactory类。</p><blockquote><p>在高并发的情况下，使用newCachedThreadPool()方法创建无界线程池极易造成内存占用率大幅升高，导致内存溢出或者系统运行效率严重下降。</p></blockquote><h3 id="使用newFixdThreadPool-int-方法创建有界线程池"><a href="#使用newFixdThreadPool-int-方法创建有界线程池" class="headerlink" title="使用newFixdThreadPool(int)方法创建有界线程池"></a>使用newFixdThreadPool(int)方法创建有界线程池</h3><p>newFixdThreadPool(int)方法用于创建一个固定线程数量的线程池，并将线程资源存放在队列中循环使用。在newFixedThreadPool线程池中，若处于活动状态的线程数量大于等于核心线程池的数量，则新提交的任务将在阻塞队列中排队，直到有可用的线程资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">fixedThreadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>创建类MyRunnable：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303140556138.png" alt="image-20230303140556138"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>创建运行类Run：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303141052361.png" alt="image-20230303141052361"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>运行结果：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303141119097.png" alt="image-20230303141119097"></p><p>使用有界线程池后线程池中的最多线程个数是可控的。</p><h3 id="使用newSingleThreadExecutor-方法创建单一线程池"><a href="#使用newSingleThreadExecutor-方法创建单一线程池" class="headerlink" title="使用newSingleThreadExecutor()方法创建单一线程池"></a>使用newSingleThreadExecutor()方法创建单一线程池</h3><p>使用newSingleThreadExecutor()方法可以创建单一线程池，单一线程池可以实现以队列的方式来执行任务。</p><p>newSingleThreadExecutor线程池会保证永远有且只有一个可用的线程，在该线程停止或发生异常时，newSingleThreadExecutor线程池会启动一个新的线程来代替该线程继续执行任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService singleThread = Executors.newSingleThreadExecutor();</span><br></pre></td></tr></table></figure><p>创建MyRunnable类：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303141334119.png" alt="image-20230303141334119"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>创建运行类Run：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303141356758.png" alt="image-20230303141356758"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>运行结果：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230303141439527.png" alt="image-20230303141439527"></p><p>可以看见只有一个线程在运行。</p><h2 id="newWorkStealingPool"><a href="#newWorkStealingPool" class="headerlink" title="newWorkStealingPool"></a>newWorkStealingPool</h2><p>newWorkStealingPool创建持有足够线程的线程池来达到快速运算的目的，在内部通过使用多队列来减少各个线程调度产生的竞争。这里所说的有足够的线程指JDK根据当前线程的运行需求向操作系统申请足够的线程，以保障线程的快速执行，并很大程度地使用系统资源，提高并发计算的效率，省去用户根据CPU资源估算并行度的过程。当</p><h2 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h2><p>newScheduledThreadPool创建了一个可定时调度的线程池，可设置在给定的延迟时间后执行或者定期执行某个线程任务。</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230307170244156.png" alt="image-20230307170244156"></p><h2 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a>线程池的拒绝策略</h2><p>当线程池的核心线程数已被用完并且阻塞队列已经排满，线程池将通过拒绝策略来处理新增的线程任务。</p><p>JDK内置的拒绝策略有AbortPolicy、CallerRunsPolicy、DiscardOldestPolicy、DiscardPolicy这4种，默认的拒绝策略在ThreadPoolExecutor中作为内部类提供。当默认的拒绝策略不能满足应用需求时可以自定义拒绝策略。</p><h3 id="1、AbortPolicy"><a href="#1、AbortPolicy" class="headerlink" title="1、AbortPolicy"></a>1、AbortPolicy</h3><p>AbortPolicy会直接抛出异常，阻止线程运行，源码如下：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230307160110870.png" alt="image-20230307160110870"></p><h3 id="2、CallerRunsPolicy"><a href="#2、CallerRunsPolicy" class="headerlink" title="2、CallerRunsPolicy"></a>2、CallerRunsPolicy</h3><p>CallerRunsPolicy的拒绝策略为：如果被丢弃的线程任务未关闭，则执行该线程任务。CallerRunsPolicy拒绝策略不会真的丢弃任务，源码如下：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230307160338478.png" alt="image-20230307160338478"></p><h3 id="3、DiscardOldestPolicy"><a href="#3、DiscardOldestPolicy" class="headerlink" title="3、DiscardOldestPolicy"></a>3、DiscardOldestPolicy</h3><p>DiscardOldestPolicy的拒绝策略为：移除线程队列中最早的一个线程任务，并尝试提交当前任务，源码如下：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230307160448200.png" alt="image-20230307160448200"></p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230307160500298.png" alt="image-20230307160500298"></p><h3 id="4、DiscardPolicy"><a href="#4、DiscardPolicy" class="headerlink" title="4、DiscardPolicy"></a>4、DiscardPolicy</h3><p>DiscardPolicy的拒绝策略为：丢弃当前的线程任务不做任何处理，如果系统允许在资源不足的情况下丢弃部分任务，则该策略是一种可以保障系统安全稳定的方案，源码如下：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230307160856035.png" alt="image-20230307160856035"></p><h3 id="5、自定义拒绝策略"><a href="#5、自定义拒绝策略" class="headerlink" title="5、自定义拒绝策略"></a>5、自定义拒绝策略</h3><p>以上策略均实现了RejectedExecutionHandler接口。用户也可以自己扩展RejectedExecutionHandler接口来实现拒绝策略，并捕获异常来实现自定义拒绝策略。</p><p>下面是一个自定义拒绝策略DiscardOldestNPolicy，该策略根据传入的参数丢弃最老的N个线程，源码如下：</p><p><img src="/2023/03/03/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image-20230307161253407.png" alt="image-20230307161253407"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发集合框架</title>
      <link href="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
      <url>/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="并发集合框架"><a href="#并发集合框架" class="headerlink" title="并发集合框架"></a>并发集合框架</h1><p>Java语言中的集合框架父接口是Iterable，从这个接口向下一一继承就 可以得到完整的Java集合框架结构。</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302105346240.png" alt="image-20230302105346240"></p><p>可以看见三个继承分支（List、Set、Queue）的接口是collection，它是集合框架主要功能的抽象，另一个接口是Iterable。</p><h2 id="接口Iterable"><a href="#接口Iterable" class="headerlink" title="接口Iterable"></a>接口Iterable</h2><p>接口Iterable的主要作用是迭代循环。</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302110035800.png" alt></p><p>方法iterator()：通过此方法返回Iterator对象。</p><h2 id="接口Collection"><a href="#接口Collection" class="headerlink" title="接口Collection"></a>接口Collection</h2><p>接口Collection提供了集合框架最主要、最常用的操作。</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302110314450.png" alt></p><h2 id="接口List"><a href="#接口List" class="headerlink" title="接口List"></a>接口List</h2><p>接口List结构：</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302110651359.png" alt="image-20230302110651359"></p><p>接口内部提供的方法主要是对数据进行增删改查操作。</p><p>接口List对接口Collection进行了扩展，允许根据索引位置操作数据，并且允许内容重复。</p><p>接口List最常用的非并发实现类是ArrayList，它是非线程安全的，可以对数据以链表的形式进行组织，使数据呈现有序的结果。</p><p>类ArrayList不是线程安全的，如果想使用线程安全的链表则可以使用Vector类。</p><p>Vector类是线程安全的，所以在多线程并发操作时可以无误地处理集合中的数据。</p><blockquote><p>多个线程分别调用类Vector的iterator()方法返回Iterator对象，在调用remove()时会出现ConcurrentModificationException异常，也就是说并不支持Iterator并发删除。</p></blockquote><p>类Vector有一个子类Stack，它可以实现后进先出(LIFO)的对象堆栈。</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302111744610.png" alt="image-20230302111744610"></p><h2 id="接口Set"><a href="#接口Set" class="headerlink" title="接口Set"></a>接口Set</h2><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302111910179.png" alt="image-20230302111910179"></p><p>接口Set也是对接口Collection进行了扩展，特点是不允许内容重复，排序方式为自然排序。</p><p>其防止元素重复的原理是需要重写hashCode()和equals()方法。</p><p>接口Set最常用的非并发实现类是HashSet。HashSet默认以无序的方式组织元素，LinkedHash—Set类可以有序地组织元素。</p><p>接口Set还有另外一个实现类，即TreeSet。它不仅实现了接口Set，还实现了接口SorteSet和Navi-gableSet。接口SortedSet的父接口为Set，接口Sorted-Set和接口NavigableSet在功能上得到了扩展。</p><h2 id="接口Queue"><a href="#接口Queue" class="headerlink" title="接口Queue"></a>接口Queue</h2><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302113139097.png" alt="image-20230302113139097"></p><p>接口Queue对接口Collection进行了扩展。</p><p>接口Queue的非并发实现类有PriorityQueue，它是一个基于优先级的无界优先级队列。</p><h2 id="接口Deque"><a href="#接口Deque" class="headerlink" title="接口Deque"></a>接口Deque</h2><p>接口Queue支持对表头的操作，而接口Deque不仅支持对表头的操作，而且支持对表尾的操作，所以Deque的全称为Double Ended Queue(双端队列)。</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302114605378.png" alt="image-20230302114605378"></p><p>Deque继承了Queue。</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302114633944.png" alt="image-20230302114633944"></p><p>接口Deque的非并发实现类有ArrayDeque和LinkedList。它们之间有一些区别：如果只想从队列两端获取数据，则使用ArrayDeque；如果想从队列两端获取数据的同时还可以根据索引的位置操作数据，则使用LinkedList。</p><h2 id="非阻塞队列"><a href="#非阻塞队列" class="headerlink" title="非阻塞队列"></a>非阻塞队列</h2><p>非阻塞队列的特色是队列里面没有数据时，返回异常或null。</p><p>在JDK的并发包中，常见的非阻塞队列有：ConcurrentHashMap、ConcurrentSkipListMap、ConcurrentSkipListSet、ConcurrentLinkedQueue、ConcurrentLinkedDeque、CopyOnWrite-ArrayList、CopyOnWriteArraySet。    </p><h3 id="类ConcurrentHashMap的使用"><a href="#类ConcurrentHashMap的使用" class="headerlink" title="类ConcurrentHashMap的使用"></a>类ConcurrentHashMap的使用</h3><p>类ConcurrentHashMap是支持并发操作的Map对象。</p><p>HashMap不是线程安全的，不能被多个线程操作。</p><p>HashTable类支持多线程环境下的put添加操作，却不支持remove删除操作，但ConcurrentHashMap支持这两个操作。</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302160342173.png" alt="image-20230302160342173"></p><h4 id="ConcurrentHashMap并发put"><a href="#ConcurrentHashMap并发put" class="headerlink" title="ConcurrentHashMap并发put"></a>ConcurrentHashMap并发put</h4><p>创建类MyService3：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302160904453.png" alt="image-20230302160904453"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>创建Test3：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302160938281.png" alt="image-20230302160938281"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>运行结果：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302161013946.png" alt="image-20230302161013946"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>可以看到类ConcurrentHashMap支持在多线程环境中执行put操作。</p><h4 id="ConcurrentHashMao并发remove"><a href="#ConcurrentHashMao并发remove" class="headerlink" title="ConcurrentHashMao并发remove"></a>ConcurrentHashMao并发remove</h4><p>创建类MyService5：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302161240016.png" alt="image-20230302161240016"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>创建类Test5</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302161331723.png" alt="image-20230302161331723"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>运行结果：</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302161502302.png" alt="image-20230302161502302"></p><p>可以看到类ConcurrentHashMap在功能上比HashTable更加完善，支持并发情况下的put和remove操作。</p><p>类ConcurrentHashMap不支持排序，类LinkedHashMap支持key排序，但不支持并发。</p><p>如果既要求并发安全，又要求排序的情况，可以使用ConcurrentSkipListMap。</p><h3 id="类ConcurrentSkipListMap"><a href="#类ConcurrentSkipListMap" class="headerlink" title="类ConcurrentSkipListMap"></a>类ConcurrentSkipListMap</h3><p>类ConcurrentSkipListMap支持排序</p><p>创建类Userinfo：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302215208184.png" alt="image-20230302215208184"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>创建类MyService:</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302215247786.png" alt="image-20230302215247786"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>创建线程类MyThread：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302215322694.png" alt="image-20230302215322694"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>创建类Test：</p><div class="table-container"><table><thead><tr><th><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302215423508.png" alt="image-20230302215423508"></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><p>运行结果：</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230302215455628.png" alt="image-20230302215455628"></p><p>控制台打印出null值时是使用pollFirstEntry()方法将当前的Entry对象从类ConcurrentSkipListMap中删除造成的。</p><h3 id="类ConcurrentSkipListSet"><a href="#类ConcurrentSkipListSet" class="headerlink" title="类ConcurrentSkipListSet"></a>类ConcurrentSkipListSet</h3><p>类ConcurrentSkipListSet支持排序且不允许元素重复。</p><h3 id="类ConcurrentLinkedQueue"><a href="#类ConcurrentLinkedQueue" class="headerlink" title="类ConcurrentLinkedQueue"></a>类ConcurrentLinkedQueue</h3><p>类ConcurrentLinkedQueue提供了并发环境下的队列操作。</p><h3 id="类ConcurrentLinkedDeque"><a href="#类ConcurrentLinkedDeque" class="headerlink" title="类ConcurrentLinkedDeque"></a>类ConcurrentLinkedDeque</h3><p>类ConcurrentLinkedQueue仅支持对列头进行操作，类ConcurrentLinkedDeque支持对列头和列尾双向进行操作。</p><h3 id="类CopyOnWriteArrayList"><a href="#类CopyOnWriteArrayList" class="headerlink" title="类CopyOnWriteArrayList"></a>类CopyOnWriteArrayList</h3><p>并发环境下线程安全，有序。</p><h3 id="类CopyOnWriteArraySet"><a href="#类CopyOnWriteArraySet" class="headerlink" title="类CopyOnWriteArraySet"></a>类CopyOnWriteArraySet</h3><p>替代HashSet，解决多线程环境下线程安全，无序。</p><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p>JDK提供的若干集合具有阻塞特性。所谓的阻塞队列BlockingQueue， 其实就是如果BlockQueue是空的，从BlockingQueue中取数据的操作将会被阻塞，进入等待状态，直到BlockingQueue中添加了元素才会被唤醒。同样，如果BlockingQueue是满的，也就是没有空余空间，试图往队列中存放元素的操作也会被阻塞，进入等待状态，直到BlockingQueue有剩余空间时才会被唤醒。</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230303093419713.png" alt="image-20230303093419713"></p><p>接口BlockingQueue的父接口是Queue。</p><h3 id="类ArrayBlockingQueue与公平-非公平锁的使用"><a href="#类ArrayBlockingQueue与公平-非公平锁的使用" class="headerlink" title="类ArrayBlockingQueue与公平/非公平锁的使用"></a>类ArrayBlockingQueue与公平/非公平锁的使用</h3><p>类ArrayBlockingQueue提供了一种有界阻塞队列。</p><p><img src="/2023/03/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/image-20230303094034289.png" alt="image-20230303094034289"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程组</title>
      <link href="/2023/03/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%BB%84/"/>
      <url>/2023/03/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h1><p>为了方便对某些具有相同功能的线程进行管理，我们可以把线程归属到某一个线程组。线程组中可以有线程对象、线程，类似于树的形式。</p><p><img src="/2023/03/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%BB%84/image-20230301213316528.png" alt="image-20230301213316528"></p><p>线程组的作用是可以批量地管理线程或线程对象，有效地对线程或线程对象进行组织。</p><h2 id="一级关联"><a href="#一级关联" class="headerlink" title="一级关联"></a>一级关联</h2><p>所谓的一级关系就是父对象中有子对象，但并不创建子孙对象，这种情况经常出现在开发中。</p><p>创建线程类ThreadA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">&quot;ThreadName=&quot;</span> + </span><br><span class="line">Thread.currentThread().</span><br><span class="line">getName());</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">&quot;ThreadName=&quot;</span> + </span><br><span class="line">Thread.currentThread().</span><br><span class="line">getName());</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">aRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>();</span><br><span class="line"><span class="type">ThreadB</span> <span class="variable">bRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadB</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadGroup</span>(<span class="string">&quot;wuhaodong的线程组&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">aThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, aRunnable);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">bThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, bRunnable);</span><br><span class="line">aThread.start();</span><br><span class="line">bThread.start();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;活动的线程数为：&quot;</span> + group.activeCount());</span><br><span class="line">System.out.println(<span class="string">&quot;线程组的名称为：&quot;</span> + group.getName());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="/2023/03/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%BB%84/image-20230301213907237.png" alt="image-20230301213907237"></p><h2 id="多级关联："><a href="#多级关联：" class="headerlink" title="多级关联："></a>多级关联：</h2><p>所谓的多级关联就是父对象中有子对象，子对象中再创建子对象，也就是出现了子孙对象。但是，此种写法在开发中不常见。设计非常复杂的线程树结构不利于线程对象的管理，但JDK支持多级关联的线程树结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在main组中添加一个线程组A，然后在这个A组中添加线程对象Z</span></span><br><span class="line"><span class="comment">// 方法activeGroupCount()和activeCount()的值不是固定的</span></span><br><span class="line"><span class="comment">// 是系统中环境的一个快照</span></span><br><span class="line"><span class="type">ThreadGroup</span> <span class="variable">mainGroup</span> <span class="operator">=</span> Thread.currentThread().getThreadGroup();</span><br><span class="line"><span class="type">ThreadGroup</span> <span class="variable">group</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadGroup</span>(mainGroup, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;runMethod!&quot;</span>);</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);<span class="comment">// 线程必须在运行状态才可以受组管理</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">newThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, runnable);</span><br><span class="line">newThread.setName(<span class="string">&quot;Z&quot;</span>);</span><br><span class="line">newThread.start();<span class="comment">// 线程必须启动然后才归到组A中</span></span><br><span class="line"><span class="comment">// ///</span></span><br><span class="line">ThreadGroup[] listGroup = <span class="keyword">new</span> <span class="title class_">ThreadGroup</span>[Thread.currentThread()</span><br><span class="line">.getThreadGroup().activeGroupCount()];</span><br><span class="line">Thread.currentThread().getThreadGroup().enumerate(listGroup);</span><br><span class="line">System.out.println(<span class="string">&quot;main线程中有多少个子线程组：&quot;</span> + listGroup.length + <span class="string">&quot; 名字为：&quot;</span></span><br><span class="line">+ listGroup[<span class="number">0</span>].getName());</span><br><span class="line">Thread[] listThread = <span class="keyword">new</span> <span class="title class_">Thread</span>[listGroup[<span class="number">0</span>].activeCount()];</span><br><span class="line">listGroup[<span class="number">0</span>].enumerate(listThread);</span><br><span class="line">System.out.println(listThread[<span class="number">0</span>].getName());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="/2023/03/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%BB%84/image-20230301214600792.png" alt="image-20230301214600792"></p><h2 id="自动归属特性"><a href="#自动归属特性" class="headerlink" title="自动归属特性"></a>自动归属特性</h2><p>自动归属就是自动归到当前线程组中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;A处线程：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; 中有线程组数量：&quot;</span>+Thread.currentThread().getThreadGroup().activeGroupCount());</span><br><span class="line">ThreadGroup group=<span class="keyword">new</span> <span class="title class_">ThreadGroup</span>(<span class="string">&quot;新的组&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;A处线程：&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; 中有线程组数量：&quot;</span>+Thread.currentThread().getThreadGroup().activeGroupCount());</span><br><span class="line">ThreadGroup[] threadGroup=<span class="keyword">new</span> <span class="title class_">ThreadGroup</span>[Thread.currentThread().getThreadGroup().activeGroupCount()];</span><br><span class="line">Thread.currentThread().getThreadGroup().enumerate(threadGroup);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threadGroup.length; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第一个线程组名称为：&quot;</span>+threadGroup[i].getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/03/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%BB%84/image-20230301220430931.png" alt="image-20230301220430931"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动内存管理</title>
      <link href="/2023/02/27/JVM/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
      <url>/2023/02/27/JVM/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="自动内存管理"><a href="#自动内存管理" class="headerlink" title="自动内存管理"></a>自动内存管理</h1><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p>根据《Java虚拟机规范》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域。</p><p><img src="/2023/02/27/JVM/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhbmRzb21lX0xlX2xl,size_16,color_FFFFFF,t_70.jpeg" alt="在这里插入图片描述"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。 </p><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）。此内存区域是唯 一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。 </p><h3 id="java虚拟机栈"><a href="#java虚拟机栈" class="headerlink" title="java虚拟机栈"></a>java虚拟机栈</h3><p>Java虚拟机栈（Java Virtual Machine Stack）也是线程私有的，它的生命周期与线程相同。</p><p>虚拟机栈描述的是Java方法执行的线程内存模型：每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p>局部变量表存放了编译期可知的各种Java虚拟机基本数据类型（boolean、byte、char、short、int、 </p><p>float、long、double）、对象引用（reference类型，它并不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。 </p><p>局部变量表中的存储空间以局部变量槽（Slot）来表示，其中64位长度的long和double类型的数据会占用两个变量槽，其余的数据类型只占用一个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。“大小”是指变量槽的数量，虚拟机真正使用多大的内存空间（譬如按照1个变量槽占用32个比特、64个比特，或者更多）来实现一个变量槽，这是完全由具体的虚拟机实现自行决定的事情。</p><p>在《Java虚拟机规范》中，对这个内存区域规定了两类异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出OutOfMemoryError异常。</p><p><img src="/2023/02/27/JVM/%E8%87%AA%E5%8A%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/0030ce3cbaa7c7a628416766ae77a8cd.png" alt="image-20200705205443993"></p><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈则是为虚拟机使用到的本地（Native） 方法服务。</p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆（Java Heap）是虚拟机所管理的内存中最大的一块线程共享区域，在虚拟机启动时创建。</p><p>此内存区域的唯一目的就是存放对象实例，Java世界里“几乎”所有的对象实例都在这里分配内存。</p><p>Java堆是垃圾收集器管理的内存区域，它也被称作“GC堆”。</p><p>通过参数-Xmx和-Xms设定Java堆大小。如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出OutOfMemoryError异常。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p><p>根据《Java虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出 OutOfMemoryError异常。</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>在JDK1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区 （Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><p>一般服务器管理员配置虚拟机参数时，会根据实际内存去设置-Xmx等参数信息，但经常忽略掉直接内存，使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现 OutOfMemoryError异常</p><h2 id="HotSpot虚拟机对象"><a href="#HotSpot虚拟机对象" class="headerlink" title="HotSpot虚拟机对象"></a>HotSpot虚拟机对象</h2><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>当Java虚拟机遇到一条字节码new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。</p><p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类加载完成后便可完全确定。为对象分配空间的任务实际上便等同于把一块确定大小的内存块从Java堆中划分出来。</p><h4 id="指针碰撞"><a href="#指针碰撞" class="headerlink" title="指针碰撞"></a>指针碰撞</h4><p>假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为“指针碰撞”（Bump The Pointer）。</p><h4 id="空闲列表"><a href="#空闲列表" class="headerlink" title="空闲列表"></a>空闲列表</h4><p>但如果Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表”（Free List）。</p><p>选择哪种分配方式由Java堆是否规整决定，而Java堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理（Compact）的能力决定。因此，当使用Serial、ParNew等带压缩整理过程的收集器时，系统采用的分配算法是指针碰撞，既简单又高效；而当使用CMS这种基于清除（Sweep）算法的收集器时，理论上[1]就只能采用较为复杂的空闲列表来分配内存。</p><h4 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h4><p>给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性；</li><li>把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB），哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。虚拟机是否使用TLAB，可以通过-XX：+/-UseTLAB参数来设定。</li></ul><p>内存分配完成之后，虚拟机必须将分配到的内存空间（但不包括对象头）都初始化为零值，如果使用了TLAB的话，这一项工作也可以提前至TLAB分配时顺便进行。这步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，使程序能访问到这些字段的数据类型所对应的零值。 </p><p>然后Java虚拟机还要对对象进行一些设置，如该对象是那个类的实例，如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锁</title>
      <link href="/2023/02/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E9%94%81/"/>
      <url>/2023/02/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>锁从乐观和悲观的角度可分为乐观锁和悲观锁，从获取资源的公平性角度可分为公平锁和非公平锁，从是否共享资源的角度可分为共享锁和独占锁，从锁的状态可分为偏向锁、轻量级锁和重量级锁。JVM中还有自旋锁。</p><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>乐观锁采用乐观的思想处理数据，在每次读取数据时都认为别人不会修改该数据，所以不会上锁，但在更新时会判断再在此期间别人有没有更新该数据，通常采用在写时先读出当前版本号然后加锁的方法。</p><blockquote><p>具体过程为：比较当前版本号与上一次版本号，如果版本号一致，则更新，如果版本号不一致，则重复进行读，比较，写操作。</p></blockquote><p>Java中的乐观锁大部分是通过CAS（Compare And Swap，比较和交换）操作实现的，CAS是一种原子更新操作，在对数据操作之前首先会比较当前值跟传入的值是否一样，如果一样则更新，否则不执行更新操作，直接返回失败状态。</p><h2 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h2><p>悲观锁采用悲观思想处理数据，在每次读取数据时都认为别人会修改数据，所以每次在读写数据时都会上锁，这样别人想读写这个数据时就会阻塞，等待直到拿到锁。</p><p>Java中的悲观锁大部分基于AQS（Abstract Queued Synchronized，抽象的队列同步器）架构实现。AQS定义了一套多线程访问共享资源的同步框架，许多同步类的实现都依赖于它，例如常用的Synchronized、ReentrantLock、Semaphore、CountDownLatch等。该框架下的锁会先尝试以CAS乐观锁去获取锁，如果获取不到，则会转为悲观锁（如RetreenLock）。</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>自旋锁认为：如果持有锁的线程能在很短的时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞、挂起状态，只需等一等（也叫自旋），在等待持有锁的线程释放锁后即可立即获取锁，这样就避免了用户线程在内核态的切换上导致的锁时间消耗。</p><blockquote><p>线程在自旋时会占用CPU，在线程长时间自旋获取不到锁时，将会产生CPU的浪费，甚至有时线程永远无法获取锁导致CPU资源被永久占用，所以需要设定一个自旋等待的最大时间。在线程执行的时间超过自旋等待的最大时间后，线程会退出自旋模式并释放其持有的锁。</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>自旋锁可以减少CPU上下文的切换，对于占用锁的时间非常短或锁竞争不激烈的代码块来说性能大幅度提升，因为自旋的CPU耗时明显少于线程阻塞、挂起、再唤醒时两次CPU上下文切换所用的时间。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>在持有锁的线程占用锁时间过长或锁的竞争过于激烈时，线程在自旋过程中会长时间获取不到锁资源，将引起CPU的浪费。所以在系统中有复杂锁依赖的情况下不适合采用自旋锁。</p><h4 id="时间阈值"><a href="#时间阈值" class="headerlink" title="时间阈值"></a>时间阈值</h4><p>JDK的不同版本所采用的自旋周期不同，JDK1.5为固定的时间，JDK1.6引入了适应性自旋锁。适应性自旋锁的自选时间不再是固定值，而是由上一次在 同一个锁上的自旋时间及锁的拥有者的状态来决定的，可基本认为一个线程上下文切换的时间就是一个最佳时间。</p><h2 id="ReentrantLock类"><a href="#ReentrantLock类" class="headerlink" title="ReentrantLock类"></a>ReentrantLock类</h2><p>jdk1.5中新增，具有嗅探锁定、多路分支通知等功能。</p><h3 id="实现同步"><a href="#实现同步" class="headerlink" title="实现同步"></a>实现同步</h3><p>创建线程类MyThread：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(MyService service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.testMethod();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建MyService类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ThreadName=&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ (<span class="string">&quot; &quot;</span> + (i + <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用ReentrantLock对象的lock()方法获取锁，调用unlock()方法释放锁，这两个方法成对使用。想要实现同步代码，把这些代码放在lock()方法和unlock()方法之间即可。</p></blockquote><p>创建启动类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">MyThread</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(service);</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(service);</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">a3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(service);</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">a4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(service);</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">a5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(service);</span><br><span class="line"></span><br><span class="line">a1.start();</span><br><span class="line">a2.start();</span><br><span class="line">a3.start();</span><br><span class="line">a4.start();</span><br><span class="line">a5.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分运行结果：</p><p><img src="/2023/02/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E9%94%81/image-20230226210501244.png" alt="image-20230226210501244"></p><p>当前线程打印完毕之后将锁释放，其他线程才可以继续抢锁并打印，每个线程内打印的数据是有序的，即从1到5。因为当前线程已经持有锁，具有互斥排它性，而线程之间打印的顺序是随机的，所以谁抢到锁，谁打印。</p><h3 id="使用方法await-和方法signal-实现wait-notify"><a href="#使用方法await-和方法signal-实现wait-notify" class="headerlink" title="使用方法await()和方法signal()实现wait/notify"></a>使用方法await()和方法signal()实现wait/notify</h3><p>创建MyService类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line">System.out.println(<span class="string">&quot; await时间为&quot;</span> + System.currentTimeMillis());</span><br><span class="line">condition.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line">System.out.println(<span class="string">&quot;signal时间为&quot;</span> + System.currentTimeMillis());</span><br><span class="line">condition.signal();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadA</span><span class="params">(MyService service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.await();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建启动类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>(service);</span><br><span class="line">a.start();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">service.signal();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E9%94%81/image-20230226211817886.png" alt="image-20230226211817886"></p><ul><li>Object类中的wait()方法相当于Condition类中的await()方法。</li><li>Object类中的wait(long timeout)方法相当于Condition类中的await(longtime, TimeUnit unit)方法。</li><li>Object类中的notify()方法相当于Condition类中的signal()方法。</li><li>Object类中的notifyAll()方法相当于Condition类中的signalAll()方法。</li></ul><h3 id="通知部分线程"><a href="#通知部分线程" class="headerlink" title="通知部分线程"></a>通知部分线程</h3><p>创建MyService类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="type">Condition</span> <span class="variable">conditionA</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"><span class="keyword">public</span> <span class="type">Condition</span> <span class="variable">conditionB</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">awaitA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line">System.out.println(<span class="string">&quot;begin awaitA时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">+ <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">conditionA.await();</span><br><span class="line">System.out.println(<span class="string">&quot;  end awaitA时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">+ <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">awaitB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line">System.out.println(<span class="string">&quot;begin awaitB时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">+ <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">conditionB.await();</span><br><span class="line">System.out.println(<span class="string">&quot;  end awaitB时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">+ <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signalAll_A</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line">System.out.println(<span class="string">&quot;  signalAll_A时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">+ <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">conditionA.signalAll();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signalAll_B</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.lock();</span><br><span class="line">System.out.println(<span class="string">&quot;  signalAll_B时间为&quot;</span> + System.currentTimeMillis()</span><br><span class="line">+ <span class="string">&quot; ThreadName=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">conditionB.signalAll();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadA</span><span class="params">(MyService service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.awaitA();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MyService service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadB</span><span class="params">(MyService service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.awaitB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建启动类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>(service);</span><br><span class="line">a.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">a.start();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadB</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadB</span>(service);</span><br><span class="line">b.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">b.start();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">service.signalAll_A();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E9%94%81/image-20230226212615947.png" alt="image-20230226212615947"></p><p>只有线程A被唤醒了，使用Condition对象可以唤醒指定种类的线程，这是控制部分线程行为的便捷方式。</p><h2 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h2><p>公平锁采用先到先得的策略，每次获取锁之前都会检查队列里面有没有排队等待的线程，没有才会尝试获取锁，如果有就将当前线程追加到队列中。</p><p>非公平锁采用“有机会插队”的策略，一个线程获取锁之前，要先去尝试获取锁，而不是在队列中等待，如果真的获取锁成功，说明线程虽然是后启动的，但先获得了锁，这就是“作弊插队”的效果，如果获取锁没有成功，那么将自身追加到队列中进行等待。</p><h2 id="getHoldCount-方法"><a href="#getHoldCount-方法" class="headerlink" title="getHoldCount()方法"></a>getHoldCount()方法</h2><p>public int getHoldCount()方法的作用是查询“当前线程”保持此锁定的个数，也就是调用lock()方法的次数。</p><h2 id="getQueueLength-方法"><a href="#getQueueLength-方法" class="headerlink" title="getQueueLength()方法"></a>getQueueLength()方法</h2><p>public final int getQueueLength()方法的作用是返回正等待获取此锁线程的估计数，比如有5个线程，1个线程长时间占有锁，那么在调用getQueueLength()方法后的返回值是4，说明有4个线程同时在等待锁的释放。</p><h2 id="getWaitQueueLength-Condition-condition-方法"><a href="#getWaitQueueLength-Condition-condition-方法" class="headerlink" title="getWaitQueueLength(Condition condition)方法"></a>getWaitQueueLength(Condition condition)方法</h2><p>public int getWaitQueueLength(Condition condition)方法的作用是返回等待与此锁相关的给定条件Condition的线程估计数，比如有5个线程，每个线程都执行了同一个Condition对象的await()方法，则调用<br>getWaitQueueLength(Condition condition)方法时返回的int值是5。</p><h2 id="hasQueuedThread-Thread-thread-方法"><a href="#hasQueuedThread-Thread-thread-方法" class="headerlink" title="hasQueuedThread(Thread thread)方法"></a>hasQueuedThread(Thread thread)方法</h2><p>public final boolean hasQueuedThread(Thread thread)方法的作用是查询指定的线程是否正在等待获取此锁，也就是判断参数中的线程是否在等待队列中。</p><h2 id="hasQueuedThreads-方法"><a href="#hasQueuedThreads-方法" class="headerlink" title="hasQueuedThreads()方法"></a>hasQueuedThreads()方法</h2><p>public final boolean hasQueuedThreads()方法的作用是查询是否有线程正在等待获取此锁，也就是等待队列中是否有等待的线程。</p><h2 id="hasWaiters-Condition-condition-方法"><a href="#hasWaiters-Condition-condition-方法" class="headerlink" title="hasWaiters(Condition condition)方法"></a>hasWaiters(Condition condition)方法</h2><p>public boolean hasWaiters(Condition condition)方法的作用是查询是否有线程正在等待与此锁有关的condition对象，也就是是否有线程执行了condition对象中的await()方法而呈等待状态。public int<br>getWaitQueueLength(Condition condition)方法的作用是返回有多少个线程执行了condition对象中的await()方法而呈等待状态。</p><h2 id="isFair-方法"><a href="#isFair-方法" class="headerlink" title="isFair()方法"></a>isFair()方法</h2><p>public final boolean isFair()方法的作用是判断是不是公平锁。</p><h2 id="isHeldByCurrentThread-方法"><a href="#isHeldByCurrentThread-方法" class="headerlink" title="isHeldByCurrentThread()方法"></a>isHeldByCurrentThread()方法</h2><p>public boolean isHeldByCurrentThread()方法的作用是查询当前线程是否持有此锁。</p><h2 id="isLocked-方法"><a href="#isLocked-方法" class="headerlink" title="isLocked()方法"></a>isLocked()方法</h2><p>public boolean isLocked()方法的作用是查询此锁定是否由任意线程持有，且没有释放。</p><h2 id="lockInterruptibly-方法"><a href="#lockInterruptibly-方法" class="headerlink" title="lockInterruptibly()方法"></a>lockInterruptibly()方法</h2><p>public void lockInterruptibly()方法的作用是当某个线程尝试获得锁并且阻塞在lock-Interruptibly()方法时，该线程可以被中断。</p><h2 id="tryLock-方法"><a href="#tryLock-方法" class="headerlink" title="tryLock()方法"></a>tryLock()方法</h2><p>public boolean tryLock()方法的作用是嗅探拿锁，如果当前线程发现锁被其他线程持有了，则返回false，那么程序继续执行后面的代码，而不是呈阻塞等待锁的状态。</p><h2 id="tryLock-long-timeout-TimeUnit-unit-方法"><a href="#tryLock-long-timeout-TimeUnit-unit-方法" class="headerlink" title="tryLock(long timeout, TimeUnit unit)方法"></a>tryLock(long timeout, TimeUnit unit)方法</h2><p>public boolean tryLock(long timeout, TimeUnit unit)方法的作用是嗅探拿锁，如果在指定的timeout内持有了锁，则返回true，如果超过时间则返回false。timeout参数代表当前线程抢锁的时间。</p><h2 id="await-long-time-TimeUnit-unit-方法"><a href="#await-long-time-TimeUnit-unit-方法" class="headerlink" title="await(long time, TimeUnit unit)方法"></a>await(long time, TimeUnit unit)方法</h2><p>public boolean await(long time, TimeUnit unit)方法和public final native void<br>wait(long timeout)方法一样，具有自动唤醒功能。</p><h2 id="awaitNanos-long-nanosTimeout-方法"><a href="#awaitNanos-long-nanosTimeout-方法" class="headerlink" title="awaitNanos(long nanosTimeout)方法"></a>awaitNanos(long nanosTimeout)方法</h2><p>public long awaitNanos(long nanosTimeout)方法和public final native void wait(long timeout)方法一样，具有自动唤醒功能。时间单位是纳秒。1000纳秒等于1微秒，1000微秒等于1毫秒，1000毫秒等于1秒。</p><h2 id="awaitUntil-Date-deadline-方法"><a href="#awaitUntil-Date-deadline-方法" class="headerlink" title="awaitUntil(Date deadline)方法"></a>awaitUntil(Date deadline)方法</h2><p>public boolean awaitUntil(Date deadline)方法的作用是在指定的日期结束等待。</p><h2 id="awaitUninterruptibly-方法"><a href="#awaitUninterruptibly-方法" class="headerlink" title="awaitUninterruptibly()方法"></a>awaitUninterruptibly()方法</h2><p>public void awaitUninterruptibly()方法的作用是等待的过程中，不允许被中断。</p><h2 id="ReentranReadWriteLock类"><a href="#ReentranReadWriteLock类" class="headerlink" title="ReentranReadWriteLock类"></a>ReentranReadWriteLock类</h2><p>类ReentranReadWriteLock具有完全互斥排他的效果，即同一时间只有一个线程在执行ReentranLock.lock()方法后面的任务。这样虽然保证了实例变量的线程安全性，但效率却是非常低下的。所以在JDK中提供了一种读写锁ReentranReadWriteLock类，使用它可以加快运行效率，在某些不需要操作的实例变量的方法中，完全可以使用读写锁ReentranReadWriteLock来提升该方法的代码运行速度。</p><p>读写锁表示也有两个锁，一个是读操作相关锁，也称为共享锁；另一个是写操作相关的锁，也叫排它锁。也就是多个读锁之间不互斥，读锁与写锁互斥，写锁与写锁互斥。在没有线程Thread进行写入操作时，进行读操作的多个Thread都可以获取读锁，而进行写入操作的Thread只有在获取写锁后才能进行写入操作。即多个Threa可以同时进行读取操作。</p><h3 id="读读共享"><a href="#读读共享" class="headerlink" title="读读共享"></a>读读共享</h3><p>创建线程类ThreadA：         </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadA</span><span class="params">(Service service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadB</span><span class="params">(Service service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.read();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.readLock().lock();</span><br><span class="line">System.out.println(<span class="string">&quot;获得读锁&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot; &quot;</span> + System.currentTimeMillis());</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.readLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Service</span>();</span><br><span class="line"></span><br><span class="line">      <span class="type">ThreadA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>(service);</span><br><span class="line">      a.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">ThreadB</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadB</span>(service);</span><br><span class="line">      b.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">      a.start();</span><br><span class="line">      b.start();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E9%94%81/image-20230227142848393.png" alt="image-20230227142848393"></p><p>可以看到两个线程几乎同时进入lock()方法后面的代码。说明在此使用了lock.readLock()读锁可以提高程序运行效率，运行多个线程同时执行lock()方法后面的代码。</p><h3 id="写写互斥"><a href="#写写互斥" class="headerlink" title="写写互斥"></a>写写互斥</h3><p>创建线程类ThreadA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadA</span><span class="params">(Service service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.write();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadB</span><span class="params">(Service service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.write();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.writeLock().lock();</span><br><span class="line">System.out.println(<span class="string">&quot;获得写锁&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot; &quot;</span> + System.currentTimeMillis());</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.writeLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Service</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>(service);</span><br><span class="line">a.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadB</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadB</span>(service);</span><br><span class="line">b.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">a.start();</span><br><span class="line">b.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E9%94%81/image-20230227144149082.png" alt="image-20230227144149082"></p><p>同一时间只允许一个线程执行lock()方法后面的代码。</p><h3 id="读写互斥"><a href="#读写互斥" class="headerlink" title="读写互斥"></a>读写互斥</h3><p>修改上面Service类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.readLock().lock();</span><br><span class="line">System.out.println(<span class="string">&quot;readLock&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot; &quot;</span> + System.currentTimeMillis());</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.readLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">lock.writeLock().lock();</span><br><span class="line">System.out.println(<span class="string">&quot;writLock&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot; &quot;</span> + System.currentTimeMillis());</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.writeLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E9%94%81/image-20230227144535130.png" alt="image-20230227144535130"></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程间通信</title>
      <link href="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h1><h2 id="wait-notify机制"><a href="#wait-notify机制" class="headerlink" title="wait/notify机制"></a>wait/notify机制</h2><p>wait/notify(等待/通知)机制在如下场景就会出现：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230225105737806.png" alt="image-20230225105737806"></p><ol><li>厨师做完菜的时间未知，所以菜品被放到传递台上的时间也未知。</li><li>服务员去菜的时间取决于厨师，所以服务员进入<strong>wait</strong>状态。</li><li>厨师做好菜，将菜放到传递台就相当于<strong>notify</strong>，这是服务员接到通知来取菜。</li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>wait()是Object类的方法，它会使当前执行该方法的线程进入等待状态，在该方法所在的代码行处暂停执行，并释放锁，知道接到通知或被中断为止。</p><p>在调用wait()之前，线程必须要获得该对象的对象级别锁，即只能在同步方法或同步代码块中调用wait()方法。通过通知机制使某个线程继续执行wait()方法后面的代码时，对线程的选择是按着执行wait()方法的顺序确定的，并需要重新获得锁。如果调用wait()方法时没有适当的锁，则抛出IllegalMonitorStateException。它是RuntimeException的一个子类，因此不需要try-catch语句。</p><p>notify()也要在同步方法或同步块中调用，即在调用前线程必须要获得锁，如果调用notify()时没有持有适当的锁，也会抛出IllegalMonitorStateException。该方法用来通知那些可能等待该锁的其他线程，如果有多个线程等待，则按着执行wait()方法的顺序对呈等待状态的线程发出1次通知，并使那个线程重新获取锁。需要说明的是，执行<br>notify()方法后，当前线程不会马上释放该锁，呈等待状态的线程也并不能马上获取该对象锁，要等到执行notify()方法的线程将程序执行完，也就是退出同步区域后，当前线程才会释放锁，而呈等待状态所在的线程才可以获取该对象锁。当第一个获得了该对象锁的等待线程运行完毕后，它会释放掉该对象锁。此时如果没有再次使用notify语句，那么其他等待状态的线程会因为没有得到通知而继续等待。</p><p>创建线程类MyThread1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Object lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyThread1</span><span class="params">(Object lock)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.lock = lock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;开始      wait time=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">lock.wait();</span><br><span class="line">System.out.println(<span class="string">&quot;结束      wait time=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类MyThread2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Object lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyThread2</span><span class="params">(Object lock)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.lock = lock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;开始notify time=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">lock.notify();</span><br><span class="line">System.out.println(<span class="string">&quot;结束notify time=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建启动类Test：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>(lock);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>(lock);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230225120210076.png" alt="image-20230225120210076"></p><h2 id="线程状态切换"><a href="#线程状态切换" class="headerlink" title="线程状态切换"></a>线程状态切换</h2><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230225124559176.png" alt="image-20230225124559176"></p><ul><li>创建一个新的线程对象后，再调用它的start()方法，系统会为此线程分配CPU资源，处于可运行状态，如果线程抢占到CPU资源，此线程就处于运行状态。</li><li>线程运行一段时间后其他高优先级的线程抢占了CPU资源，这时此线程就从运行状态变成可运行状态。</li><li>暂停状态结束后，线程进入可运行状态，等待系统重新分配资源。</li><li>run()方法运行结束后进入销毁阶段，整个线程执行完毕。</li></ul><h3 id="线程进入可运行状态大致分为以下四种情况"><a href="#线程进入可运行状态大致分为以下四种情况" class="headerlink" title="线程进入可运行状态大致分为以下四种情况"></a>线程进入可运行状态大致分为以下四种情况</h3><ol><li>调用sleep()方法后经过的时间超过了指定的休眠时间；</li><li>线程成功获得了试图同步的监视器；</li><li>线程正在等待某个通知，其他线程发出了通知；</li><li>处于挂起状态的线程调用了resume方法。</li></ol><h3 id="出现阻塞的情况大体分为以下五种"><a href="#出现阻塞的情况大体分为以下五种" class="headerlink" title="出现阻塞的情况大体分为以下五种"></a>出现阻塞的情况大体分为以下五种</h3><ol><li>线程调用sleep方法，主动放弃占用的处理器资源；</li><li>线程调用了阻塞式I/O方法，在该方法返回前，该线程被阻塞；</li><li>线程试图获得一个同步监视器，但该同步监视器正被其他线程所持有；</li><li>线程等待某个通知；</li><li>程序调用了suspend方法将该线程挂起。此方法容易导致死锁，应尽量避免使用。</li></ol><h2 id="生产者-消费者模式实现"><a href="#生产者-消费者模式实现" class="headerlink" title="生产者/消费者模式实现"></a>生产者/消费者模式实现</h2><h3 id="一生产与一消费情况下的操作值"><a href="#一生产与一消费情况下的操作值" class="headerlink" title="一生产与一消费情况下的操作值"></a>一生产与一消费情况下的操作值</h3><p>创建生产者类P：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">P</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">P</span><span class="params">(String lock)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.lock = lock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ValueObject.value.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">lock.wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> System.currentTimeMillis() + <span class="string">&quot;_&quot;</span></span><br><span class="line">+ System.nanoTime();</span><br><span class="line">System.out.println(<span class="string">&quot;set的值是&quot;</span> + value);</span><br><span class="line">ValueObject.value = value;</span><br><span class="line">lock.notify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建消费者类C：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">C</span><span class="params">(String lock)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.lock = lock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line"><span class="keyword">if</span> (ValueObject.value.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">lock.wait();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;get的值是&quot;</span> + ValueObject.value);</span><br><span class="line">ValueObject.value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">lock.notify();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建存储值的对象ValueObject类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValueObject</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadC</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> C r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadC</span><span class="params">(C r)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.r = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">r.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类P：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadP</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> P p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadP</span><span class="params">(P p)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.p = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">p.setValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建启动类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">P</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">P</span>(lock);</span><br><span class="line"><span class="type">C</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>(lock);</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadP</span> <span class="variable">pThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadP</span>(p);</span><br><span class="line"><span class="type">ThreadC</span> <span class="variable">rThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadC</span>(r);</span><br><span class="line"></span><br><span class="line">pThread.start();</span><br><span class="line">rThread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230226193606052.png" alt="image-20230226193606052"></p><p>可以看到1个生产者和1个消费者进行数据的交互，在控制台中打印的get和set时交替运行的。</p><h2 id="在管道中传递字节流"><a href="#在管道中传递字节流" class="headerlink" title="在管道中传递字节流"></a>在管道中传递字节流</h2><p>管道流是一种特殊的流，用于在不同线程间直接传送数据。一个线程发送数据到输出管道，另一个县城从输入管道中读数据。通过使用管道，实现不同线程间的通信，而不需借助于临时文件。</p><p>创建类WriteData：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteData</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeMethod</span><span class="params">(PipedOutputStream out)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;write :&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">outData</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + (i + <span class="number">1</span>);</span><br><span class="line">out.write(outData.getBytes());</span><br><span class="line">System.out.print(outData);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">out.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类ReadData：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadData</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readMethod</span><span class="params">(PipedInputStream input)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;read  :&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] byteArray = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">readLength</span> <span class="operator">=</span> input.read(byteArray);</span><br><span class="line"><span class="keyword">while</span> (readLength != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">newData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(byteArray, <span class="number">0</span>, readLength);</span><br><span class="line">System.out.print(newData);</span><br><span class="line">readLength = input.read(byteArray);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">input.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadRead：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadRead</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ReadData read;</span><br><span class="line"><span class="keyword">private</span> PipedInputStream input;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadRead</span><span class="params">(ReadData read, PipedInputStream input)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.read = read;</span><br><span class="line"><span class="built_in">this</span>.input = input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">read.readMethod(input);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadWrite：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadWrite</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> WriteData write;</span><br><span class="line"><span class="keyword">private</span> PipedOutputStream out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadWrite</span><span class="params">(WriteData write, PipedOutputStream out)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.write = write;</span><br><span class="line"><span class="built_in">this</span>.out = out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">write.writeMethod(out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">WriteData</span> <span class="variable">writeData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteData</span>();</span><br><span class="line"><span class="type">ReadData</span> <span class="variable">readData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadData</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">PipedInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedInputStream</span>();</span><br><span class="line"><span class="type">PipedOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedOutputStream</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// inputStream.connect(outputStream);</span></span><br><span class="line">outputStream.connect(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadRead</span> <span class="variable">threadRead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadRead</span>(readData, inputStream);</span><br><span class="line">threadRead.start();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadWrite</span> <span class="variable">threadWrite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadWrite</span>(writeData, outputStream);</span><br><span class="line">threadWrite.start();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码inputStream.connect(outputStream)或outputStream.connect(inputStream)的作用是使两个管道之间产生通信链接，这样才可以将数据进行输出与输入。</p></blockquote><p>运行结果：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230226195105124.png" alt="image-20230226195105124"></p><p>在此实验中，首先是读取线程new ThreadRead(inputStream)先启动，由于当时没有数据被写入，所以线程阻塞在int readLength =in.read(byteArray);代码中，直到有数据被写入，才继续向下运行。</p><h2 id="利用wait-notify机制实现交叉备份"><a href="#利用wait-notify机制实现交叉备份" class="headerlink" title="利用wait/notify机制实现交叉备份"></a>利用wait/notify机制实现交叉备份</h2><p>创建20个线程，其中10个线程是将数据备份到A数据库中，另外10个线程将数据备份到B数据库中，并且两个数据库的备份工作是交叉进行的。</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230226195628805.png" alt="image-20230226195628805"></p><p>先创建20个线程，然后将这20个线程编程有序的，如下所示</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230226195710629.png" alt="image-20230226195710629"></p><p>创建类DBTools：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBTools</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">prevIsA</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backupA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (prevIsA == <span class="literal">true</span>) &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;★★★★★&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">prevIsA = <span class="literal">true</span>;</span><br><span class="line">notifyAll();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backupB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (prevIsA == <span class="literal">false</span>) &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;☆☆☆☆☆&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">prevIsA = <span class="literal">false</span>;</span><br><span class="line">notifyAll();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>变量prevIsA的主要作用就是确保备份“★★★★★”数据库A首先执行，然后与“☆☆☆☆☆”数据库B交替进行备份。</p></blockquote><p>创建线程类BackupA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BackupA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DBTools dbtools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BackupA</span><span class="params">(DBTools dbtools)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.dbtools = dbtools;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">dbtools.backupA();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类BackupB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BackupB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DBTools dbtools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BackupB</span><span class="params">(DBTools dbtools)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.dbtools = dbtools;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">dbtools.backupB();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">DBTools</span> <span class="variable">dbtools</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DBTools</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">         <span class="type">BackupB</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BackupB</span>(dbtools);</span><br><span class="line">         output.start();</span><br><span class="line">         <span class="type">BackupA</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BackupA</span>(dbtools);</span><br><span class="line">         input.start();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分运行结果如下：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230226200221731.png" alt="image-20230226200221731"></p><p>交替打印的原理就是使用如下代码作为标记实现A和B线程交替备份的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">prevIsA</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="方法sleep-和wait-的区别"><a href="#方法sleep-和wait-的区别" class="headerlink" title="方法sleep()和wait()的区别"></a>方法sleep()和wait()的区别</h2><ul><li>sleep()是Thread类中的方法，而wait()是Object类中的方法。</li><li>sleep()可以不结合synchronized使用，而wait()必须结合。</li><li>sleep()在执行时不会释放锁，而wait()在执行后锁被释放了。</li><li>sleep()方法执行后线程的状态是TIMED_WAITING，wait()方法执行后线程的状态是等待。</li></ul><h2 id="方法join"><a href="#方法join" class="headerlink" title="方法join()"></a>方法join()</h2><p>主线程创建并启动子线程，如果子线程中要进行大量的耗时运算，主线程往往将早于子线程结束，这时如果主线程想等待子线程执行完成之后再结束，比如子线程处理一个数据，主线程要取得这个数据中的值，这个时候就要用到join()方法了。方法join()的作用是等待线程对象销毁。</p><p>创建类MyThread：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">secondValue</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * <span class="number">10000</span>);</span><br><span class="line">System.out.println(secondValue);</span><br><span class="line">Thread.sleep(secondValue);</span><br><span class="line">System.out.println(<span class="string">&quot;睡眠结束！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类Test：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">threadTest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">threadTest.start();</span><br><span class="line">threadTest.join();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;我想当threadTest对象执行完毕后我再执行，我做到了&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230226201347990.png" alt="image-20230226201347990"></p><p>方法join()的作用是使所属的线程对象x正常执行run()方法中的任务，而使当前线程z进行无限期的阻塞，等待线程x销毁后再继续执行线程z后面的代码。也就是说，join()方法具有串联执行的作用：你不销毁，我不往下走！</p><h2 id="ThreadLocal类的使用"><a href="#ThreadLocal类的使用" class="headerlink" title="ThreadLocal类的使用"></a>ThreadLocal类的使用</h2><p>类ThreadLocal主要的作用就是将数据放入当前线程对象中的Map里，这个Map是Thread类的实例变量。类ThreadLocal自己不管理也不存储任何数据，它只是数据和Map之间的中介和桥梁，通过ThreadLocal将数据放入<br>Map中，执行流程如下：</p><p><strong>数据-&gt;ThreadLocal-&gt;currentThread()-&gt;Map</strong></p><p>执行后每个线程中的Map就存有自己的数据，Map中的key存储的是ThreadLocal对象，value就是存储的值，说明ThreadLocal和值之间是一对一的关系，一个ThreadLocal对象只能关联一个值。每个线程中Map的值只对当前线程可见，其他线程不可以访问当前线程对象中Map的值。</p><p>内存结果如下所示：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230226202913000.png" alt="image-20230226202913000"></p><p>创建线程类ThreadA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (Tools.tl.get() == <span class="literal">null</span>) &#123;</span><br><span class="line">Tools.tl.set(<span class="string">&quot;ThreadA&quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ThreadA get Value=&quot;</span> + Tools.tl.get());</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (Tools.tl.get() == <span class="literal">null</span>) &#123;</span><br><span class="line">Tools.tl.set(<span class="string">&quot;ThreadB&quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;ThreadB get Value=&quot;</span> + Tools.tl.get());</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Tools类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tools</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ThreadLocal</span> <span class="variable">tl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建启动类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>();</span><br><span class="line"><span class="type">ThreadB</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadB</span>();</span><br><span class="line">a.start();</span><br><span class="line">b.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (Tools.tl.get() == <span class="literal">null</span>) &#123;</span><br><span class="line">Tools.tl.set(<span class="string">&quot;Main&quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Main get Value=&quot;</span> + Tools.tl.get());</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230226204346247.png" alt="image-20230226204346247"></p><p>控制台输出的结果表明通过ThreadLocal向每一个线程存储自己的私有数据，虽然3个线程都向tl对象中通过的set()存放数据值，但每个线程仅能取出自己的数据，不能取出别人的。</p><h2 id="验证线程变量的隔离性"><a href="#验证线程变量的隔离性" class="headerlink" title="验证线程变量的隔离性"></a>验证线程变量的隔离性</h2><p>创建ThreadLocalExt类继承ThreadLocal：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalExt</span> <span class="keyword">extends</span> <span class="title class_">ThreadLocal</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>().getTime();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;在ThreadA线程中取值=&quot;</span> + Tools.tl.get());</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Tools类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tools</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ThreadLocalExt</span> <span class="variable">tl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocalExt</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;       在Main线程中取值=&quot;</span> + Tools.tl.get());</span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>();</span><br><span class="line">a.start();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230227094608927.png" alt="image-20230227094608927"></p><p>子线程和父线程各有各的值</p><h3 id="InheritableThreadLocal类的使用"><a href="#InheritableThreadLocal类的使用" class="headerlink" title="InheritableThreadLocal类的使用"></a>InheritableThreadLocal类的使用</h3><p>使用类InheritableThreadLocal可以在子线程中取得父线程继承下来的值。</p><h4 id="值继承"><a href="#值继承" class="headerlink" title="值继承"></a>值继承</h4><p>将上面继承ThreadLocal类的ThreadLocalExt类，改为继承InheritableThreadLocal类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritableThreadLocalExt</span> <span class="keyword">extends</span> <span class="title class_">InheritableThreadLocal</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>().getTime();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230227095010970.png" alt="image-20230227095010970"></p><h4 id="值继承再修改"><a href="#值继承再修改" class="headerlink" title="值继承再修改"></a>值继承再修改</h4><p>在继承的同时追加内容</p><p>在ThreadLocalExt类中增加成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected Object childValue(Object parentValue) &#123;</span><br><span class="line">return parentValue + &quot; 我在子线程加的~!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/25/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/image-20230227133748584.png" alt="image-20230227133748584"></p><blockquote><p>如果在子线程取得值的同时，主线程将InheritableThreadLocal中的值进行更改，那么子线程取得的值还是旧值。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程通信 </tag>
            
            <tag> 线程状态切换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized关键字</title>
      <link href="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Synchronized关键字"><a href="#Synchronized关键字" class="headerlink" title="Synchronized关键字"></a>Synchronized关键字</h1><p>synchronized关键字用于为Java对象、方法、代码块提供线程安全的操作。</p><p>synchronized属于独占式的悲观锁，同时属于可重入锁。</p><h2 id="Synchronized在字节码中的原理"><a href="#Synchronized在字节码中的原理" class="headerlink" title="Synchronized在字节码中的原理"></a>Synchronized在字节码中的原理</h2><p>在synchronized内部包括ContentionList、EntryList、WaitSet、OnDeck、Owner、!Owner 6个区域，每个区域都代表锁的不同状态。</p><ul><li>ContentionList：锁竞争队列，所有请求锁的线程都被放在竞争队列中。</li><li>EntryList：竞争候选列表，在Contention List中有资格成为候选者来竞争锁资源的线程被移动到了Entry List中。</li><li>WaitSet：等候集合，在调用wait方法后被阻塞的线程将被放在WaitSet中。</li><li>OnDeck：竞争候选者，在同一时刻最多只有一个线程在竞争锁资源，该线程的状态被称为OnDeck。</li><li>Owner：竞争到锁资源的线程被称为Owner状态线程。</li><li>!Owner：在Owner线程释放锁后，会从Owner的状态变成!Owner。</li></ul><p>synchronized在收到新的锁请求时首先自旋，如果通过自旋也没有获取锁资源，则将被放入锁竞争队列ContentionList中。</p><p>为了防止锁竞争时ContentionList尾部的元素被大量的并发线程进行CAS访问而影响性能，Owner线程会在释放锁资源时将ContentionList中的部分线程移动到EntryList中，并指定EntryList中的某个线程（一般是最先进入的线程）为OnDeck线程。Owner线程并没有直接把锁传递给OnDeck线程，而是把锁竞争的权利交给OnDeck，让OnDeck线程重新竞争锁。在Java中把该行为成为“竞争切换”，该行为牺牲了公平性，但提高了性能。</p><p>获取到锁资源的OnDeck线程会变成为Owner线程，而未获取到锁资源的线程仍然停留在EntryList中。</p><p>Owner线程在被wait方法阻塞后，会被转移到WaitSet队列中，直到某个时刻被notify方法或者notifyAll方法唤醒，会再次进入EntryList中。ContentionList、EntryList、WaitSet中的线程均为阻塞状态，该阻塞是由操作系统来完成的（在Linux内核下是采用pathread_mutex_lock内核函数实现的）。</p><p>Owner线程在执行完毕后会释放锁的资源并变为!Owner状态。</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230309170805427.png" alt="image-20230309170805427"></p><p>在synchronized中，在线程进入ContentionList之前，等待的线程会先尝试以自旋的方式获取锁，如果获取不到就进入ContentionList，该做法对于已经进入队列的线程是不公平的，因此synchronized是非公平锁。另外，自旋获取锁的线程也可以直接抢占OnDeck线程的锁资源。</p><p>synchronized是一个重量级操作，需要调用操作系统的相关接口，性能较低，给线程加锁的时间有可能超过获取锁后具体逻辑代码的操作时间。</p><p>JDK1.6对synchronized做了很多优化，引入了适应自旋、锁消除、锁粗化、轻量级锁及偏向锁等以提高锁的效率。锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。这种升级过程称为锁膨胀。在JDK1.6中默认开启了偏向锁和轻量级锁，可以通过<strong>-XX:UseBiasedLocking</strong>禁用偏向锁。</p><p>在方法上使用synchronized关键字实现同步的原因是使用了flag标记ACC_SYNCHRONIZED，当调用方法时，调用指令将会检查方法的ACC_SYNCHRONIZED访问标志是否设置，如果设置了，执行线程先持有同步锁，然后执行方法，最后在方法完成时释放锁。</p><h3 id="在方法中使用Synchronized关键字"><a href="#在方法中使用Synchronized关键字" class="headerlink" title="在方法中使用Synchronized关键字"></a>在方法中使用<strong>Synchronized</strong>关键字</h3><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedStudy</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">synMethod</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        synMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命令<strong>javap -c -v SynchronizedStudy.class</strong>将class文件转为字节码指令</p><blockquote><p>参数-v表示输出附加信息</p><p>参数-c表示对代码进行反汇编</p></blockquote><p>生成的字节码指令核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">synMethod</span><span class="params">()</span>;</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">0</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">       <span class="number">0</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">    stack=<span class="number">0</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: invokestatic  #<span class="number">2</span>                  <span class="comment">// Method synMethod:()V</span></span><br><span class="line">       <span class="number">3</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">7</span>: <span class="number">3</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>       <span class="number">4</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br></pre></td></tr></table></figure><p>可以看到synMethod()方法使用flag标记<strong>ACC_SYNCHRONIZED</strong>，说明该方法是同步的。</p><h3 id="在代码块中使用Synchronized关键字"><a href="#在代码块中使用Synchronized关键字" class="headerlink" title="在代码块中使用Synchronized关键字"></a>在代码块中使用Synchronized关键字</h3><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedStudy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;氵告 东&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SynchronizedStudy</span> <span class="variable">synchronizedStudy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedStudy</span>();</span><br><span class="line">        synchronizedStudy.method();;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用命令<strong>javap -c -v SynchronizedStudy.class</strong>生成字节码指令，核心代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: dup</span><br><span class="line">       <span class="number">2</span>: astore_1</span><br><span class="line">       <span class="number">3</span>: monitorenter</span><br><span class="line">       <span class="number">4</span>: ldc           #<span class="number">2</span>                  <span class="comment">// String 氵告 东</span></span><br><span class="line">       <span class="number">6</span>: astore_2</span><br><span class="line">       <span class="number">7</span>: aload_1</span><br><span class="line">       <span class="number">8</span>: monitorexit</span><br><span class="line">       <span class="number">9</span>: goto          <span class="number">17</span></span><br><span class="line">      <span class="number">12</span>: astore_3</span><br><span class="line">      <span class="number">13</span>: aload_1</span><br><span class="line">      <span class="number">14</span>: monitorexit</span><br><span class="line">      <span class="number">15</span>: aload_3</span><br><span class="line">      <span class="number">16</span>: athrow</span><br><span class="line">      <span class="number">17</span>: <span class="keyword">return</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由代码可以看到使用了<strong>monitorenter</strong>和<strong>monitorexit</strong>指令进行同步处理。</p><h2 id="synchronized方法将对象作为锁"><a href="#synchronized方法将对象作为锁" class="headerlink" title="synchronized方法将对象作为锁"></a>synchronized方法将对象作为锁</h2><p>创建如下代码：</p><p>MyObject类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObject</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;begin methodA threadName=&quot;</span></span><br><span class="line">+ Thread.currentThread().getName());</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义线程类TA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">private</span> MyObject object;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TA</span><span class="params">(MyObject object)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.object = object;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.run();</span><br><span class="line">object.methodA();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义线程类TB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">private</span> MyObject object;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TB</span><span class="params">(MyObject object)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.object = object;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.run();</span><br><span class="line">object.methodA();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line"><span class="type">TA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TA</span>(object);</span><br><span class="line">a.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="type">TB</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TB</span>(object);</span><br><span class="line">b.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">a.start();</span><br><span class="line">b.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224003404885.png" alt="image-20230224003404885"></p><p>可以看到两个线程一起进入方法methodA()，因为该方法没有同步化。</p><p>为MyObject类中methodA()方法添加<strong>synchronized</strong>关键字如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObject</span> &#123;</span><br><span class="line"> <span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;begin methodA threadName=&quot;</span></span><br><span class="line">+ Thread.currentThread().getName());</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时输出结果为：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224003826022.png" alt="image-20230224003826022"></p><p>由此可见，调用关键字<strong>synchronized</strong>声明的方法一定是排队运行。并且，只有资源共享的写访问才需要同步化，否则没有同步的必要。</p><h3 id="将对象作为锁"><a href="#将对象作为锁" class="headerlink" title="将对象作为锁"></a>将对象作为锁</h3><p>创建类MyObjectTwo，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObjectTwo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;begin methodA threadName=&quot;</span></span><br><span class="line">+ Thread.currentThread().getName());</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;end endTime=&quot;</span> + System.currentTimeMillis());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;begin methodB threadName=&quot;</span></span><br><span class="line">+ Thread.currentThread().getName() + <span class="string">&quot; begin time=&quot;</span></span><br><span class="line">+ System.currentTimeMillis());</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个自定义线程类分别调用不同方法：</p><p>TAtwo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TAtwo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MyObjectTwo object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TAtwo</span><span class="params">(MyObjectTwo object)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.object = object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.run();</span><br><span class="line">object.methodA();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TBtwo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TBtwo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MyObjectTwo object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TBtwo</span><span class="params">(MyObjectTwo object)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.object = object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.run();</span><br><span class="line">object.methodB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行方法RunTwo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunTwo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyObjectTwo</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObjectTwo</span>();</span><br><span class="line"><span class="type">TAtwo</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TAtwo</span>(object);</span><br><span class="line">a.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="type">TBtwo</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TBtwo</span>(object);</span><br><span class="line">b.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">a.start();</span><br><span class="line">b.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224010046517.png" alt="image-20230224010046517"></p><p>线程A先持有了object对象的锁，但线程B完全可以异步调用非synchronized类型的方法。</p><p>将MyObjectTwo类中的methodB()方法前加入synchronized关键字，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;begin methodB threadName=&quot;</span></span><br><span class="line">+ Thread.currentThread().getName() + <span class="string">&quot; begin time=&quot;</span></span><br><span class="line">+ System.currentTimeMillis());</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224010313154.png" alt="image-20230224010313154"></p><h4 id="结论如下："><a href="#结论如下：" class="headerlink" title="结论如下："></a>结论如下：</h4><ul><li>A线程先持有object对象的锁，B线程可以以异步的方式调用object对象中的非synchronized类型的方法。</li><li>A线程先持有object对象的锁，B线程如果在这时调用object对象中的synchronized类型的方法，则需等待，也就是同步。</li><li>在方法声明处添加synchronized并不是锁方法，而是锁当前类的对象。</li><li>在Java中只有将对象作为锁，并没有锁方法这种说法。</li><li>在Java语言中，锁就是对象，对象可以映射成锁，哪个线程拿到这把锁，哪个线程就可以执行这个对象中的synchronized同步方法。</li><li>如果在X对象中使用了synchronized关键字声明非静态方法，则X对象就被当成锁。</li></ul><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>发生脏读的原因是在读取实例变量时，值被其他线程已经更改过了。</p><p>创建类PublicVar，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublicVar</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;AA&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.username = username;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"><span class="built_in">this</span>.password = password;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;setValue method thread name=&quot;</span></span><br><span class="line">+ Thread.currentThread().getName() + <span class="string">&quot; username=&quot;</span></span><br><span class="line">+ username + <span class="string">&quot; password=&quot;</span> + password);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;getValue method thread name=&quot;</span></span><br><span class="line">+ Thread.currentThread().getName() + <span class="string">&quot; username=&quot;</span> + username</span><br><span class="line">+ <span class="string">&quot; password=&quot;</span> + password);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> PublicVar publicVar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadA</span><span class="params">(PublicVar publicVar)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.publicVar = publicVar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.run();</span><br><span class="line">publicVar.setValue(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;BB&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类Test：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">PublicVar</span> <span class="variable">publicVarRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PublicVar</span>();</span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>(publicVarRef);</span><br><span class="line">thread.start();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">20</span>);<span class="comment">// 打印结果受此值大小影响</span></span><br><span class="line"></span><br><span class="line">publicVarRef.getValue();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224100432526.png" alt="image-20230224100432526"></p><p>Thread-0线程执行run方法，调用setValue()方法，在setUserName后，线程进入睡眠，但还没有setPassword，所以password的值为默认值AA，但main线程异步开始调用getValue()方法，所以出现脏读现象。</p><p>解决办法是在getValue方法上加入synchroinzed关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;getValue method thread name=&quot;</span></span><br><span class="line">+ Thread.currentThread().getName() + <span class="string">&quot; username=&quot;</span> + username</span><br><span class="line">+ <span class="string">&quot; password=&quot;</span> + password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224101441715.png" alt="image-20230224101441715"></p><p>可以看到setValue()方法和getValue()方法被依次执行。</p><h4 id="结论如下：-1"><a href="#结论如下：-1" class="headerlink" title="结论如下："></a>结论如下：</h4><ul><li>当A线程调用anyObject对象加入synchronized关键字的X方法时，A线 程就获得了X方法所在对象的锁，所以其他线程必须等A线程执行完毕后 才可以调用X方法，但B线程可以随意调用其他的非synchronized同步方 法。</li><li>当A线程调用anyObject对象加入synchronized关键字的X方法时，A线 程就获得了X方法所在对象的锁，所以其他线程必须等A线程执行完毕后才可以调用X方法，而B线程如果调用声明了synchronized关键字的非X方法 时，必须等A线程将X方法执行完，也就是将对象锁释放后才可以调用， 这时A线程已经执行了一个完整的任务，也就是说username和password这 两个实例变量已经同时被赋值，不存在脏读的基本环境。</li><li>多个线程在调用同一个业务对象中不同的同步方法时，是按顺序同步的方式调用的。</li></ul><h2 id="synchronized锁重入"><a href="#synchronized锁重入" class="headerlink" title="synchronized锁重入"></a>synchronized锁重入</h2><p>在使用synchronized时，当一个线程得到一个对象锁后，再次请求此对象锁时是可以再次得到该对象锁的。</p><p>创建类Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;service1&quot;</span>);</span><br><span class="line">service2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;service2&quot;</span>);</span><br><span class="line">service3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service3</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;service3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>service1()中调用service2(),service2()方法中调用service3()，并且这三个方法都加了synchronized关键字。</p></blockquote><p>创建线程类MyThread：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Service</span>();</span><br><span class="line">service.service1();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类Rrun:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">MyThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224103112377.png" alt="image-20230224103112377"></p><p>”可重入锁“是指自己可以再次获取自己的内部锁，并且锁重入也是支持在父子类继承的环境。当子类继承父类的同步方法时，在子类的同步方法中调用<code>this</code>关键字来调用同名方法时，实际上并不是调用了子类自己的同步方法，而是调用了父类的同步方法，这是因为子类继承了父类的同步方法锁。</p><h3 id="出现异常时，锁会自动释放"><a href="#出现异常时，锁会自动释放" class="headerlink" title="出现异常时，锁会自动释放"></a>出现异常时，锁会自动释放</h3><blockquote><p>Thread类中，suspend()和sleep(millis)方法被调用后并不释放锁。</p></blockquote><h3 id="非同步方法：不使用synchronized重写方法"><a href="#非同步方法：不使用synchronized重写方法" class="headerlink" title="非同步方法：不使用synchronized重写方法"></a>非同步方法：不使用synchronized重写方法</h3><blockquote><p>重写方法如果不适用synchronized关键字，即非同步方法，使用后变成同步方法。</p></blockquote><h2 id="synchronized同步语句块"><a href="#synchronized同步语句块" class="headerlink" title="synchronized同步语句块"></a>synchronized同步语句块</h2><blockquote><p>synchronized方法是将当前对象作为锁，而synchronized代码块是将任意对象作为锁。锁可以认为是一个标识，持有这个标识的线程就可以执行被同步的代码。</p><p>当使用一个线程访问object的一个synchronized(this)同步代码块时，其他线程对同一个object中所有其他synchronized(this)同步代码块的访问将被阻塞，说synchronized使用的锁是一个。</p></blockquote><h3 id="方法println-也是同步的"><a href="#方法println-也是同步的" class="headerlink" title="方法println()也是同步的"></a>方法println()也是同步的</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(String x)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        print(x);</span><br><span class="line">        newLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(Object x)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(x);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        print(s);</span><br><span class="line">        newLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将任意对象作为锁"><a href="#将任意对象作为锁" class="headerlink" title="将任意对象作为锁"></a>将任意对象作为锁</h2><p>synchronized（非this对象x）同步代码块的执行特性如下：在多个线程争抢相同的非this对象x的锁时，同一时间只有一个线程可以执行synchronized（非this对象x）同步代码块中的代码。</p><p>创建Service类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String usernameParam;</span><br><span class="line"><span class="keyword">private</span> String passwordParam;</span><br><span class="line"><span class="type">String</span> <span class="variable">anyString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsernamePassword</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (anyString) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;线程名称为：&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot;在&quot;</span> + Instant.now() + <span class="string">&quot;进入同步块&quot;</span>);</span><br><span class="line">usernameParam = username;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">passwordParam = password;</span><br><span class="line">System.out.println(<span class="string">&quot;线程名称为：&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot;在&quot;</span> + Instant.now() + <span class="string">&quot;离开同步块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadA</span><span class="params">(Service service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.setUsernamePassword(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Service service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadB</span><span class="params">(Service service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.setUsernamePassword(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类Run:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Service</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>(service);</span><br><span class="line">a.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">a.start();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadB</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadB</span>(service);</span><br><span class="line">b.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">b.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224115113213.png" alt="image-20230224115113213"></p><p>锁非this对象具有一定的优点，就是如果一个类中有很多synchronized方法，这时虽然能实现同步，但影响运行效率，如果使用同步代码块锁非this对象，则synchronized（非this）代码块中的程序与同步方法是异步的， 因为是两把锁，不与其他锁this同步方法争抢this锁，可大大提高运行效率。</p><h3 id="多个锁就是异步执行"><a href="#多个锁就是异步执行" class="headerlink" title="多个锁就是异步执行"></a>多个锁就是异步执行</h3><p>将上面service类中代码改成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsernamePassword</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">anyString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="keyword">synchronized</span> (anyString) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;线程名称为：&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot;在&quot;</span> + Instant.now() + <span class="string">&quot;进入同步块&quot;</span>);</span><br><span class="line">usernameParam = username;</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">passwordParam = password;</span><br><span class="line">System.out.println(<span class="string">&quot;线程名称为：&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot;在&quot;</span> + Instant.now() + <span class="string">&quot;离开同步块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果就会产生异步效果：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224115509481.png" alt="image-20230224115509481"></p><blockquote><p>同步代码块放在非同步synchronized方法中进行声明，并不能保证调用方法的线程的执行同步/顺序性，即线程调用方法是无序的。</p></blockquote><h2 id="静态同步：synchronized方法与synchronized-class-代码块"><a href="#静态同步：synchronized方法与synchronized-class-代码块" class="headerlink" title="静态同步：synchronized方法与synchronized(class)代码块"></a>静态同步：synchronized方法与synchronized(class)代码块</h2><p>如果synchronized关键字应用在静态方法上，就是对当前*.Java文件对应的Class类的对象进行持锁，Class类的对象是单例的，更具体地说，在静态方法上使用synchronized关键字声明同步方法时，是使用当前静态方法所在类对应Class类的单例对象作为锁的。</p><p>创建类文件Service:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;线程名称为：&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot;在&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;进入printA&quot;</span>);</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;线程名称为：&quot;</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">&quot;在&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;离开printA&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;线程名称为：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;在&quot;</span></span><br><span class="line">+ System.currentTimeMillis() + <span class="string">&quot;进入printB&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;线程名称为：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;在&quot;</span></span><br><span class="line">+ System.currentTimeMillis() + <span class="string">&quot;离开printB&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看见加synchronized的方法为静态方法</p></blockquote><p>创建自定义线程类ThreadA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">Service.printA();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建自定义线程类ThreadB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">Service.printB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建启动类Run：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>();</span><br><span class="line">a.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">a.start();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadB</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadB</span>();</span><br><span class="line">b.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">b.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224142321210.png" alt="image-20230224142321210"></p><p>synchronized关键字加到static静态方法上是将Class类的对象作为锁，而synchronized关键字加 </p><p>到非static静态方法上是将方法所在类的对象作为锁。</p><h2 id="String常量池特性与同步问题"><a href="#String常量池特性与同步问题" class="headerlink" title="String常量池特性与同步问题"></a>String常量池特性与同步问题</h2><p>JVM具有String常量池的功能，所以以下运行结果为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">System.out.println(a == b);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224144815127.png" alt="image-20230224144815127"></p><p>在将synchronized(string)同步块与String联合使用时，要注意常量池可能会出现意外。</p><p>创建类Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String stringParam)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (stringParam) &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadA：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Service service;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadA</span><span class="params">(Service service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.print(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建线程类ThreadB：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Service service;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadB</span><span class="params">(Service service)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">service.print(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类Run:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Service</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadA</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadA</span>(service);</span><br><span class="line">a.setName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">a.start();</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadB</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadB</span>(service);</span><br><span class="line">b.setName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">b.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224145621219.png" alt="image-20230224145621219"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>因为String的值都是”AA“，所以两个线程持有相同的锁，导致A线程执行中，B线程不能执行，这就是string常量池所带来的问题，所以一般来说同步synchronized代码块都不使用String作为锁对象。</p><h2 id="多线程的死锁"><a href="#多线程的死锁" class="headerlink" title="多线程的死锁"></a>多线程的死锁</h2><p>不同的线程都在等待无法被释放的锁，导致所有的任务都无法继续完成。</p><p>创建类DealThread：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DealThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String username;</span><br><span class="line"><span class="keyword">public</span> <span class="type">Object</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="type">Object</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(String username)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (username.equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lock1) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (lock2) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;按lock1-&gt;lock2代码顺序执行了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (username.equals(<span class="string">&quot;b&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lock2) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (lock1) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;按lock2-&gt;lock1代码顺序执行了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建运行类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DealThread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DealThread</span>();</span><br><span class="line">t1.setFlag(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t1);</span><br><span class="line">thread1.start();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">t1.setFlag(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(t1);</span><br><span class="line">thread2.start();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224151418495.png" alt="image-20230224151418495"></p><p>查看线程是否有死锁现象：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224151700212.png" alt="image-20230224151700212"></p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224151719796.png" alt="image-20230224151719796"></p><p>可以发现两个线程都被阻塞。死锁是程序设计的bug，在设计程序时就要避免双方互相持有对方的锁，只要互相等待释放锁，就有可能出现死锁。</p><h2 id="holdsLock-Object-obj-方法的使用"><a href="#holdsLock-Object-obj-方法的使用" class="headerlink" title="holdsLock(Object obj)方法的使用"></a>holdsLock(Object obj)方法的使用</h2><p>当且仅当当前线程持有指定对象上的监视器锁时才返回true，此方法旨在允许程序断言当前线程已持有指定的锁。</p><p>创建类Test：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wuhaodong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/24 15:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A  &quot;</span>+Thread.holdsLock(Test.class));</span><br><span class="line">        <span class="keyword">synchronized</span> (Test.class)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;B  &quot;</span>+Thread.holdsLock(Test.class));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;C  &quot;</span>+Thread.holdsLock(Test.class));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/image-20230224154448010.png" alt="image-20230224154448010"></p><h2 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h2><p>被synchronized包围的代码称为临界区（Critical Section），临界区中的代码通常是操作共享的数据。临界区就是被同步执行的代码区域，临界区中的代码具有原子性，不可分割，不可被中断。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wuhaodong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/24 15:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//临界区开始</span></span><br><span class="line">    <span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">criticalSection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//代码1</span></span><br><span class="line">        <span class="comment">//代码2</span></span><br><span class="line">        <span class="comment">//代码3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//临界区结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><ul><li>可见性：B线程能马上看到A线程更改的数据。</li><li>原子性：原子性是指一组操作在执行时不能被打断。如果在中间执行其他操作会导致这一组操作不连续，获得错误的结果，即非原子性。</li><li>禁止代码重排序</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>当想实现一个变量的值被更改，而其他线程能取到最新的值时，就要对变量使用volatile</li><li>如果多个线程对同一个对象中的同一个实例变量进行写操作，为了避免出现非线程安全问题，就要使用synchronized。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 同步 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程编程的目标</title>
      <link href="/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E7%9A%84%E7%9B%AE%E6%A0%87/"/>
      <url>/2023/02/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E7%9A%84%E7%9B%AE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程编程的目标"><a href="#多线程编程的目标" class="headerlink" title="多线程编程的目标"></a>多线程编程的目标</h1><ul><li>串行：依次做完每件事。</li><li>并发：一个人同时做多件事。</li><li>并行：并发的极致，三个人同时做三件事。</li></ul><h2 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h2><p>一个类在单线程环境下运行正常，在多线程环境下也能正常运行，那么称其是线程安全的。</p><h3 id="原子性："><a href="#原子性：" class="headerlink" title="原子性："></a>原子性：</h3><p>不可分割。在读、写某个共享变量的操作从其执行线程以外的任何线程来看，该操作要么已经执行结束，要么尚未发生，不能看见其中间效果。</p><blockquote><p>原子操作时针对访问共享变量的操作而言的，局部变量访问无所谓是否设计原子操作。</p></blockquote><h4 id="保证方式："><a href="#保证方式：" class="headerlink" title="保证方式："></a>保证方式：</h4><ul><li>使用锁（LOCK）。锁具有排他性，能够保障一个共享变量在任意时刻只能够被一个线程访问，消除竞态。</li><li>利用处理器提供的CAS（compare and Swap）指令，CAS指令实现原子性的方式与锁实现原子性的实质是相同的，差别在于锁通常是在软件层次实现，而CAS是在硬件层次，也被看作“硬件锁”。</li></ul><p>在Java语言中，除long型和double型以外的基础类型变量的写操作都是原子操作，这点由Java语言规范（JTS，Java Languange Specification）规定，由Java虚拟机具体实现。</p><p>在多个线程并发访问同一long/double型变量时，可以使用volatile关键字修饰。</p><p>原子操作+原子操作得到的复合操作并不是原子操作。</p><h3 id="可见性："><a href="#可见性：" class="headerlink" title="可见性："></a>可见性：</h3><p>在多线程环境下，一个线程对某个共享变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，这就是线程的可见性。</p><h4 id="造成原因："><a href="#造成原因：" class="headerlink" title="造成原因："></a>造成原因：</h4><p>程序中变量可能被分配到寄存器，而不是主存中进行存储，两个线程分别运行在不同处理器上，而这两个线程所共享的变量却被分配到寄存器上进行存储，就会产生可见性问题。即便共享变量分配到主存中，也无法保证可见性，因为处理器对主存的访问不是直接的，而是通过高速缓存(Cache)子系统进行的。而一个处理器上运行的线程对变量的更新可能只是更新到写缓存器（Store Buffer）中，还没有到达高速缓冲甚至主存。而另一个处理器的写缓冲器的内容无法被另外一个处理器读取，因此运行在另外一个处理器的线程无法看到这个共享变量的更新。</p><h4 id="保证方式：-1"><a href="#保证方式：-1" class="headerlink" title="保证方式："></a>保证方式：</h4><p>使用volatile关键字，提示JIT编译器被修饰的变量被多个线程共享，阻止JIT编译器做出可能导致程序运行不正常的优化。读取volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，从而保障可见性。</p><h3 id="有序性："><a href="#有序性：" class="headerlink" title="有序性："></a>有序性：</h3><p>无论什么情况下一个处理器执行一个线程所执行的内存访问操作在另外一个线程看来都是乱序的，即内存访问操作的顺序看起来像是发生了变化。</p><h4 id="重排序："><a href="#重排序：" class="headerlink" title="重排序："></a>重排序：</h4><p>编译器可能改变两个操作的先后顺序，处理器可能不是完全依照程序的模板代码所指定的顺序执行指令；一个处理器上所执行的多个操作，从其他处理器的角度来看其顺序可能与目标代码所指定的顺序不一致，这种现象叫作重排序。</p><p>重排序是对内存访问有关操作所做的一种优化，可以在不影响单线程程序正确性的情况下提升程序的性能。但是会对多线程的正确性产生影响。</p><h6 id="可能产生来源："><a href="#可能产生来源：" class="headerlink" title="可能产生来源："></a>可能产生来源：</h6><ul><li>源代码顺序：源代码中所指定的内存访问操作顺序。</li><li>程序顺序：在给定处理器上运行的目标代码所指定操作内存的顺序。</li><li>执行顺序：内存访问操作在给定处理器上的实际执行顺序。</li><li>感知顺序：给定处理器所感知到的该处理器及其他处理器内存访问操作发生的顺序。</li></ul><h4 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h4><p>Java平台几乎不会执行指令重排序，在其他编译型语言（如C++）可能会。</p><blockquote><p>Java平台包含两种编译器：静态编译器：javac；动态编译器：JIT编译器。前者是将java源代码.java文件编译成字节码.class文件；后者是将字节码动态编译为Java虚拟机宿主机的本地代码（机器码），它是在Java程序运行过程中介入的。</p></blockquote><h4 id="存储子系统重排序"><a href="#存储子系统重排序" class="headerlink" title="存储子系统重排序"></a>存储子系统重排序</h4><p>处理器不是直接访问主内存，而是通过高速缓存，现代处理器还引入了缓冲器以提高高速缓存操作的效率，我们将写缓冲器和高速缓存统称为存储子系统。</p><p>即使在处理器严格依照程序顺序执行两个内存访问操作的情况下，在存储子系统的作用下其他处理器对这两个操作的感知顺序依然可能与程序顺序不一致，这种现象就是存储子系统重排序，也被称为内存重排序。</p><p>指令重排序的对象是指令，它是对指令的顺序进行调整，而存储子系统重排序是一种现象而不是一种动作，它没有真正对指令顺序进行过调整，而只是造成了一种指令执行顺序像是被调整过一样的现象。</p><h4 id="貌似串行语义"><a href="#貌似串行语义" class="headerlink" title="貌似串行语义"></a>貌似串行语义</h4><p>重排序不是随意对指令、内存操作的结果进行杂乱无章的排序或者顺序调整，而是遵循一定规则。它会从单线程程序的角度保证重排序后的运行结果不会影响程序的正确性，并不能保证多线程环境下程序的正确性。</p><h4 id="保证内存访问的顺序性"><a href="#保证内存访问的顺序性" class="headerlink" title="保证内存访问的顺序性"></a>保证内存访问的顺序性</h4><p>通过禁止重排序是通过调用处理器提供相应的指令（内存屏障）来实现的。可以使用volatile关键字，synchronized关键字来实现。</p><blockquote><p>可见性是有序性的基础。有序性影响可见性。</p></blockquote><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><p>一个处理器在同时间段内运行多个线程。</p><h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><p>从Java角度看，一个线程的生命周期状态在RUNNABLE状态与非RUNNABLE状态（包括BLOCKED,WAITING,TIMED和TIMED_WAITING）之间切换的过程就是一个上下文切换的过程。</p><p>一个线程在其运行过程中执行下列任意一个方法都会引起自发性上下文切换</p><ul><li>Threa.sleep(Long millis)</li><li>Obhect.wait()/wait(long timeout)/wait(long timeout,int nanos)</li><li>Thread.yield()</li><li>Thread.join()/Thread.join(long timeout)</li><li>LockSupport.park()</li></ul><p>线程发起I/O操作或等待其他线程所持有的锁也会导致自发性上下文切换。</p><h3 id="开销"><a href="#开销" class="headerlink" title="开销"></a>开销</h3><ul><li>时间开销</li><li>线程调度器进行线程调度的开销</li><li>处理器高速缓存重新加载的开销</li><li>上下文切换也可能导致整个一级高速缓存中的内容被冲刷，即一级高速缓存中的内容会被写入下一级高速缓存或主内存中。</li></ul><h3 id="线程的活性故障"><a href="#线程的活性故障" class="headerlink" title="线程的活性故障"></a>线程的活性故障</h3><p>由资源稀缺性或者程序自身的问题和缺陷导致线程一只处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象被称为线程活性障碍。</p><p>常见的活性障碍：</p><ul><li>死锁（DeadLock）：”鹬蚌相争“，一个线程X持有资源A的时候等待另一个线程释放资源B，而另外一个线程Y在持有资源B的时候却等待X释放A。</li><li>锁死（Lockout）：睡美人得到王子的亲吻才会苏醒，但是王子挂了。</li><li>活锁（Livelock）：小猫想抓住自己的尾巴，始终无法追到。</li><li>饥饿（Starvation）：母鸟给瘦弱的小鸟喂食，但是每次都被强壮的小鸟抢走，导致瘦弱的鸟饥饿。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程的安全性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程与线程</title>
      <link href="/2023/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>进程是程序运行的实例，如运行一个Java程序的实质就是启动一个Java虚拟机进程。进程是程序向操作系统申请资源的基本单位。</p><p>线程是进程可执行的最小单位。一个进程可以包含多个线程，一个进程中的所有线程共享该进程中的资源，如内存空间，文件句柄。</p><h2 id="Java线程"><a href="#Java线程" class="headerlink" title="Java线程"></a>Java线程</h2><p>Java标准类库java.lang.Thead就是Java平台对线程的实现。Thread类或其子类的实例就是一个线程。</p><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><p>运行一个线程实际上就是让Java虚拟机执行该线程的run方法，而启动一个线程的方法是Tread类的start方法。启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器Scheduler决定的。start方法调用结束并不意味相应线程已经开始运行，这个线程可能稍后才被运行，甚至也可能永远不会被运行。</p><p>Java语言创建线程有四种方式。第一种是通过Thread类无参构造器Thread()：定义Thread类的子类，在该子类中覆盖run方法并实现线程处理逻辑；第二种种是第二个构造器Thread(Runnable targe)：创建一个java.lang.Runnable接口的实例，并且在该实例的run方法实现处理逻辑，然后以该Runnable接口实例作为构造器的参数直接new一个Thread类的实例；第三种是通过ExecutorService和Callable<Class>实现有返回值的线程；第四种是基于线程池。</Class></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span></span><br></pre></td></tr></table></figure><p>Threa类实现了Runnable接口。</p></blockquote><p><img src="/2023/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/image-20230303143814315.png" alt="image-20230303143814315"></p><h5 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个线程！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CreateThread</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>start()方法是一个native方法。</p></blockquote><h5 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个线程！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CreateThread</span> <span class="variable">createThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateThread</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(createThread,<span class="string">&quot;线程名称&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在实现Runnable的线程实例target作为参数传入Thread后，Thread的run方法在执行时就会调用target.run方法并执行该线程具体的实现逻辑。JDK源码如下</p><p><img src="/2023/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/image-20230303144417298.png" alt="image-20230303144417298"></p></blockquote><p>一旦现成的run方法执行结束，相应线程的运行也就结束了。并且无法通过重新调用一个已经运行结束的start方法使其重新运行。start方法只能够调用一次，多次调用将抛出异常：IllegalThreadStateException。</p><h5 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h5><p>通过ExecutorService和Callable<Class>实现有返回值的线程，创建一个类并实现Callable接口，在call方法中实现具体的运算逻辑并返回计算结果。</Class></p><p>具体的调用过程为：创建一个线程池，一个用于接收返回结果的Future List及Callable线程实例，使用线程池提交任务并将线程执行之后的结果保存在Future中，在线程执行结束后遍历Future List中的Future对象，在该对象上调用get方法就可以获取Callable线程任务返回的数据并汇总结果。实现如下：</p><p><img src="/2023/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/image-20230303153333773.png" alt="image-20230303153333773"></p><p><img src="/2023/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/image-20230303153352249.png" alt="image-20230303153352249"></p><h5 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h5><p>基于线程池。</p><p><img src="/2023/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/image-20230303154657538.png" alt="image-20230303154657538"></p><h3 id="线程属性"><a href="#线程属性" class="headerlink" title="线程属性"></a>线程属性</h3><div class="table-container"><table><thead><tr><th>属性</th><th>属性类型及用途</th><th>只读属性</th><th>重要事项</th></tr></thead><tbody><tr><td>编号ID</td><td>long型，区别不同线程</td><td>是</td><td>线程结束后，之前的编号可以被后面的线程所使用，因此不适合作为某种唯一标识</td></tr><tr><td>名称Name</td><td>Strign型，主要给人看区别线程，默认格式为：Thread-编号</td><td>否</td><td>设置名称有助于代码调试与定位，名称可以设置为相同</td></tr><tr><td>类别Daemon</td><td>boolean型，为true是该线程为守护线程，否则为用户线程。默认值与父线程相同</td><td>否</td><td>必须在启动前设置，即调用start方法前</td></tr><tr><td>优先级Priority</td><td>int型，用于给线程调度器提示，默认值为5</td><td>否</td><td>不恰当设置可能导致严重问题，如线程饥饿</td></tr></tbody></table></div><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法</th><th>功能</th><th>备注</th></tr></thead><tbody><tr><td>currentThread()</td><td>返回当前线程，即当前代码的执行线程对象</td><td>同一段代码调用返回值可能对应不同线程对象</td></tr><tr><td>run()</td><td>实现线程任务处理逻辑</td><td>该方法有java虚拟机直接调用，应用程序一般不应调用</td></tr><tr><td>start()</td><td>启动相应线程</td><td>返回不代表线程已经启动，重复调用会抛出异常</td></tr><tr><td>join()</td><td>等待响应线程运行结束</td><td>线程A调用线程B的join方法，线程A的运行会被暂停，直到线程B的运行结束</td></tr><tr><td>yield()</td><td>使线程主动放弃对CPU的展占用，可能导致当前线程被暂停</td><td>该方法不可靠，线程被调用时仍可能继续运行</td></tr><tr><td>sleep(long millis)</td><td>使当前线程休眠指定的时间</td></tr></tbody></table></div><h3 id="线程的层次关系"><a href="#线程的层次关系" class="headerlink" title="线程的层次关系"></a>线程的层次关系</h3><h4 id="父子关系："><a href="#父子关系：" class="headerlink" title="父子关系："></a>父子关系：</h4><p>子线程1创建了子线程11，那么子线程11线程为子线程1的子线程，子线程1为线程11的父线程。</p><p><img src="/2023/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/线程层级关系.png" alt="线程生命周期"></p><h3 id="线程的生命周期状态"><a href="#线程的生命周期状态" class="headerlink" title="线程的生命周期状态"></a>线程的生命周期状态</h3><p><img src="/2023/02/22/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/线程生命周期.png" alt="线程生命周期"></p><h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><p>Java线程的状态可以使用监控工具查看，也可以通过Thread.getState()调用来获取。</p><ul><li><p>NEW：已创建而未启动，因为一个线程只能被创建一次，因此一个线程也只能有一次处于该状态。</p></li><li><p>RUNNABLE：该状态为复合态，它包含READY和RUNNING。处于READY状态的线程被称为活跃线程。</p></li><li>BLOCKED：一个线程发起一个阻塞式I/O操作，或申请一个由其他线程持有的独占资源（锁）时，相应的线程会处于该状态。</li><li>WAITING：一个线程执行某种特定方法之后就会处于这种等待其他线程执行另外一些操作的状态。</li><li>TIMED_WAITING：和WAITING类似，这个是处于哟时间的等待。</li><li>TERMINATED：已经执行结束的线程处于该状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-IO基础</title>
      <link href="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="IO-流简介"><a href="#IO-流简介" class="headerlink" title="IO 流简介"></a>IO 流简介</h1><p>IO 即 <code>Input/Output</code>，输入和输出。数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。数据传输过程类似于水流，因此称为 IO 流。IO 流在 Java 中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。</p><p>Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li><code>InputStream</code>/<code>Reader</code>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li><code>OutputStream</code>/<code>Writer</code>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="InputStream（字节输入流）"><a href="#InputStream（字节输入流）" class="headerlink" title="InputStream（字节输入流）"></a>InputStream（字节输入流）</h3><p><code>InputStream</code>用于从源头（通常是文件）读取数据（字节信息）到内存中，<code>java.io.InputStream</code>抽象类是所有字节输入流的父类。</p><p><code>InputStream</code> 常用方法：</p><ul><li><code>read()</code>：返回输入流中下一个字节的数据。返回的值介于 0 到 255 之间。如果未读取任何字节，则代码返回 <code>-1</code> ，表示文件结束。</li><li><code>read(byte b[ ])</code> : 从输入流中读取一些字节存储到数组 <code>b</code> 中。如果数组 <code>b</code> 的长度为零，则不读取。如果没有可用字节读取，返回 <code>-1</code>。如果有可用字节读取，则最多读取的字节数最多等于 <code>b.length</code> ， 返回读取的字节数。这个方法等价于 <code>read(b, 0, b.length)</code>。</li><li><code>read(byte b[], int off, int len)</code>：在<code>read(byte b[ ])</code> 方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code> 参数（要读取的最大字节数）。</li><li><code>skip(long n)</code>：忽略输入流中的 n 个字节 ,返回实际忽略的字节数。</li><li><code>available()</code>：返回输入流中可以读取的字节数。</li><li><code>close()</code>：关闭输入流释放相关的系统资源。</li></ul><p>从 Java 9 开始，<code>InputStream</code> 新增加了多个实用的方法：</p><ul><li><code>readAllBytes()</code>：读取输入流中的所有字节，返回字节数组。</li><li><code>readNBytes(byte[] b, int off, int len)</code>：阻塞直到读取 <code>len</code> 个字节。</li><li><code>transferTo(OutputStream out)</code>：将所有字节从一个输入流传递到一个输出流。</li></ul><p><code>FileInputStream</code> 是一个比较常用的字节输入流对象，可直接指定文件路径，可以直接读取单字节数据，也可以读取至字节数组中。</p><p><code>FileInputStream</code> 代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>)) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Number of remaining bytes:&quot;</span></span><br><span class="line">            + fis.available());</span><br><span class="line">    <span class="type">int</span> content;</span><br><span class="line">    <span class="type">long</span> <span class="variable">skip</span> <span class="operator">=</span> fis.skip(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;The actual number of bytes skipped:&quot;</span> + skip);</span><br><span class="line">    System.out.print(<span class="string">&quot;The content read from file:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((content = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print((<span class="type">char</span>) content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>input.txt</code> 文件内容：</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/image-20220419155214614-17177431822042.png" alt="img"></p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Number of remaining bytes:11</span><br><span class="line">The actual number of bytes skipped:2</span><br><span class="line">The content read from file:JavaGuide</span><br></pre></td></tr></table></figure><p>不过，一般我们是不会直接单独使用 <code>FileInputStream</code> ，通常会配合 <code>BufferedInputStream</code>（字节缓冲输入流，后文会讲到）来使用。</p><p>像下面这段代码在我们的项目中就比较常见，我们通过 <code>readAllBytes()</code> 读取输入流所有字节并将其直接赋值给一个 <code>String</code> 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个 BufferedInputStream 对象</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 读取文件的内容并复制到 String 对象中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bufferedInputStream.readAllBytes());</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><p><code>DataInputStream</code> 用于读取指定类型数据，不能单独使用，必须结合其它流，比如 <code>FileInputStream</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"><span class="comment">//必须将fileInputStream作为构造参数才能使用</span></span><br><span class="line"><span class="type">DataInputStream</span> <span class="variable">dataInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(fileInputStream);</span><br><span class="line"><span class="comment">//可以读取任意具体的类型数据</span></span><br><span class="line">dataInputStream.readBoolean();</span><br><span class="line">dataInputStream.readInt();</span><br><span class="line">dataInputStream.readUTF();</span><br></pre></td></tr></table></figure><p><code>ObjectInputStream</code> 用于从输入流中读取 Java 对象（反序列化），<code>ObjectOutputStream</code> 用于将对象写入到输出流(序列化)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.data&quot;</span>));</span><br><span class="line"><span class="type">MyClass</span> <span class="variable">object</span> <span class="operator">=</span> (MyClass) input.readObject();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure><p>另外，用于序列化和反序列化的类必须实现 <code>Serializable</code> 接口，对象中如果有属性不想被序列化，使用 <code>transient</code> 修饰。</p><h3 id="OutputStream（字节输出流）"><a href="#OutputStream（字节输出流）" class="headerlink" title="OutputStream（字节输出流）"></a>OutputStream（字节输出流）</h3><p><code>OutputStream</code>用于将数据（字节信息）写入到目的地（通常是文件），<code>java.io.OutputStream</code>抽象类是所有字节输出流的父类。</p><p><code>OutputStream</code> 常用方法：</p><ul><li><code>write(int b)</code>：将特定字节写入输出流。</li><li><code>write(byte b[ ])</code> : 将数组<code>b</code> 写入到输出流，等价于 <code>write(b, 0, b.length)</code> 。</li><li><code>write(byte[] b, int off, int len)</code> : 在<code>write(byte b[ ])</code> 方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code> 参数（要读取的最大字节数）。</li><li><code>flush()</code>：刷新此输出流并强制写出所有缓冲的输出字节。</li><li><code>close()</code>：关闭输出流释放相关的系统资源。</li></ul><p><code>FileOutputStream</code> 是最常用的字节输出流对象，可直接指定文件路径，可以直接输出单字节数据，也可以输出指定的字节数组。</p><p><code>FileOutputStream</code> 代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>)) &#123;</span><br><span class="line">    <span class="type">byte</span>[] array = <span class="string">&quot;JavaGuide&quot;</span>.getBytes();</span><br><span class="line">    output.write(array);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/image-20220419155514392-17177436859504.png" alt="img"></p><p>类似于 <code>FileInputStream</code>，<code>FileOutputStream</code> 通常也会配合 <code>BufferedOutputStream</code>（字节缓冲输出流，后文会讲到）来使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fileOutputStream)</span><br></pre></td></tr></table></figure><p><strong><code>DataOutputStream</code></strong> 用于写入指定类型数据，不能单独使用，必须结合其它流，比如 <code>FileOutputStream</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出流</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.txt&quot;</span>);</span><br><span class="line"><span class="type">DataOutputStream</span> <span class="variable">dataOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(fileOutputStream);</span><br><span class="line"><span class="comment">// 输出任意数据类型</span></span><br><span class="line">dataOutputStream.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">dataOutputStream.writeByte(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><code>ObjectInputStream</code> 用于从输入流中读取 Java 对象（<code>ObjectInputStream</code>,反序列化），<code>ObjectOutputStream</code>将对象写入到输出流(<code>ObjectOutputStream</code>，序列化)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;file.txt&quot;</span>)</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;hodong&quot;</span>, <span class="string">&quot;Hao dong&quot;</span>);</span><br><span class="line">output.writeObject(person);</span><br></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节。 <strong>那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</strong></p><p>个人认为主要有两点原因：</p><ul><li>字符流是由 Java 虚拟机将字节转换得到的，这个过程还算是比较耗时。</li><li>如果我们不知道编码类型就很容易出现乱码问题。</li></ul><p>乱码问题这个很容易就可以复现，我们只需要将上面提到的 <code>FileInputStream</code> 代码示例中的 <code>input.txt</code> 文件内容改为中文即可，原代码不需要改动。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/image-20220419154632551-17177437072286.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Number of remaining bytes:9</span><br><span class="line">The actual number of bytes skipped:2</span><br><span class="line">The content read from file:§å®¶å¥½</span><br></pre></td></tr></table></figure><p>可以很明显地看到读取出来的内容已经变成了乱码。</p><p>因此，I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><p>字符流默认采用的是 <code>Unicode</code> 编码，我们可以通过构造方法自定义编码。顺便分享一下之前遇到的笔试题：常用字符编码所占字节数？<code>utf8</code> :英文占 1 字节，中文占 3 字节，<code>unicode</code>：任何字符都占 2 个字节，<code>gbk</code>：英文占 1 字节，中文占 2 字节。</p><h3 id="Reader（字符输入流）"><a href="#Reader（字符输入流）" class="headerlink" title="Reader（字符输入流）"></a>Reader（字符输入流）</h3><p><code>Reader</code>用于从源头（通常是文件）读取数据（字符信息）到内存中，<code>java.io.Reader</code>抽象类是所有字符输入流的父类。</p><p><code>Reader</code> 用于读取文本， <code>InputStream</code> 用于读取原始字节。</p><p><code>Reader</code> 常用方法：</p><ul><li><code>read()</code> : 从输入流读取一个字符。</li><li><code>read(char[] cbuf)</code> : 从输入流中读取一些字符，并将它们存储到字符数组 <code>cbuf</code>中，等价于 <code>read(cbuf, 0, cbuf.length)</code> 。</li><li><code>read(char[] cbuf, int off, int len)</code>：在<code>read(char[] cbuf)</code> 方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code> 参数（要读取的最大字符数）。</li><li><code>skip(long n)</code>：忽略输入流中的 n 个字符 ,返回实际忽略的字符数。</li><li><code>close()</code> : 关闭输入流并释放相关的系统资源。</li></ul><p><code>InputStreamReader</code> 是字节流转换为字符流的桥梁，其子类 <code>FileReader</code> 是基于该基础上的封装，可以直接操作字符文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字节流转换为字符流的桥梁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用于读取字符文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader</span> <span class="keyword">extends</span> <span class="title class_">InputStreamReader</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileReader</code> 代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>);) &#123;</span><br><span class="line">    <span class="type">int</span> content;</span><br><span class="line">    <span class="type">long</span> <span class="variable">skip</span> <span class="operator">=</span> fileReader.skip(<span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;The actual number of bytes skipped:&quot;</span> + skip);</span><br><span class="line">    System.out.print(<span class="string">&quot;The content read from file:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((content = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print((<span class="type">char</span>) content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>input.txt</code> 文件内容：</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/image-20220419154632551-17177437405397-17177437415309.png" alt="img"></p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The actual number of bytes skipped:3</span><br><span class="line">The content read from file:我是Guide。</span><br></pre></td></tr></table></figure><h3 id="Writer（字符输出流）"><a href="#Writer（字符输出流）" class="headerlink" title="Writer（字符输出流）"></a>Writer（字符输出流）</h3><p><code>Writer</code>用于将数据（字符信息）写入到目的地（通常是文件），<code>java.io.Writer</code>抽象类是所有字符输出流的父类。</p><p><code>Writer</code> 常用方法：</p><ul><li><code>write(int c)</code> : 写入单个字符。</li><li><code>write(char[] cbuf)</code>：写入字符数组 <code>cbuf</code>，等价于<code>write(cbuf, 0, cbuf.length)</code>。</li><li><code>write(char[] cbuf, int off, int len)</code>：在<code>write(char[] cbuf)</code> 方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code> 参数（要读取的最大字符数）。</li><li><code>write(String str)</code>：写入字符串，等价于 <code>write(str, 0, str.length())</code> 。</li><li><code>write(String str, int off, int len)</code>：在<code>write(String str)</code> 方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code> 参数（要读取的最大字符数）。</li><li><code>append(CharSequence csq)</code>：将指定的字符序列附加到指定的 <code>Writer</code> 对象并返回该 <code>Writer</code> 对象。</li><li><code>append(char c)</code>：将指定的字符附加到指定的 <code>Writer</code> 对象并返回该 <code>Writer</code> 对象。</li><li><code>flush()</code>：刷新此输出流并强制写出所有缓冲的输出字符。</li><li><code>close()</code>:关闭输出流释放相关的系统资源。</li></ul><p><code>OutputStreamWriter</code> 是字符流转换为字节流的桥梁，其子类 <code>FileWriter</code> 是基于该基础上的封装，可以直接将字符写入到文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符流转换为字节流的桥梁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter</span> <span class="keyword">extends</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用于写入字符到文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriter</span> <span class="keyword">extends</span> <span class="title class_">OutputStreamWriter</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileWriter</code> 代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">Writer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>)) &#123;</span><br><span class="line">    output.write(<span class="string">&quot;你好，我是Guide。&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/image-20220419155802288-171774376724911.png" alt="img"></p><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p>IO 操作是很消耗性能的，缓冲流将数据加载至缓冲区，一次性读取/写入多个字节，从而避免频繁的 IO 操作，提高流的传输效率。</p><p>字节缓冲流这里采用了装饰器模式来增强 <code>InputStream</code> 和<code>OutputStream</code>子类对象的功能。</p><p>举个例子，我们可以通过 <code>BufferedInputStream</code>（字节缓冲输入流）来增强 <code>FileInputStream</code> 的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个 BufferedInputStream 对象</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>));</span><br></pre></td></tr></table></figure><p>字节流和字节缓冲流的性能差别主要体现在我们使用两者的时候都是调用 <code>write(int b)</code> 和 <code>read()</code> 这两个一次只读取一个字节的方法的时候。由于字节缓冲流内部有缓冲区（字节数组），因此，字节缓冲流会先将读取到的字节存放在缓存区，大幅减少 IO 次数，提高读取效率。</p><p>我使用 <code>write(int b)</code> 和 <code>read()</code> 方法，分别通过字节流和字节缓冲流复制一个 <code>524.9 mb</code> 的 PDF 文件耗时对比如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用缓冲流复制PDF文件总耗时:<span class="number">15428</span> 毫秒</span><br><span class="line">使用普通字节流复制PDF文件总耗时:<span class="number">2555062</span> 毫秒</span><br></pre></td></tr></table></figure><p>两者耗时差别非常大，缓冲流耗费的时间是字节流的 1/165。</p><p>测试代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy_pdf_to_another_pdf_buffer_stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;深入理解计算机操作系统.pdf&quot;</span>));</span><br><span class="line">         <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;深入理解计算机操作系统-副本.pdf&quot;</span>))) &#123;</span><br><span class="line">        <span class="type">int</span> content;</span><br><span class="line">        <span class="keyword">while</span> ((content = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用缓冲流复制PDF文件总耗时:&quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy_pdf_to_another_pdf_stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;深入理解计算机操作系统.pdf&quot;</span>);</span><br><span class="line">         <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;深入理解计算机操作系统-副本.pdf&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">int</span> content;</span><br><span class="line">        <span class="keyword">while</span> ((content = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用普通流复制PDF文件总耗时:&quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是调用 <code>read(byte b[])</code> 和 <code>write(byte b[], int off, int len)</code> 这两个写入一个字节数组的方法的话，只要字节数组的大小合适，两者的性能差距其实不大，基本可以忽略。</p><p>这次我们使用 <code>read(byte b[])</code> 和 <code>write(byte b[], int off, int len)</code> 方法，分别通过字节流和字节缓冲流复制一个 524.9 mb 的 PDF 文件耗时对比如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用缓冲流复制PDF文件总耗时:695 毫秒</span><br><span class="line">使用普通字节流复制PDF文件总耗时:989 毫秒</span><br></pre></td></tr></table></figure><p>两者耗时差别不是很大，缓冲流的性能要略微好一点点。</p><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy_pdf_to_another_pdf_with_byte_array_buffer_stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;深入理解计算机操作系统.pdf&quot;</span>));</span><br><span class="line">         <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;深入理解计算机操作系统-副本.pdf&quot;</span>))) &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用缓冲流复制PDF文件总耗时:&quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy_pdf_to_another_pdf_with_byte_array_stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;深入理解计算机操作系统.pdf&quot;</span>);</span><br><span class="line">         <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;深入理解计算机操作系统-副本.pdf&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用普通流复制PDF文件总耗时:&quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BufferedInputStream（字节缓冲输入流）"><a href="#BufferedInputStream（字节缓冲输入流）" class="headerlink" title="BufferedInputStream（字节缓冲输入流）"></a>BufferedInputStream（字节缓冲输入流）</h3><p><code>BufferedInputStream</code> 从源头（通常是文件）读取数据（字节信息）到内存的过程中不会一个字节一个字节的读取，而是会先将读取到的字节存放在缓存区，并从内部缓冲区中单独读取字节。这样大幅减少了 IO 次数，提高了读取效率。</p><p><code>BufferedInputStream</code> 内部维护了一个缓冲区，这个缓冲区实际就是一个字节数组，通过阅读 <code>BufferedInputStream</code> 源码即可得到这个结论。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedInputStream</span> <span class="keyword">extends</span> <span class="title class_">FilterInputStream</span> &#123;</span><br><span class="line">    <span class="comment">// 内部缓冲区数组</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="type">byte</span> buf[];</span><br><span class="line">    <span class="comment">// 缓冲区的默认大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DEFAULT_BUFFER_SIZE</span> <span class="operator">=</span> <span class="number">8192</span>;</span><br><span class="line">    <span class="comment">// 使用默认的缓冲区大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedInputStream</span><span class="params">(InputStream in)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(in, DEFAULT_BUFFER_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义缓冲区大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedInputStream</span><span class="params">(InputStream in, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(in);</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Buffer size &lt;= 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buf = <span class="keyword">new</span> <span class="title class_">byte</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓冲区的大小默认为 <strong>8192</strong> 字节，当然了，你也可以通过 <code>BufferedInputStream(InputStream in, int size)</code> 这个构造方法来指定缓冲区的大小。</p><h3 id="BufferedOutputStream（字节缓冲输出流）"><a href="#BufferedOutputStream（字节缓冲输出流）" class="headerlink" title="BufferedOutputStream（字节缓冲输出流）"></a>BufferedOutputStream（字节缓冲输出流）</h3><p><code>BufferedOutputStream</code> 将数据（字节信息）写入到目的地（通常是文件）的过程中不会一个字节一个字节的写入，而是会先将要写入的字节存放在缓存区，并从内部缓冲区中单独写入字节。这样大幅减少了 IO 次数，提高了读取效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>))) &#123;</span><br><span class="line">    <span class="type">byte</span>[] array = <span class="string">&quot;hodong&quot;</span>.getBytes();</span><br><span class="line">    bos.write(array);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于 <code>BufferedInputStream</code> ，<code>BufferedOutputStream</code> 内部也维护了一个缓冲区，并且，这个缓存区的大小也是 <strong>8192</strong> 字节。</p><h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><p><code>BufferedReader</code> （字符缓冲输入流）和 <code>BufferedWriter</code>（字符缓冲输出流）类似于 <code>BufferedInputStream</code>（字节缓冲输入流）和<code>BufferedOutputStream</code>（字节缓冲输入流），内部都维护了一个字节数组作为缓冲区。不过，前者主要是用来操作字符信息。</p><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>下面这段代码大家经常使用吧？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;Hello！&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Hello！&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>System.out</code> 实际是用于获取一个 <code>PrintStream</code> 对象，<code>print</code>方法实际调用的是 <code>PrintStream</code> 对象的 <code>write</code> 方法。</p><p><code>PrintStream</code> 属于字节打印流，与之对应的是 <code>PrintWriter</code> （字符打印流）。<code>PrintStream</code> 是 <code>OutputStream</code> 的子类，<code>PrintWriter</code> 是 <code>Writer</code> 的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStream</span> <span class="keyword">extends</span> <span class="title class_">FilterOutputStream</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Appendable</span>, Closeable &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintWriter</span> <span class="keyword">extends</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="随机访问流"><a href="#随机访问流" class="headerlink" title="随机访问流"></a>随机访问流</h2><p>这里要介绍的随机访问流指的是支持随意跳转到文件的任意位置进行读写的 <code>RandomAccessFile</code> 。</p><p><code>RandomAccessFile</code> 的构造方法如下，我们可以指定 <code>mode</code>（读写模式）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openAndDelete 参数默认为 false 表示打开文件并且这个文件不会被删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RandomAccessFile</span><span class="params">(File file, String mode)</span></span><br><span class="line">    <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="built_in">this</span>(file, mode, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 私有方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">RandomAccessFile</span><span class="params">(File file, String mode, <span class="type">boolean</span> openAndDelete)</span>  <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">  <span class="comment">// 省略大部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读写模式主要有下面四种：</p><ul><li><code>r</code> : 只读模式。</li><li><code>rw</code>: 读写模式</li><li><code>rws</code>: 相对于 <code>rw</code>，<code>rws</code> 同步更新对“文件的内容”或“元数据”的修改到外部存储设备。</li><li><code>rwd</code> : 相对于 <code>rw</code>，<code>rwd</code> 同步更新对“文件的内容”的修改到外部存储设备。</li></ul><p>文件内容指的是文件中实际保存的数据，元数据则是用来描述文件属性比如文件的大小信息、创建和修改时间。</p><p><code>RandomAccessFile</code> 中有一个文件指针用来表示下一个将要被写入或者读取的字节所处的位置。我们可以通过 <code>RandomAccessFile</code> 的 <code>seek(long pos)</code> 方法来设置文件指针的偏移量（距文件开头 <code>pos</code> 个字节处）。如果想要获取文件指针当前的位置的话，可以使用 <code>getFilePointer()</code> 方法。</p><p><code>RandomAccessFile</code> 代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;input.txt&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;读取之前的偏移量：&quot;</span> + randomAccessFile.getFilePointer() + <span class="string">&quot;,当前读取到的字符&quot;</span> + (<span class="type">char</span>) randomAccessFile.read() + <span class="string">&quot;，读取之后的偏移量：&quot;</span> + randomAccessFile.getFilePointer());</span><br><span class="line"><span class="comment">// 指针当前偏移量为 6</span></span><br><span class="line">randomAccessFile.seek(<span class="number">6</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;读取之前的偏移量：&quot;</span> + randomAccessFile.getFilePointer() + <span class="string">&quot;,当前读取到的字符&quot;</span> + (<span class="type">char</span>) randomAccessFile.read() + <span class="string">&quot;，读取之后的偏移量：&quot;</span> + randomAccessFile.getFilePointer());</span><br><span class="line"><span class="comment">// 从偏移量 7 的位置开始往后写入字节数据</span></span><br><span class="line">randomAccessFile.write(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// 指针当前偏移量为 0，回到起始位置</span></span><br><span class="line">randomAccessFile.seek(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;读取之前的偏移量：&quot;</span> + randomAccessFile.getFilePointer() + <span class="string">&quot;,当前读取到的字符&quot;</span> + (<span class="type">char</span>) randomAccessFile.read() + <span class="string">&quot;，读取之后的偏移量：&quot;</span> + randomAccessFile.getFilePointer());</span><br></pre></td></tr></table></figure><p><code>input.txt</code> 文件内容：</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/image-20220421162050158-171774379804713.png" alt="img"></p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">读取之前的偏移量：0,当前读取到的字符A，读取之后的偏移量：1</span><br><span class="line">读取之前的偏移量：6,当前读取到的字符G，读取之后的偏移量：7</span><br><span class="line">读取之前的偏移量：0,当前读取到的字符A，读取之后的偏移量：1</span><br></pre></td></tr></table></figure><p><code>input.txt</code> 文件内容变为 <code>ABCDEFGHIJK</code> 。</p><p><code>RandomAccessFile</code> 的 <code>write</code> 方法在写入对象的时候如果对应的位置已经有数据的话，会将其覆盖掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;input.txt&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">randomAccessFile.write(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><p>假设运行上面这段程序之前 <code>input.txt</code> 文件内容变为 <code>ABCD</code> ，运行之后则变为 <code>HIJK</code> 。</p><p><code>RandomAccessFile</code> 比较常见的一个应用就是实现大文件的 <strong>断点续传</strong> 。何谓断点续传？简单来说就是上传文件中途暂停或失败（比如遇到网络问题）之后，不需要重新上传，只需要上传那些未成功上传的文件分片即可。分片（先将文件切分成多个文件分片）上传是断点续传的基础。</p><p><code>RandomAccessFile</code> 可以帮助我们合并文件分片，示例代码如下：</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/20210609164749122-171774382162215.png" alt="img"></p><h1 id="Io中用到的设计模式"><a href="#Io中用到的设计模式" class="headerlink" title="Io中用到的设计模式"></a>Io中用到的设计模式</h1><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p><strong>装饰器（Decorator）模式</strong> 可以在不改变原有对象的情况下拓展其功能。</p><p>装饰器模式通过组合替代继承来扩展原始类的功能，在一些继承关系比较复杂的场景（IO 这一场景各种类的继承关系就比较复杂）更加实用。</p><p>对于字节流来说， <code>FilterInputStream</code> （对应输入流）和<code>FilterOutputStream</code>（对应输出流）是装饰器模式的核心，分别用于增强 <code>InputStream</code> 和<code>OutputStream</code>子类对象的功能。</p><p>我们常见的<code>BufferedInputStream</code>(字节缓冲输入流)、<code>DataInputStream</code> 等等都是<code>FilterInputStream</code> 的子类，<code>BufferedOutputStream</code>（字节缓冲输出流）、<code>DataOutputStream</code>等等都是<code>FilterOutputStream</code>的子类。</p><p>举个例子，我们可以通过 <code>BufferedInputStream</code>（字节缓冲输入流）来增强 <code>FileInputStream</code> 的功能。</p><p><code>BufferedInputStream</code> 构造函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedInputStream</span><span class="params">(InputStream in)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(in, DEFAULT_BUFFER_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BufferedInputStream</span><span class="params">(InputStream in, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(in);</span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Buffer size &lt;= 0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    buf = <span class="keyword">new</span> <span class="title class_">byte</span>[size];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，<code>BufferedInputStream</code> 的构造函数其中的一个参数就是 <code>InputStream</code> 。</p><p><code>BufferedInputStream</code> 代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>))) &#123;</span><br><span class="line">    <span class="type">int</span> content;</span><br><span class="line">    <span class="type">long</span> <span class="variable">skip</span> <span class="operator">=</span> bis.skip(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span> ((content = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print((<span class="type">char</span>) content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，你可以会想了：<strong>为啥我们直接不弄一个<code>BufferedFileInputStream</code>（字符缓冲文件输入流）呢？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedFileInputStream</span> <span class="variable">bfis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedFileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果 <code>InputStream</code>的子类比较少的话，这样做是没问题的。不过， <code>InputStream</code>的子类实在太多，继承关系也太复杂了。如果我们为每一个子类都定制一个对应的缓冲输入流，那岂不是太麻烦了。</p><p>如果你对 IO 流比较熟悉的话，你会发现<code>ZipInputStream</code> 和<code>ZipOutputStream</code> 还可以分别增强 <code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code> 的能力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName));</span><br><span class="line"><span class="type">ZipInputStream</span> <span class="variable">zis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(bis);</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileName));</span><br><span class="line"><span class="type">ZipOutputStream</span> <span class="variable">zipOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(bos);</span><br></pre></td></tr></table></figure><p><code>ZipInputStream</code> 和<code>ZipOutputStream</code> 分别继承自<code>InflaterInputStream</code> 和<code>DeflaterOutputStream</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InflaterInputStream</span> <span class="keyword">extends</span> <span class="title class_">FilterInputStream</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeflaterOutputStream</span> <span class="keyword">extends</span> <span class="title class_">FilterOutputStream</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也是装饰器模式很重要的一个特征，那就是可以对原始类嵌套使用多个装饰器。</p><p>为了实现这一效果，装饰器类需要跟原始类继承相同的抽象类或者实现相同的接口。上面介绍到的这些 IO 相关的装饰类和原始类共同的父类是 <code>InputStream</code> 和<code>OutputStream</code>。</p><p>对于字符流来说，<code>BufferedReader</code> 可以用来增加 <code>Reader</code> （字符输入流）子类的功能，<code>BufferedWriter</code> 可以用来增加 <code>Writer</code> （字符输出流）子类的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileName), <span class="string">&quot;UTF-8&quot;</span>));</span><br></pre></td></tr></table></figure><p>IO 流中的装饰器模式应用的例子实在是太多了，不需要特意记忆，完全没必要哈！搞清了装饰器模式的核心之后，你在使用的时候自然就会知道哪些地方运用到了装饰器模式。</p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p><strong>适配器（Adapter Pattern）模式</strong> 主要用于接口互不兼容的类的协调工作，你可以将其联想到我们日常经常使用的电源适配器。</p><p>适配器模式中存在被适配的对象或者类称为 <strong>适配者(Adaptee)</strong> ，作用于适配者的对象或者类称为<strong>适配器(Adapter)</strong> 。适配器分为对象适配器和类适配器。类适配器使用继承关系来实现，对象适配器使用组合关系来实现。</p><p>IO 流中的字符流和字节流的接口不同，它们之间可以协调工作就是基于适配器模式来做的，更准确点来说是对象适配器。通过适配器，我们可以将字节流对象适配成一个字符流对象，这样我们可以直接通过字节流对象来读取或者写入字符数据。</p><p><code>InputStreamReader</code> 和 <code>OutputStreamWriter</code> 就是两个适配器(Adapter)， 同时，它们两个也是字节流和字符流之间的桥梁。<code>InputStreamReader</code> 使用 <code>StreamDecoder</code> （流解码器）对字节进行解码，<strong>实现字节流到字符流的转换，</strong> <code>OutputStreamWriter</code> 使用<code>StreamEncoder</code>（流编码器）对字符进行编码，实现字符流到字节流的转换。</p><p><code>InputStream</code> 和 <code>OutputStream</code> 的子类是被适配者， <code>InputStreamReader</code> 和 <code>OutputStreamWriter</code>是适配器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InputStreamReader 是适配器，FileInputStream 是被适配的类</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// BufferedReader 增强 InputStreamReader 的功能（装饰器模式）</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br></pre></td></tr></table></figure><p><code>java.io.InputStreamReader</code> 部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"> <span class="comment">//用于解码的对象</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> StreamDecoder sd;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InputStreamReader</span><span class="params">(InputStream in)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 StreamDecoder 对象</span></span><br><span class="line">            sd = StreamDecoder.forInputStreamReader(in, <span class="built_in">this</span>, (String)<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用 StreamDecoder 对象做具体的读取工作</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> sd.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>java.io.OutputStreamWriter</code> 部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter</span> <span class="keyword">extends</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">    <span class="comment">// 用于编码的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StreamEncoder se;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OutputStreamWriter</span><span class="params">(OutputStream out)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(out);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 获取 StreamEncoder 对象</span></span><br><span class="line">            se = StreamEncoder.forOutputStreamWriter(out, <span class="built_in">this</span>, (String)<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用 StreamEncoder 对象做具体的写入工作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> c)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        se.write(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>适配器模式和装饰器模式有什么区别呢？</strong></p><p><strong>装饰器模式</strong> 更侧重于动态地增强原始类的功能，装饰器类需要跟原始类继承相同的抽象类或者实现相同的接口。并且，装饰器模式支持对原始类嵌套使用多个装饰器。</p><p><strong>适配器模式</strong> 更侧重于让接口不兼容而不能交互的类可以一起工作，当我们调用适配器对应的方法时，适配器内部会调用适配者类或者和适配类相关的类的方法，这个过程透明的。就比如说 <code>StreamDecoder</code> （流解码器）和<code>StreamEncoder</code>（流编码器）就是分别基于 <code>InputStream</code> 和 <code>OutputStream</code> 来获取 <code>FileChannel</code>对象并调用对应的 <code>read</code> 方法和 <code>write</code> 方法进行字节数据的读取和写入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StreamDecoder(InputStream in, Object lock, CharsetDecoder dec) &#123;</span><br><span class="line">    <span class="comment">// 省略大部分代码</span></span><br><span class="line">    <span class="comment">// 根据 InputStream 对象获取 FileChannel 对象</span></span><br><span class="line">    ch = getChannel((FileInputStream)in);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器和适配者两者不需要继承相同的抽象类或者实现相同的接口。</p><p>另外，<code>FutureTask</code> 类使用了适配器模式，<code>Executors</code> 的内部类 <code>RunnableAdapter</code> 实现属于适配器，用于将 <code>Runnable</code> 适配成 <code>Callable</code>。</p><p><code>FutureTask</code>参数包含 <code>Runnable</code> 的一个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">FutureTask</span><span class="params">(Runnable runnable, V result)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 Executors 类的 callable 方法</span></span><br><span class="line">    <span class="built_in">this</span>.callable = Executors.callable(runnable, result);</span><br><span class="line">    <span class="built_in">this</span>.state = NEW;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Executors</code>中对应的方法和适配器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际调用的是 Executors 的内部类 RunnableAdapter 的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Callable&lt;T&gt; <span class="title function_">callable</span><span class="params">(Runnable task, T result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RunnableAdapter</span>&lt;T&gt;(task, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 适配器</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RunnableAdapter</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> Runnable task;</span><br><span class="line">    <span class="keyword">final</span> T result;</span><br><span class="line">    RunnableAdapter(Runnable task, T result) &#123;</span><br><span class="line">        <span class="built_in">this</span>.task = task;</span><br><span class="line">        <span class="built_in">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        task.run();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂模式用于创建对象，NIO 中大量用到了工厂模式，比如 <code>Files</code> 类的 <code>newInputStream</code> 方法用于创建 <code>InputStream</code> 对象（静态工厂）、 <code>Paths</code> 类的 <code>get</code> 方法创建 <code>Path</code> 对象（静态工厂）、<code>ZipFileSystem</code> 类（<code>sun.nio</code>包下的类，属于 <code>java.nio</code> 相关的一些内部实现）的 <code>getPath</code> 的方法创建 <code>Path</code> 对象（简单工厂）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Files.newInputStream(Paths.get(generatorLogoPath))</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>NIO 中的文件目录监听服务使用到了观察者模式。</p><p>NIO 中的文件目录监听服务基于 <code>WatchService</code> 接口和 <code>Watchable</code> 接口。<code>WatchService</code> 属于观察者，<code>Watchable</code> 属于被观察者。</p><p><code>Watchable</code> 接口定义了一个用于将对象注册到 <code>WatchService</code>（监控服务） 并绑定监听事件的方法 <code>register</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Path</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;Path&gt;, Iterable&lt;Path&gt;, Watchable&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Watchable</span> &#123;</span><br><span class="line">    WatchKey <span class="title function_">register</span><span class="params">(WatchService watcher,</span></span><br><span class="line"><span class="params">                      WatchEvent.Kind&lt;?&gt;[] events,</span></span><br><span class="line"><span class="params">                      WatchEvent.Modifier... modifiers)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WatchService</code> 用于监听文件目录的变化，同一个 <code>WatchService</code> 对象能够监听多个文件目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 WatchService 对象</span></span><br><span class="line"><span class="type">WatchService</span> <span class="variable">watchService</span> <span class="operator">=</span> FileSystems.getDefault().newWatchService();</span><br><span class="line"><span class="comment">// 初始化一个被监控文件夹的 Path 类:</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;workingDirectory&quot;</span>);</span><br><span class="line"><span class="comment">// 将这个 path 对象注册到 WatchService（监控服务） 中去</span></span><br><span class="line"><span class="type">WatchKey</span> <span class="variable">watchKey</span> <span class="operator">=</span> path.register(</span><br><span class="line">watchService, StandardWatchEventKinds...);</span><br></pre></td></tr></table></figure><p><code>Path</code> 类 <code>register</code> 方法的第二个参数 <code>events</code> （需要监听的事件）为可变长参数，也就是说我们可以同时监听多种事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WatchKey <span class="title function_">register</span><span class="params">(WatchService watcher,</span></span><br><span class="line"><span class="params">                  WatchEvent.Kind&lt;?&gt;... events)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><p>常用的监听事件有 3 种：</p><ul><li><code>StandardWatchEventKinds.ENTRY_CREATE</code>：文件创建。</li><li><code>StandardWatchEventKinds.ENTRY_DELETE</code> : 文件删除。</li><li><code>StandardWatchEventKinds.ENTRY_MODIFY</code> : 文件修改。</li></ul><p><code>register</code> 方法返回 <code>WatchKey</code> 对象，通过<code>WatchKey</code> 对象可以获取事件的具体信息比如文件目录下是创建、删除还是修改了文件、创建、删除或者修改的文件的具体名称是什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WatchKey key;</span><br><span class="line"><span class="keyword">while</span> ((key = watchService.take()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (WatchEvent&lt;?&gt; event : key.pollEvents()) &#123;</span><br><span class="line">      <span class="comment">// 可以调用 WatchEvent 对象的方法做一些事情比如输出事件的具体上下文信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    key.reset();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WatchService</code> 内部是通过一个 daemon thread（守护线程）采用定期轮询的方式来检测文件的变化，简化后的源码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PollingWatchService</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractWatchService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义一个 daemon thread（守护线程）轮询检测文件变化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduledExecutor;</span><br><span class="line"></span><br><span class="line">    PollingWatchService() &#123;</span><br><span class="line">        scheduledExecutor = Executors</span><br><span class="line">            .newSingleThreadScheduledExecutor(<span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                     <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                     t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">                     <span class="keyword">return</span> t;</span><br><span class="line">                 &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">enable</span><span class="params">(Set&lt;? extends WatchEvent.Kind&lt;?&gt;&gt; events, <span class="type">long</span> period)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">      <span class="comment">// 更新监听事件</span></span><br><span class="line">      <span class="built_in">this</span>.events = events;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启定期轮询</span></span><br><span class="line">      <span class="type">Runnable</span> <span class="variable">thunk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123; <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; poll(); &#125;&#125;;</span><br><span class="line">      <span class="built_in">this</span>.poller = scheduledExecutor</span><br><span class="line">        .scheduleAtFixedRate(thunk, period, period, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Java-IO-模型详解"><a href="#Java-IO-模型详解" class="headerlink" title="Java IO 模型详解"></a>Java IO 模型详解</h1><h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><h3 id="何为-I-O"><a href="#何为-I-O" class="headerlink" title="何为 I/O?"></a>何为 I/O?</h3><p>I/O（<strong>I</strong>nput/<strong>O</strong>utput） 即<strong>输入／输出</strong> 。</p><p><strong>我们先从计算机结构的角度来解读一下 I/O。</strong></p><p>根据冯.诺依曼结构，计算机结构分为 5 大部分：运算器、控制器、存储器、输入设备、输出设备。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9pcy1jbG91ZC5ibG9nLmNzZG4ubmV0,size_16,color_FFFFFF,t_70-171774421997518.jpeg" alt="img"></p><p>输入设备（比如键盘）和输出设备（比如显示器）都属于外部设备。网卡、硬盘这种既可以属于输入设备，也可以属于输出设备。</p><p>输入设备向计算机输入数据，输出设备接收计算机输出的数据。</p><p><strong>从计算机结构的视角来看的话， I/O 描述了计算机系统与外部设备之间通信的过程。</strong></p><p><strong>我们再先从应用程序的角度来解读一下 I/O。</strong></p><p>根据大学里学到的操作系统相关的知识：为了保证操作系统的稳定性和安全性，一个进程的地址空间划分为 <strong>用户空间（User space）</strong> 和 <strong>内核空间（Kernel space ）</strong> 。</p><p>像我们平常运行的应用程序都是运行在用户空间，只有内核空间才能进行系统态级别的资源有关的操作，比如文件管理、进程通信、内存管理等等。也就是说，我们想要进行 IO 操作，一定是要依赖内核空间的能力。</p><p>并且，用户空间的程序不能直接访问内核空间。</p><p>当想要执行 IO 操作时，由于没有执行这些操作的权限，只能发起系统调用请求操作系统帮忙完成。</p><p>因此，用户进程想要执行 IO 操作的话，必须通过 <strong>系统调用</strong> 来间接访问内核空间</p><p>我们在平常开发过程中接触最多的就是 <strong>磁盘 IO（读写文件）</strong> 和 <strong>网络 IO（网络请求和响应）</strong>。</p><p><strong>从应用程序的视角来看的话，我们的应用程序对操作系统的内核发起 IO 调用（系统调用），操作系统负责的内核执行具体的 IO 操作。也就是说，我们的应用程序实际上只是发起了 IO 操作的调用而已，具体 IO 的执行是由操作系统的内核来完成的。</strong></p><p>当应用程序发起 I/O 调用后，会经历两个步骤：</p><ol><li>内核等待 I/O 设备准备好数据</li><li>内核将数据从内核空间拷贝到用户空间。</li></ol><h3 id="有哪些常见的-IO-模型"><a href="#有哪些常见的-IO-模型" class="headerlink" title="有哪些常见的 IO 模型?"></a>有哪些常见的 IO 模型?</h3><p>UNIX 系统下， IO 模型一共有 5 种：<strong>同步阻塞 I/O</strong>、<strong>同步非阻塞 I/O</strong>、<strong>I/O 多路复用</strong>、<strong>信号驱动 I/O</strong> 和<strong>异步 I/O</strong>。</p><p>这也是我们经常提到的 5 种 IO 模型。</p><h2 id="Java-中-3-种常见-IO-模型"><a href="#Java-中-3-种常见-IO-模型" class="headerlink" title="Java 中 3 种常见 IO 模型"></a>Java 中 3 种常见 IO 模型</h2><h3 id="BIO-Blocking-I-O"><a href="#BIO-Blocking-I-O" class="headerlink" title="BIO (Blocking I/O)"></a>BIO (Blocking I/O)</h3><p><strong>BIO 属于同步阻塞 IO 模型</strong> 。</p><p>同步阻塞 IO 模型中，应用程序发起 read 调用后，会一直阻塞，直到内核把数据拷贝到用户空间。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/6a9e704af49b4380bb686f0c96d33b81tplv-k3u1fbpfcp-watermark-171774425471720.png" alt="img"></p><p>在客户端连接数量不高的情况下，是没问题的。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</p><h3 id="NIO-Non-blocking-New-I-O"><a href="#NIO-Non-blocking-New-I-O" class="headerlink" title="NIO (Non-blocking/New I/O)"></a>NIO (Non-blocking/New I/O)</h3><p>Java 中的 NIO 于 Java 1.4 中引入，对应 <code>java.nio</code> 包，提供了 <code>Channel</code> , <code>Selector</code>，<code>Buffer</code> 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它是支持面向缓冲的，基于通道的 I/O 操作方法。 对于高负载、高并发的（网络）应用，应使用 NIO 。</p><p>Java 中的 NIO 可以看作是 <strong>I/O 多路复用模型</strong>。也有很多人认为，Java 中的 NIO 属于同步非阻塞 IO 模型。</p><p>跟着我的思路往下看看，相信你会得到答案！</p><p>我们先来看看 <strong>同步非阻塞 IO 模型</strong>。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/bb174e22dbe04bb79fe3fc126aed0c61tplv-k3u1fbpfcp-watermark.png" alt="img">图源：《深入拆解Tomcat &amp; Jetty》</p><p>同步非阻塞 IO 模型中，应用程序会一直发起 read 调用，等待数据从内核空间拷贝到用户空间的这段时间里，线程依然是阻塞的，直到在内核把数据拷贝到用户空间。</p><p>相比于同步阻塞 IO 模型，同步非阻塞 IO 模型确实有了很大改进。通过轮询操作，避免了一直阻塞。</p><p>但是，这种 IO 模型同样存在问题：<strong>应用程序不断进行 I/O 系统调用轮询数据是否已经准备好的过程是十分消耗 CPU 资源的。</strong></p><p>这个时候，<strong>I/O 多路复用模型</strong> 就上场了。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/88ff862764024c3b8567367df11df6abtplv-k3u1fbpfcp-watermark-171774429934423.png" alt="img"></p><p>IO 多路复用模型中，线程首先发起 select 调用，询问内核数据是否准备就绪，等内核把数据准备好了，用户线程再发起 read 调用。read 调用的过程（数据从内核空间 -&gt; 用户空间）还是阻塞的。</p><blockquote><p>目前支持 IO 多路复用的系统调用，有 select，epoll 等等。select 系统调用，目前几乎在所有的操作系统上都有支持。</p><ul><li><strong>select 调用</strong>：内核提供的系统调用，它支持一次查询多个系统调用的可用状态。几乎所有的操作系统都支持。</li><li><strong>epoll 调用</strong>：linux 2.6 内核，属于 select 调用的增强版本，优化了 IO 的执行效率。</li></ul></blockquote><p><strong>IO 多路复用模型，通过减少无效的系统调用，减少了对 CPU 资源的消耗。</strong></p><p>Java 中的 NIO ，有一个非常重要的<strong>选择器 ( Selector )</strong> 的概念，也可以被称为 <strong>多路复用器</strong>。通过它，只需要一个线程便可以管理多个客户端连接。当客户端数据到了之后，才会为其服务。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/channel-buffer-selector-171774432904325.png" alt="img"></p><h3 id="AIO-Asynchronous-I-O"><a href="#AIO-Asynchronous-I-O" class="headerlink" title="AIO (Asynchronous I/O)"></a>AIO (Asynchronous I/O)</h3><p>AIO 也就是 NIO 2。Java 7 中引入了 NIO 的改进版 NIO 2,它是异步 IO 模型。</p><p>异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/3077e72a1af049559e81d18205b56fd7tplv-k3u1fbpfcp-watermark-171774434046127.png" alt="img"></p><p>目前来说 AIO 的应用还不是很广泛。Netty 之前也尝试使用过 AIO，不过又放弃了。这是因为，Netty 使用了 AIO 之后，在 Linux 系统上的性能并没有多少提升。</p><p>最后，来一张图，简单总结一下 Java 中的 BIO、NIO、AIO。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/bio-aio-nio-171774435170629.png" alt="img"></p><h1 id="Java-NIO-核心知识总结"><a href="#Java-NIO-核心知识总结" class="headerlink" title="Java NIO 核心知识总结"></a>Java NIO 核心知识总结</h1><h2 id="NIO-简介"><a href="#NIO-简介" class="headerlink" title="NIO 简介"></a>NIO 简介</h2><p>在传统的 Java I/O 模型（BIO）中，I/O 操作是以阻塞的方式进行的。也就是说，当一个线程执行一个 I/O 操作时，它会被阻塞直到操作完成。这种阻塞模型在处理多个并发连接时可能会导致性能瓶颈，因为需要为每个连接创建一个线程，而线程的创建和切换都是有开销的。</p><p>为了解决这个问题，在 Java1.4 版本引入了一种新的 I/O 模型 — <strong>NIO</strong> （New IO，也称为 Non-blocking IO） 。NIO 弥补了同步阻塞 I/O 的不足，它在标准 Java 代码中提供了非阻塞、面向缓冲、基于通道的 I/O，可以使用少量的线程来处理多个连接，大大提高了 I/O 效率和并发。</p><p>下图是 BIO、NIO 和 AIO 处理客户端请求的简单对比图</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/bio-aio-nio-171774443556744-171774459331375.png" alt="img"></p><p>⚠️需要注意：使用 NIO 并不一定意味着高性能，它的性能优势主要体现在高并发和高延迟的网络环境下。当连接数较少、并发程度较低或者网络传输速度较快时，NIO 的性能并不一定优于传统的 BIO 。</p><h2 id="NIO-核心组件"><a href="#NIO-核心组件" class="headerlink" title="NIO 核心组件"></a>NIO 核心组件</h2><p>NIO 主要包括以下三个核心组件：</p><ul><li><strong>Buffer（缓冲区）</strong>：NIO 读写数据都是通过缓冲区进行操作的。读操作的时候将 Channel 中的数据填充到 Buffer 中，而写操作时将 Buffer 中的数据写入到 Channel 中。</li><li><strong>Channel（通道）</strong>：Channel 是一个双向的、可读可写的数据传输通道，NIO 通过 Channel 来实现数据的输入输出。通道是一个抽象的概念，它可以代表文件、套接字或者其他数据源之间的连接。</li><li><strong>Selector（选择器）</strong>：允许一个线程处理多个 Channel，基于事件驱动的 I/O 多路复用模型。所有的 Channel 都可以注册到 Selector 上，由 Selector 来分配线程来处理事件。</li></ul><p>三者的关系如下图所示（暂时不理解没关系，后文会详细介绍）：</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/channel-buffer-selector-171774443556746-171774458915974.png" alt="img"></p><p>下面详细介绍一下这三个组件。</p><h3 id="Buffer（缓冲区）"><a href="#Buffer（缓冲区）" class="headerlink" title="Buffer（缓冲区）"></a>Buffer（缓冲区）</h3><p>在传统的 BIO 中，数据的读写是面向流的， 分为字节流和字符流。</p><p>在 Java 1.4 的 NIO 库中，所有数据都是用缓冲区处理的，这是新库和之前的 BIO 的一个重要区别，有点类似于 BIO 中的缓冲流。NIO 在读取数据时，它是直接读到缓冲区中的。在写入数据时，写入到缓冲区中。 使用 NIO 在读写数据时，都是通过缓冲区进行操作。</p><p><code>Buffer</code> 的子类如下图所示。其中，最常用的是 <code>ByteBuffer</code>，它可以用来存储和操作字节数据。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/buffer-subclasses-171774443556748-171774458076073.png" alt="img"></p><p>你可以将 Buffer 理解为一个数组，<code>IntBuffer</code>、<code>FloatBuffer</code>、<code>CharBuffer</code> 等分别对应 <code>int[]</code>、<code>float[]</code>、<code>char[]</code> 等。</p><p>为了更清晰地认识缓冲区，我们来简单看看<code>Buffer</code> 类中定义的四个成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Buffer</span> &#123;</span><br><span class="line">    <span class="comment">// Invariants: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mark</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> limit;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这四个成员变量的具体含义如下：</p><ol><li>容量（<code>capacity</code>）：<code>Buffer</code>可以存储的最大数据量，<code>Buffer</code>创建时设置且不可改变；</li><li>界限（<code>limit</code>）：<code>Buffer</code> 中可以读/写数据的边界。写模式下，<code>limit</code> 代表最多能写入的数据，一般等于 <code>capacity</code>（可以通过<code>limit(int newLimit)</code>方法设置）；读模式下，<code>limit</code> 等于 Buffer 中实际写入的数据大小。</li><li>位置（<code>position</code>）：下一个可以被读写的数据的位置（索引）。从写操作模式到读操作模式切换的时候（flip），<code>position</code> 都会归零，这样就可以从头开始读写了。</li><li>标记（<code>mark</code>）：<code>Buffer</code>允许将位置直接定位到该标记处，这是一个可选属性；</li></ol><p>并且，上述变量满足如下的关系：<strong>0 &lt;= mark &lt;= position &lt;= limit &lt;= capacity</strong> 。</p><p>另外，Buffer 有读模式和写模式这两种模式，分别用于从 Buffer 中读取数据或者向 Buffer 中写入数据。Buffer 被创建之后默认是写模式，调用 <code>flip()</code> 可以切换到读模式。如果要再次切换回写模式，可以调用 <code>clear()</code> 或者 <code>compact()</code> 方法。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/JavaNIOBuffer-171774443556750-171774457568672.png" alt="img"><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/JavaNIOBuffer-171774443556750-171774457568672.png" alt="img"></p><p><code>Buffer</code> 对象不能通过 <code>new</code> 调用构造方法创建对象 ，只能通过静态方法实例化 <code>Buffer</code>。</p><p>这里以 <code>ByteBuffer</code>为例进行介绍：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 分配堆内存</span><br><span class="line">public static ByteBuffer allocate(int capacity);</span><br><span class="line">// 分配直接内存</span><br><span class="line">public static ByteBuffer allocateDirect(int capacity);</span><br></pre></td></tr></table></figure><p>Buffer 最核心的两个方法：</p><ol><li><code>get</code> : 读取缓冲区的数据</li><li><code>put</code> ：向缓冲区写入数据</li></ol><p>除上述两个方法之外，其他的重要方法：</p><ul><li><code>flip</code> ：将缓冲区从写模式切换到读模式，它会将 <code>limit</code> 的值设置为当前 <code>position</code> 的值，将 <code>position</code> 的值设置为 0。</li><li><code>clear</code>: 清空缓冲区，将缓冲区从读模式切换到写模式，并将 <code>position</code> 的值设置为 0，将 <code>limit</code> 的值设置为 <code>capacity</code> 的值。</li><li>……</li></ul><p>Buffer 中数据变化的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharBufferDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 分配一个容量为8的CharBuffer</span></span><br><span class="line">        <span class="type">CharBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> CharBuffer.allocate(<span class="number">8</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;初始状态：&quot;</span>);</span><br><span class="line">        printState(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向buffer写入3个字符</span></span><br><span class="line">        buffer.put(<span class="string">&#x27;a&#x27;</span>).put(<span class="string">&#x27;b&#x27;</span>).put(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;写入3个字符后的状态：&quot;</span>);</span><br><span class="line">        printState(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用flip()方法，准备读取buffer中的数据，将 position 置 0,limit 的置 3</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用flip()方法后的状态：&quot;</span>);</span><br><span class="line">        printState(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取字符</span></span><br><span class="line">        <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">            System.out.print(buffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用clear()方法，清空缓冲区，将 position 的值置为 0，将 limit 的值置为 capacity 的值</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用clear()方法后的状态：&quot;</span>);</span><br><span class="line">        printState(buffer);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印buffer的capacity、limit、position、mark的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printState</span><span class="params">(CharBuffer buffer)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;capacity: &quot;</span> + buffer.capacity());</span><br><span class="line">        System.out.print(<span class="string">&quot;, limit: &quot;</span> + buffer.limit());</span><br><span class="line">        System.out.print(<span class="string">&quot;, position: &quot;</span> + buffer.position());</span><br><span class="line">        System.out.print(<span class="string">&quot;, mark 开始读取的字符: &quot;</span> + buffer.mark());</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">初始状态：</span><br><span class="line">capacity: <span class="number">8</span>, limit: <span class="number">8</span>, position: <span class="number">0</span></span><br><span class="line">写入<span class="number">3</span>个字符后的状态：</span><br><span class="line">capacity: <span class="number">8</span>, limit: <span class="number">8</span>, position: <span class="number">3</span></span><br><span class="line">准备读取buffer中的数据！</span><br><span class="line">调用flip()方法后的状态：</span><br><span class="line">capacity: <span class="number">8</span>, limit: <span class="number">3</span>, position: <span class="number">0</span></span><br><span class="line">读取到的数据：abc</span><br><span class="line">调用clear()方法后的状态：</span><br><span class="line">capacity: <span class="number">8</span>, limit: <span class="number">8</span>, position: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>为了帮助理解，我绘制了一张图片展示 <code>capacity</code>、<code>limit</code>和<code>position</code>每一阶段的变化。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/NIOBufferClassAttributesDataChanges-171774443556754-171774454877970.png" alt="img"></p><h3 id="Channel（通道）"><a href="#Channel（通道）" class="headerlink" title="Channel（通道）"></a>Channel（通道）</h3><p>Channel 是一个通道，它建立了与数据源（如文件、网络套接字等）之间的连接。我们可以利用它来读取和写入数据，就像打开了一条自来水管，让数据在 Channel 中自由流动。</p><p>BIO 中的流是单向的，分为各种 <code>InputStream</code>（输入流）和 <code>OutputStream</code>（输出流），数据只是在一个方向上传输。通道与流的不同之处在于通道是双向的，它可以用于读、写或者同时用于读写。</p><p>Channel 与前面介绍的 Buffer 打交道，读操作的时候将 Channel 中的数据填充到 Buffer 中，而写操作时将 Buffer 中的数据写入到 Channel 中。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/channel-buffer-171774443556756-171774452680969.png" alt="img"></p><p>另外，因为 Channel 是全双工的，所以它可以比流更好地映射底层操作系统的 API。特别是在 UNIX 网络编程模型中，底层操作系统的通道都是全双工的，同时支持读写操作。</p><p><code>Channel</code> 的子类如下图所示。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/channel-subclasses-171774443556758-171774452256568.png" alt="img"></p><p>其中，最常用的是以下几种类型的通道：</p><ul><li><code>FileChannel</code>：文件访问通道；</li><li><code>SocketChannel</code>、<code>ServerSocketChannel</code>：TCP 通信通道；</li><li><code>DatagramChannel</code>：UDP 通信通道；</li></ul><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/channel-inheritance-relationship-171774443556860-171774451814367.png" alt="img"></p><p>Channel 最核心的两个方法：</p><ol><li><code>read</code> ：读取数据并写入到 Buffer 中。</li><li><code>write</code> ：将 Buffer 中的数据写入到 Channel 中。</li></ol><p>这里我们以 <code>FileChannel</code> 为例演示一下是读取文件数据的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;/Users/guide/Documents/test_read.in&quot;</span>, <span class="string">&quot;r&quot;</span>))</span><br><span class="line"><span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> reader.getChannel();</span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">channel.read(buffer);</span><br></pre></td></tr></table></figure><h3 id="Selector（选择器）"><a href="#Selector（选择器）" class="headerlink" title="Selector（选择器）"></a>Selector（选择器）</h3><p>Selector（选择器） 是 NIO 中的一个关键组件，它允许一个线程处理多个 Channel。Selector 是基于事件驱动的 I/O 多路复用模型，主要运作原理是：通过 Selector 注册通道的事件，Selector 会不断地轮询注册在其上的 Channel。当事件发生时，比如：某个 Channel 上面有新的 TCP 连接接入、读和写事件，这个 Channel 就处于就绪状态，会被 Selector 轮询出来。Selector 会将相关的 Channel 加入到就绪集合中。通过 SelectionKey 可以获取就绪 Channel 的集合，然后对这些就绪的 Channel 进行相应的 I/O 操作。</p><p><img src="/2022/03/24/Java%E5%9F%BA%E7%A1%80/Java-IO%E5%9F%BA%E7%A1%80/selector-channel-selectionkey-171774443556862-171774450893566.png" alt="img"></p><p>一个多路复用器 Selector 可以同时轮询多个 Channel，由于 JDK 使用了 <code>epoll()</code> 代替传统的 <code>select</code> 实现，所以它并没有最大连接句柄 <code>1024/2048</code> 的限制。这也就意味着只需要一个线程负责 Selector 的轮询，就可以接入成千上万的客户端。</p><p>Selector 可以监听以下四种事件类型：</p><ol><li><code>SelectionKey.OP_ACCEPT</code>：表示通道接受连接的事件，这通常用于 <code>ServerSocketChannel</code>。</li><li><code>SelectionKey.OP_CONNECT</code>：表示通道完成连接的事件，这通常用于 <code>SocketChannel</code>。</li><li><code>SelectionKey.OP_READ</code>：表示通道准备好进行读取的事件，即有数据可读。</li><li><code>SelectionKey.OP_WRITE</code>：表示通道准备好进行写入的事件，即可以写入数据。</li></ol><p><code>Selector</code>是抽象类，可以通过调用此类的 <code>open()</code> 静态方法来创建 Selector 实例。Selector 可以同时监控多个 <code>SelectableChannel</code> 的 <code>IO</code> 状况，是非阻塞 <code>IO</code> 的核心。</p><p>一个 Selector 实例有三个 <code>SelectionKey</code> 集合：</p><ol><li>所有的 <code>SelectionKey</code> 集合：代表了注册在该 Selector 上的 <code>Channel</code>，这个集合可以通过 <code>keys()</code> 方法返回。</li><li>被选择的 <code>SelectionKey</code> 集合：代表了所有可通过 <code>select()</code> 方法获取的、需要进行 <code>IO</code> 处理的 Channel，这个集合可以通过 <code>selectedKeys()</code> 返回。</li><li>被取消的 <code>SelectionKey</code> 集合：代表了所有被取消注册关系的 <code>Channel</code>，在下一次执行 <code>select()</code> 方法时，这些 <code>Channel</code> 对应的 <code>SelectionKey</code> 会被彻底删除，程序通常无须直接访问该集合，也没有暴露访问的方法。</li></ol><p>简单演示一下如何遍历被选择的 <code>SelectionKey</code> 集合并进行处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line">Iterator&lt;SelectionKey&gt; keyIterator = selectedKeys.iterator();</span><br><span class="line"><span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> keyIterator.next();</span><br><span class="line">    <span class="keyword">if</span> (key != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            <span class="comment">// ServerSocketChannel 接收了一个新连接</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">            <span class="comment">// 表示一个新连接建立</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            <span class="comment">// Channel 有准备好的数据，可以读取</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">            <span class="comment">// Channel 有空闲的 Buffer，可以写入数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    keyIterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Selector 还提供了一系列和 <code>select()</code> 相关的方法：</p><ul><li><code>int select()</code>：监控所有注册的 <code>Channel</code>，当它们中间有需要处理的 <code>IO</code> 操作时，该方法返回，并将对应的 <code>SelectionKey</code> 加入被选择的 <code>SelectionKey</code> 集合中，该方法返回这些 <code>Channel</code> 的数量。</li><li><code>int select(long timeout)</code>：可以设置超时时长的 <code>select()</code> 操作。</li><li><code>int selectNow()</code>：执行一个立即返回的 <code>select()</code> 操作，相对于无参数的 <code>select()</code> 方法而言，该方法不会阻塞线程。</li><li><code>Selector wakeup()</code>：使一个还未返回的 <code>select()</code> 方法立刻返回。</li><li>……</li></ul><p>使用 Selector 实现网络读写的简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioSelectorExample</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">      serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">      serverSocketChannel.socket().bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line"></span><br><span class="line">      <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">      <span class="comment">// 将 ServerSocketChannel 注册到 Selector 并监听 OP_ACCEPT 事件</span></span><br><span class="line">      serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">readyChannels</span> <span class="operator">=</span> selector.select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (readyChannels == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</span><br><span class="line">        Iterator&lt;SelectionKey&gt; keyIterator = selectedKeys.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">          <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> keyIterator.next();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (key.isAcceptable()) &#123;</span><br><span class="line">            <span class="comment">// 处理连接事件</span></span><br><span class="line">            <span class="type">ServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> server.accept();</span><br><span class="line">            client.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将客户端通道注册到 Selector 并监听 OP_READ 事件</span></span><br><span class="line">            client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            <span class="comment">// 处理读事件</span></span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> client.read(buffer);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bytesRead &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              buffer.flip();</span><br><span class="line">              System.out.println(<span class="string">&quot;收到数据：&quot;</span> +<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, bytesRead));</span><br><span class="line">              <span class="comment">// 将客户端通道注册到 Selector 并监听 OP_WRITE 事件</span></span><br><span class="line">              client.register(selector, SelectionKey.OP_WRITE);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bytesRead &lt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">// 客户端断开连接</span></span><br><span class="line">              client.close();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">            <span class="comment">// 处理写事件</span></span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.wrap(<span class="string">&quot;Hello, Client!&quot;</span>.getBytes());</span><br><span class="line">            client.write(buffer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将客户端通道注册到 Selector 并监听 OP_READ 事件</span></span><br><span class="line">            client.register(selector, SelectionKey.OP_READ);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          keyIterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在示例中，我们创建了一个简单的服务器，监听 8080 端口，使用 Selector 处理连接、读取和写入事件。当接收到客户端的数据时，服务器将读取数据并将其打印到控制台，然后向客户端回复 “Hello, Client!”。</p><h2 id="NIO-零拷贝"><a href="#NIO-零拷贝" class="headerlink" title="NIO 零拷贝"></a>NIO 零拷贝</h2><p>零拷贝是提升 IO 操作性能的一个常用手段，像 ActiveMQ、Kafka 、RocketMQ、QMQ、Netty 等顶级开源项目都用到了零拷贝。</p><p>零拷贝是指计算机执行 IO 操作时，CPU 不需要将数据从一个存储区域复制到另一个存储区域，从而可以减少上下文切换以及 CPU 的拷贝时间。也就是说，零拷贝主主要解决操作系统在处理 I/O 操作时频繁复制数据的问题。零拷贝的常见实现技术有： <code>mmap+write</code>、<code>sendfile</code>和 <code>sendfile + DMA gather copy</code> 。</p><p>下图展示了各种零拷贝技术的对比图：</p><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">CPU 拷贝</th><th style="text-align:left">DMA 拷贝</th><th style="text-align:left">系统调用</th><th style="text-align:left">上下文切换</th></tr></thead><tbody><tr><td style="text-align:left">传统方法</td><td style="text-align:left">2</td><td style="text-align:left">2</td><td style="text-align:left">read+write</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">mmap+write</td><td style="text-align:left">1</td><td style="text-align:left">2</td><td style="text-align:left">mmap+write</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">sendfile</td><td style="text-align:left">1</td><td style="text-align:left">2</td><td style="text-align:left">sendfile</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">sendfile + DMA gather copy</td><td style="text-align:left">0</td><td style="text-align:left">2</td><td style="text-align:left">sendfile</td><td style="text-align:left">2</td></tr></tbody></table></div><p>可以看出，无论是传统的 I/O 方式，还是引入了零拷贝之后，2 次 DMA(Direct Memory Access) 拷贝是都少不了的。因为两次 DMA 都是依赖硬件完成的。零拷贝主要是减少了 CPU 拷贝及上下文的切换。</p><p>Java 对零拷贝的支持：</p><ul><li><code>MappedByteBuffer</code> 是 NIO 基于内存映射（<code>mmap</code>）这种零拷⻉⽅式的提供的⼀种实现，底层实际是调用了 Linux 内核的 <code>mmap</code> 系统调用。它可以将一个文件或者文件的一部分映射到内存中，形成一个虚拟内存文件，这样就可以直接操作内存中的数据，而不需要通过系统调用来读写文件。</li><li><code>FileChannel</code> 的<code>transferTo()/transferFrom()</code>是 NIO 基于发送文件（<code>sendfile</code>）这种零拷贝方式的提供的一种实现，底层实际是调用了 Linux 内核的 <code>sendfile</code>系统调用。它可以直接将文件数据从磁盘发送到网络，而不需要经过用户空间的缓冲区。</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadFileIntoMemory</span><span class="params">(File xmlFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(xmlFile);</span><br><span class="line">  <span class="comment">// 创建 FileChannel 对象</span></span><br><span class="line">  <span class="type">FileChannel</span> <span class="variable">fc</span> <span class="operator">=</span> fis.getChannel();</span><br><span class="line">  <span class="comment">// FileChannel.map() 将文件映射到直接内存并返回 MappedByteBuffer 对象</span></span><br><span class="line">  <span class="type">MappedByteBuffer</span> <span class="variable">mmb</span> <span class="operator">=</span> fc.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, fc.size());</span><br><span class="line">  xmlFileBuffer = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>)fc.size()];</span><br><span class="line">  mmb.get(xmlFileBuffer);</span><br><span class="line">  fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章我们主要介绍了 NIO 的核心知识点，包括 NIO 的核心组件和零拷贝。</p><p>如果我们需要使用 NIO 构建网络程序的话，不建议直接使用原生 NIO，编程复杂且功能性太弱，推荐使用一些成熟的基于 NIO 的网络编程框架比如 Netty。Netty 在 NIO 的基础上进行了一些优化和扩展比如支持多种协议、支持 SSL/TLS 等等。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java-IO基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合框架</title>
      <link href="/2022/03/23/Java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/03/23/Java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="1集合框架总览"><a href="#1集合框架总览" class="headerlink" title="1集合框架总览"></a>1集合框架总览</h1><p><img src="/2022/03/23/Java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/167509-20220403092511778-1329110419-17167812352124.png" alt="image"><br>我们来简单解读下上面这个框架图：</p><ul><li>所有集合类都位于java.util包下</li><li>Iterator是遍历集合的工具，我们经常通过Iterator迭代器来遍历集合。我们说Collection依赖于Iterator，是因为Collection的实现类都要实现iterator()函数，返回一个Iterator对象。ListIterator主要作用就是遍历List。</li><li>Java的集合类主要由两个接口派生而出：Collection和Map，作为Java集合框架的根接口，这两个接口包含了一些子接口和实现类。</li><li>集合接口：即图中的 LinkIterator、List、Set、Queue、SortedSet、SortedMap 6个接口（即短虚线框部分），表示不同集合类型，是集合框架的基础。</li><li>抽象类：即图中的 AbstractCollection、AbstractList、AbstractSet、AbstractMap、AbstractSequentialList 5个抽象类（长虚线框部分），抽象类只是对集合接口的部分实现，有需要的话可以继续扩展，完善自定义集合类。</li><li>实现类：即图片中LinkedHashMap、TreeMap等8个实现类（实线框部分），主要是对接口的具体实现。</li><li>Collection 接口包含一组允许重复的对象</li><li>Set 接口继承 Collection，但是集合内的元素不重复。Set的实现类有HastSet和TreeSet。HashSet依赖于HashMap，它实际上是通过HashMap实现的；TreeSet依赖于TreeMap，它实际上是通过TreeMap实现的。</li><li>List 接口继承 Collection，集合内元素允许重复，但维护了元素的插入顺序，所以是个有序队列。每一个元素都有它的索引。第一个元素的索引值是0。List的实现类有LinkedList, ArrayList, Vector, Stack。</li><li>Map接口是键－值对象顶层接口，下面还包含了一些子接口和实现类。AbstractMap是个抽象类，它实现了Map接口中的大部分API。而HashMap，TreeMap，WeakHashMap都是继承于AbstractMap。Hashtable虽然继承于Dictionary，但它实现了Map接口。</li><li>Set、List和Map是集合的三大类：<ul><li>List：有序集合，集合中元素可重复，访问元素可以根据元素索引访问。</li><li>Set：无序集合，集合中元素不可以重复，访问集合中的元素只能根据元素自身信息来访问（因此元素不允许重复）。</li><li>Map：Key-value模式的键值对元素，访问时根据元素key来读取对应的value。</li></ul></li><li>Arrays和Collections是操作数组、集合的两个工具类。</li></ul><p>完成对上面框架的整体介绍之后，我们接着对每个类别进行详细的分析。</p><h1 id="2-Collection接口"><a href="#2-Collection接口" class="headerlink" title="2 Collection接口"></a>2 Collection接口</h1><p>Collection接口是处理对象集合的根接口，其中定义了很多对元素进行操作的方法。Collection接口有两个主要的子接口List和Set，注意Map不是Collection的子接口，这个要牢记。<br>Collection接口中的方法如下:<br><img src="/2022/03/23/Java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/167509-20231028101659703-771467619.png" alt="image"><br>其中，有几个比较常用的方法，比如方法add()添加一个元素到集合中，addAll()将指定集合中的所有元素添加到集合中，contains()方法检测集合中是否包含指定的元素，toArray()方法返回一个表示集合的数组。</p><p>另外，Collection中有一个iterator()函数，它的作用是返回一个Iterator接口。通常，我们通过Iterator迭代器来遍历集合。ListIterator是List接口所特有的，在List接口中，通过ListIterator()返回一个ListIterator对象。</p><p>Collection接口有两个常用的子接口，下面会详细介绍。</p><h2 id="2-1-List接口"><a href="#2-1-List接口" class="headerlink" title="2.1 List接口"></a>2.1 List接口</h2><p>List集合代表一个有序集合，集合中每个元素都有其对应的顺序索引。List集合允许使用重复元素，可以通过索引来访问指定位置的集合元素。</p><p>List接口继承于Collection接口，它可以定义一个允许重复的有序集合。因为List中的元素是有序的，所以我们可以通过使用索引（元素在List中的位置，类似于数组下标）来访问List中的元素，这类似于Java的数组。</p><p>List接口为Collection直接接口。List所代表的是有序的Collection，即它用某种特定的插入顺序来维护元素顺序。用户可以对列表中每个元素的插入位置进行精确地控制，同时可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack。</p><h3 id="2-1-1-ArrayList"><a href="#2-1-1-ArrayList" class="headerlink" title="2.1.1 ArrayList"></a>2.1.1 ArrayList</h3><p>ArrayList是一个动态数组，也是我们最常用的集合。它允许任何符合规则的元素插入甚至包括null。每一个ArrayList都有一个初始容量（10），该容量代表了数组的大小。随着容器中的元素不断增加，容器的大小也会随着增加。在每次向容器中增加元素的同时都会进行容量检查，当快溢出时，就会进行扩容操作。所以如果我们明确所插入元素的多少，最好指定一个初始容量值，避免过多的进行扩容操作而浪费时间、效率。</p><p>size、isEmpty、get、set、iterator 和 listIterator 操作都以固定时间运行。add 操作以分摊的固定时间运行，也就是说，添加 n 个元素需要 O(n) 时间（由于要考虑到扩容，所以这不只是添加元素会带来分摊固定时间开销那样简单）。</p><p>ArrayList擅长于随机访问。同时ArrayList是非同步的。</p><h3 id="2-1-2-LinkedList"><a href="#2-1-2-LinkedList" class="headerlink" title="2.1.2 LinkedList"></a>2.1.2 LinkedList</h3><p>同样实现List接口的LinkedList与ArrayList不同，ArrayList是一个动态数组，而LinkedList是一个双向链表。所以它除了有ArrayList的基本操作方法外还额外提供了get，remove，insert方法在LinkedList的首部或尾部。</p><p>由于实现的方式不同，LinkedList不能随机访问，它所有的操作都是要按照双重链表的需要执行。在列表中索引的操作将从开头或结尾遍历列表（从靠近指定索引的一端）。这样做的好处就是可以通过较低的代价在List中进行插入和删除操作。</p><p>与ArrayList一样，LinkedList也是非同步的。如果多个线程同时访问一个List，则必须自己实现访问同步。一种解决方法是在创建List时构造一个同步的List：<br>List list = Collections.synchronizedList(new LinkedList(…));</p><h3 id="2-1-3-Vector"><a href="#2-1-3-Vector" class="headerlink" title="2.1.3 Vector"></a>2.1.3 Vector</h3><p>与ArrayList相似，但是Vector是同步的。所以说Vector是线程安全的动态数组。它的操作与ArrayList几乎一样。<br>的</p><h3 id="2-1-4-Stack"><a href="#2-1-4-Stack" class="headerlink" title="2.1.4 Stack"></a>2.1.4 Stack</h3><p>Stack继承自Vector，实现一个后进先出的堆栈。Stack提供5个额外的方法使得Vector得以被当作堆栈使用。基本的push和pop 方法，还有peek方法得到栈顶的元素，empty方法测试堆栈是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。<br><img src="/2022/03/23/Java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/167509-20231028112511178-1797290461.png" alt="image"></p><h2 id="2-2-Set接口"><a href="#2-2-Set接口" class="headerlink" title="2.2 Set接口"></a>2.2 Set接口</h2><p>Set是一种不包括重复元素的Collection。它维持它自己的内部排序，所以随机访问没有任何意义。与List一样，它同样允许null的存在但是仅有一个。由于Set接口的特殊性，所有传入Set集合中的元素都必须不同，同时要注意任何可变对象，如果在对集合中元素进行操作时，导致element1.equals(element2)为true，则必定会产生数据冲突的问题。Set接口有三个具体实现类，分别是</p><ul><li>散列集HashSet</li><li>链式散列集LinkedHashSet</li><li>树形集TreeSet</li></ul><p>Set是一种不包含重复的元素的Collection，无序，即任意的两个元素element1和element2都有element1.equals(element2)为false，Set最多可以有一个null元素。需要注意的是，虽然Set中元素没有顺序性，但是元素在set中的位置是由该元素的HashCode决定的，所以具体的位置其实是固定的。</p><p>此外需要说明一点，在set接口中的不重复是有特殊要求的。<br>举一个例子:对象A和对象B，本来是不同的两个对象，正常情况下它们是能够放入到Set里面的，但是如果对象A和B的都重写了hashcode和equals方法，并且重写后的hashcode和equals方法是相同的话。那么A和B是不能同时放入到Set集合中去的，也就是Set集合中的去重和hashcode与equals方法直接相关。</p><p>为了更好地理解，请看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setWork</span><span class="params">()</span> &#123;</span><br><span class="line">       Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">       set.add(<span class="string">&quot;Brand1&quot;</span>);</span><br><span class="line">       set.add(<span class="string">&quot;Brand2&quot;</span>);</span><br><span class="line">       set.add(<span class="string">&quot;Brand1&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;Set Size:&quot;</span> + set.size());</span><br><span class="line">       System.out.println(<span class="string">&quot;Set Elements:&quot;</span> + set.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//再次添加一个字符串对象 Brand2，然后通过equals方法比较，发现是相等的，所以添加失败返回false</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Brand2&quot;</span>));</span><br><span class="line">       System.out.println(result);</span><br><span class="line">       System.out.println(set);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br>Set Size:2<br>Set Elements:[Brand1, Brand2]<br>false<br>[Brand1, Brand2]<br>可以看出，因为有hashcode和equals方法，用来比较指向的字符串对象所存储的字符串是否相等，所以第二个Brand1加进去是无效的。<br>程序通过new关键字来创建新的字符串对象Brand2，使用==运算符判断返回false，使用equals方法比较返回true，所以同样不能添加到Set集合中，最终还是两个元素。</p><h3 id="2-2-1-HashSet"><a href="#2-2-1-HashSet" class="headerlink" title="2.2.1 HashSet"></a>2.2.1 HashSet</h3><p>HashSet 是一个没有重复元素的集合。它是由HashMap实现的，不保证元素的顺序(这里所说的没有顺序是指：元素插入的顺序与输出的顺序不一致)，而且HashSet允许使用null 元素。HashSet是非同步的，如果多个线程同时访问一个哈希set，而其中至少一个线程修改了该set，那么它必须保持外部同步。 HashSet按Hash算法来存储集合的元素，因此具有很好的存取和查找性能。<br>HashSet的实现方式大致如下，通过一个HashMap存储元素，元素是存放在HashMap的Key中，而Value统一使用一个Object对象。<br>HashSet使用和理解中容易出现的误区:</p><ul><li>HashSet中存放null值<br>HashSet中是允许存入null值的，但是在HashSet中仅仅能够存入一个null值。</li><li>HashSet中存储元素的位置是固定的<br>HashSet中存储的元素的是无序的，这个没什么好说的，但是由于HashSet底层是基于Hash算法实现的，使用了hashcode，所以HashSet中相应的元素的位置是固定的。</li><li>必须小心操作可变对象（Mutable Object）。<br>如果一个Set中的可变元素改变了自身状态导致Object.equals(Object)=true将导致一些问题。</li></ul><h3 id="2-2-2-LinkedHashSet"><a href="#2-2-2-LinkedHashSet" class="headerlink" title="2.2.2 LinkedHashSet"></a>2.2.2 LinkedHashSet</h3><p>LinkedHashSet继承自HashSet，其底层是基于LinkedHashMap来实现的，有序，非同步。LinkedHashSet集合同样是根据元素的hashCode值来决定元素的存储位置，但是它同时使用链表维护元素的次序。这样使得元素看起来像是以插入顺序保存的，也就是说，当遍历该集合时候，LinkedHashSet将会以元素的添加顺序访问集合的元素。</p><h3 id="2-2-3-TreeSet"><a href="#2-2-3-TreeSet" class="headerlink" title="2.2.3 TreeSet"></a>2.2.3 TreeSet</h3><p>TreeSet是一个有序集合，其底层是基于TreeMap实现的，非线程安全。TreeSet可以确保集合元素处于排序状态。TreeSet支持两种排序方式，自然排序和定制排序，其中自然排序为默认的排序方式。当我们构造TreeSet时，若使用不带参数的构造函数，则TreeSet的使用自然比较器；若用户需要使用自定义的比较器，则需要使用带比较器的参数。<br>注意：TreeSet集合不是通过hashcode和equals函数来比较元素的.它是通过compare或者comparaeTo函数来判断元素是否相等.compare函数通过判断两个对象的id，相同的id判断为重复元素，不会被加入到集合中。</p><h1 id="3-Map接口"><a href="#3-Map接口" class="headerlink" title="3 Map接口"></a>3 Map接口</h1><p>Map与List、Set接口不同，它是由一系列键值对组成的集合，提供了key到Value的映射。同时它也没有继承Collection。在Map中它保证了key与value之间的一一对应关系。也就是说一个key对应一个value，所以它不能存在相同的key值，当然value值可以相同。</p><h2 id="3-1-HashMap"><a href="#3-1-HashMap" class="headerlink" title="3.1 HashMap"></a>3.1 HashMap</h2><p>以哈希表数据结构实现，查找对象时通过哈希函数计算其位置，它是为快速查询而设计的，其内部定义了一个hash表数组（Entry[] table），元素会通过哈希转换函数将元素的哈希地址转换成数组中存放的索引，如果有冲突，则使用散列链表的形式将所有相同哈希地址的元素串起来，可能通过查看HashMap.Entry的源码它是一个单链表结构。</p><h2 id="3-2-LinkedHashMap"><a href="#3-2-LinkedHashMap" class="headerlink" title="3.2 LinkedHashMap"></a>3.2 LinkedHashMap</h2><p>LinkedHashMap是HashMap的一个子类，它保留插入的顺序，如果需要输出的顺序和输入时的相同，那么就选用LinkedHashMap。<br>LinkedHashMap是Map接口的哈希表和链接列表实现，具有可预知的迭代顺序。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。<br>LinkedHashMap实现与HashMap的不同之处在于，后者维护着一个运行于所有条目的双重链接列表。此链接列表定义了迭代顺序，该迭代顺序可以是插入顺序或者是访问顺序。<br>根据链表中元素的顺序可以分为：按插入顺序的链表，和按访问顺序(调用get方法)的链表。默认是按插入顺序排序，如果指定按访问顺序排序，那么调用get方法后，会将这次访问的元素移至链表尾部，不断访问可以形成按访问顺序排序的链表。<br>注意，此实现不是同步的。如果多个线程同时访问链接的哈希映射，而其中至少一个线程从结构上修改了该映射，则它必须保持外部同步。<br>由于LinkedHashMap需要维护元素的插入顺序，因此性能略低于HashMap的性能，但在迭代访问Map里的全部元素时将有很好的性能，因为它以链表来维护内部顺序。</p><h2 id="3-3-TreeMap"><a href="#3-3-TreeMap" class="headerlink" title="3.3 TreeMap"></a>3.3 TreeMap</h2><p>TreeMap 是一个有序的key-value集合，非同步，基于红黑树（Red-Black tree）实现，每一个key-value节点作为红黑树的一个节点。TreeMap存储时会进行排序的，会根据key来对key-value键值对进行排序，其中排序方式也是分为两种，一种是自然排序，一种是定制排序，具体取决于使用的构造方法。<br>自然排序：TreeMap中所有的key必须实现Comparable接口，并且所有的key都应该是同一个类的对象，否则会报ClassCastException异常。<br>定制排序：定义TreeMap时，创建一个comparator对象，该对象对所有的treeMap中所有的key值进行排序，采用定制排序的时候不需要TreeMap中所有的key必须实现Comparable接口。<br>TreeMap判断两个元素相等的标准：两个key通过compareTo()方法返回0，则认为这两个key相等。<br>如果使用自定义的类来作为TreeMap中的key值，且想让TreeMap能够良好的工作，则必须重写自定义类中的equals()方法，TreeMap中判断相等的标准是：两个key通过equals()方法返回为true，并且通过compareTo()方法比较应该返回为0。<br><img src="/2022/03/23/Java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/167509-20231028112356346-1629116254.png" alt="image"></p><h1 id="4-Iterator-与-ListIterator详解"><a href="#4-Iterator-与-ListIterator详解" class="headerlink" title="4 Iterator 与 ListIterator详解"></a>4 Iterator 与 ListIterator详解</h1><h2 id="4-1-Iterator"><a href="#4-1-Iterator" class="headerlink" title="4.1 Iterator"></a>4.1 Iterator</h2><p>Iterator的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>Java的Iterator（迭代器）是一个设计模式，它使你可以遍历一个容器（如列表，集合，队列等）。它提供了一种方法来顺序访问聚合对象的元素，而不需要暴露该对象的内部表示。<br>Iterator提供的API接口如下：</p><ul><li>boolean hasNext()：判断集合里是否存在下一个元素。如果有，hasNext()方法返回 true。</li><li>Object next()：返回集合里下一个元素。</li><li>void remove()：删除集合里上一次next方法返回的元素。<br>参考如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">     <span class="comment">// 创建一个ArrayList对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取该ArrayList的迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用迭代器遍历列表中的元素</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">element</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(element);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;Java&quot;</span>.equals(element)) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移除之后的ArrayList对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;after remove element 「java」: &quot;</span> + list);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br><span class="line"><span class="keyword">Java</span></span><br><span class="line"><span class="keyword"></span>remove <span class="keyword">java </span>element : [Hello, World]</span><br></pre></td></tr></table></figure><p>需要注意的点如下：</p><ul><li>Iterator只能单向移动。</li><li>Iterator.remove()是唯一安全在迭代过程中修改集合；如果在迭代过程中以任何其它的方式修改了基本集合将会产生未知的行为。而且每调用一次next()方法，remove()方法只能被调用一次，如果违反这个规则将抛出一个异常，因为可能导致数据异常。</li></ul><h2 id="4-2-ListIterator"><a href="#4-2-ListIterator" class="headerlink" title="4.2 ListIterator"></a>4.2 ListIterator</h2><p>ListIterator是一个功能更加强大的迭代器, 它继承于Iterator接口,只能用于各种List类型的访问。它提供了在列表中插入和删除元素的方法，以及使用hasPrevious()和previous()方法在迭代过程中向前和向后遍历列表的功能。<br>以下是ListIterator的主要方法：</p><ul><li>boolean hasNext(): 返回true如果迭代器有下一个元素。</li><li>Object next(): 返回迭代器的下一个元素并将指针移到下一个元素。</li><li>boolean hasPrevious(): 返回true如果迭代器有前一个元素。</li><li>Object previous(): 返回迭代器的前一个元素并将指针移到前一个元素。</li><li>int nextIndex(): 返回迭代器下一次要访问的元素的索引。</li><li>int previousIndex(): 返回迭代器上一次访问的元素的索引。</li><li>void remove(): 从列表中删除迭代器最后一次返回的元素。</li><li>void add(Object o): 在迭代器指向的位置插入指定的元素。</li><li>void set(E e): 从列表中替换迭代器最后一次返回的元素。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ListIterator</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>; </span><br><span class="line">    E <span class="title function_">next</span><span class="params">()</span>; </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span>; </span><br><span class="line">    E <span class="title function_">previous</span><span class="params">()</span>; </span><br><span class="line">    <span class="type">int</span> <span class="title function_">nextIndex</span><span class="params">()</span>; </span><br><span class="line">    <span class="type">int</span> <span class="title function_">previousIndex</span><span class="params">()</span>; </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span>; </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(E e)</span>; </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由以上定义我们可以推出ListIterator可以:</p><ul><li>双向移动（向前或者向后遍历）</li><li>产生相对于迭代器在列表中指向的当前位置的前一个和后一个元素的索引</li><li>可以使用set()方法替换它访问过的最后一个元素</li><li>可以使用add()方法在next()方法返回的元素之前或previous()方法返回的元素之后插入一个元素</li></ul><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">listIteratorWork</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个 ArrayList</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;Element A&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;Element B&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;Element C&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;当前列表 : &quot;</span> + list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 ListIterator 对象</span></span><br><span class="line">    ListIterator&lt;String&gt; listIterator = list.listIterator();</span><br><span class="line">    <span class="comment">// 使用 hasNext() 和 next() 方法迭代列表</span></span><br><span class="line">    System.out.println(<span class="string">&quot;逐一遍历 : &quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (listIterator.hasNext()) &#123;</span><br><span class="line">        System.out.println(listIterator.next() + <span class="string">&quot;, &quot;</span> + listIterator.previousIndex() + <span class="string">&quot;, &quot;</span> + listIterator.nextIndex());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在迭代过程中使用 add() 方法添加元素</span></span><br><span class="line">    listIterator.add(<span class="string">&quot;Element D&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;添加一个元素之后:&quot;</span> + list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在迭代过程中使用 set() 方法进行元素修改</span></span><br><span class="line">    listIterator = list.listIterator(<span class="number">1</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;修改一个元素之后:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (listIterator.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Element D&quot;</span>.equals(listIterator.next())) &#123;</span><br><span class="line">            listIterator.set(<span class="string">&quot;Element replace&quot;</span>);</span><br><span class="line">        &#125;           </span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(list);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">当前列表 : [<span class="built_in">Element</span> A, <span class="built_in">Element</span> B, <span class="built_in">Element</span> C]</span><br><span class="line">逐一遍历 : </span><br><span class="line"><span class="built_in">Element</span> A, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="built_in">Element</span> B, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="built_in">Element</span> C, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">添加一个元素之后:[<span class="built_in">Element</span> A, <span class="built_in">Element</span> B, <span class="built_in">Element</span> C, <span class="built_in">Element</span> D]</span><br><span class="line">修改一个元素之后:[<span class="built_in">Element</span> A, <span class="built_in">Element</span> B, <span class="built_in">Element</span> C, <span class="built_in">Element</span> replace]</span><br></pre></td></tr></table></figure><h1 id="5-面试考点分析"><a href="#5-面试考点分析" class="headerlink" title="5 面试考点分析"></a>5 面试考点分析</h1><h2 id="5-1-ArrayList和LinkedList对比"><a href="#5-1-ArrayList和LinkedList对比" class="headerlink" title="5.1 ArrayList和LinkedList对比"></a>5.1 ArrayList和LinkedList对比</h2><ul><li>ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。</li><li>两者都是线程不安全，都实现了Collection接口。</li><li>数据结构：ArrayList是基于动态数组的数据结构，LinkedList是基于双向链表的数据结构。</li><li>性能：ArrayList支持随机访问，查询快，增删慢，查询的时间复杂度为O(1)，插入和删除的时间复杂度为O(n)，因为对插入和删除位置后面的元素进行移动位置，以保证内存的连续性，所以<ul><li>对于随机访问get和set，ArrayList绝对优于LinkedList，因为LinkedList要移动指针。</li><li>对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。</li></ul></li><li>内存空间占用： ArrayList的空 间浪费主要体现在在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗 比ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据）。</li></ul><h2 id="5-2-HashTable与HashMap对比"><a href="#5-2-HashTable与HashMap对比" class="headerlink" title="5.2 HashTable与HashMap对比"></a>5.2 HashTable与HashMap对比</h2><ul><li>相同点：<ul><li>都实现了Map、Cloneable、java.io.Serializable接口。</li><li>都是存储”键值对(key-value)”的散列表，而且都是采用拉链法实现的。</li></ul></li><li>不同点：<ul><li>是否安全：HashMap是非线程安全的，HashTable 是线程安全的；HashTable 内部的方法基本都经过 synchronized 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap ）</li><li>同步性：HashTable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的 。</li><li>对null值的处理：HashMap的key、value都可为null，HashTable的key、value都不可为null 。</li><li>基类不同：HashMap继承于AbstractMap，而Hashtable继承于Dictionary。</li><li>支持的遍历种类不同：HashMap只支持Iterator(迭代器)遍历。而Hashtable支持Iterator(迭代器)和Enumeration(枚举器)两种方式遍历。</li><li>操作效率：因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；</li><li>对Null key 和Null value的支持： HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛出 NullPointerException</li><li>初始容量大小和每次扩充容量大小的不同 ：<ul><li>创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。</li><li>创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小。也就是说 HashMap 总是使用2的幂作为哈希表的大小,后面会介绍到为什么是2的幂次方。</li></ul></li><li>底层数据结构： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。</li></ul></li></ul><h2 id="5-3-LinkedHashMap和TreeMap比较"><a href="#5-3-LinkedHashMap和TreeMap比较" class="headerlink" title="5.3 LinkedHashMap和TreeMap比较"></a>5.3 LinkedHashMap和TreeMap比较</h2><p>LinkedHashMap保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时用带参数，按照应用次数排序。在遍历的时候会比HashMap慢。</p><p>TreeMap实现SortMap接口，内部实现是红黑树。能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。TreeMap不允许key的值为null。非同步的。</p><h2 id="5-4-HashSet、LinkedHashSet、TreeSet比较"><a href="#5-4-HashSet、LinkedHashSet、TreeSet比较" class="headerlink" title="5.4 HashSet、LinkedHashSet、TreeSet比较"></a>5.4 HashSet、LinkedHashSet、TreeSet比较</h2><h3 id="5-4-1-Set接口"><a href="#5-4-1-Set接口" class="headerlink" title="5.4.1 Set接口"></a>5.4.1 Set接口</h3><p>Set不允许包含相同的元素，如果试图把两个相同元素加入同一个集合中，add方法返回false。<br>Set判断两个对象相同不是使用==运算符，而是根据equals方法。也就是说，只要两个对象用equals方法比较返回true，Set就不会接受这两个对象。</p><h3 id="5-4-2-HashSet"><a href="#5-4-2-HashSet" class="headerlink" title="5.4.2 HashSet"></a>5.4.2 HashSet</h3><p>HashSet有以下特点：</p><ul><li>不能保证元素的排列顺序，顺序有可能发生变化。</li><li>不是同步的。</li><li>集合元素可以是null，但只能放入一个null。<br>HashSet集合判断两个元素相等的标准是两个对象通过equals方法比较相等，并且两个对象的hashCode()方法返回值也相等。</li></ul><h3 id="5-4-3-LinkedHashSet"><a href="#5-4-3-LinkedHashSet" class="headerlink" title="5.4.3 LinkedHashSet"></a>5.4.3 LinkedHashSet</h3><p>LinkedHashSet集合同样是根据元素的hashCode值来决定元素的存储位置，但是它同时使用链表维护元素的次序。这样使得元素看起来像是以插入顺序保存的，也就是说，当遍历该集合时候，LinkedHashSet将会以元素的添加顺序访问集合的元素。<br>LinkedHashSet在迭代访问Set中的全部元素时，性能比HashSet好，但是插入时性能稍微逊色于HashSet。</p><h3 id="5-4-4-TreeSet类"><a href="#5-4-4-TreeSet类" class="headerlink" title="5.4.4 TreeSet类"></a>5.4.4 TreeSet类</h3><p>TreeSet是SortedSet接口的唯一实现类，TreeSet可以确保集合元素处于排序状态。TreeSet支持两种排序方式，自然排序和定制排序，其中自然排序为默认的排序方式。向TreeSet中加入的应该是同一个类的对象。<br>TreeSet判断两个对象不相等的方式是两个对象通过equals方法返回false，或者通过CompareTo方法比较没有返回0。</p><h2 id="5-5-Iterator和ListIterator区别"><a href="#5-5-Iterator和ListIterator区别" class="headerlink" title="5.5 Iterator和ListIterator区别"></a>5.5 Iterator和ListIterator区别</h2><ul><li>ListIterator有add()方法，可以向List中添加对象，而Iterator不能</li><li>ListIterator和Iterator都有hasNext()和next()方法，可以实现顺序向后遍历，但是ListIterator有hasPrevious()和previous()方法，可以实现逆向（顺序向前）遍历。Iterator就不可以。</li><li>ListIterator可以定位当前的索引位置，nextIndex()和previousIndex()可以实现。Iterator没有此功能。</li><li>都可实现删除对象，但是ListIterator可以实现对象的修改，set()方法可以实现。Iierator仅能遍历，不能修改。<br>因为ListIterator的这些功能，可以方便的实现对LinkedList等List数据结构的操作。其实，数组对象也可以用迭代器来实现。</li></ul><h2 id="5-6-Collection-和-Collections区别"><a href="#5-6-Collection-和-Collections区别" class="headerlink" title="5.6 Collection 和 Collections区别"></a>5.6 Collection 和 Collections区别</h2><p>Java中的Collection和Collections都是用于处理集合的类，但它们有一些重要的区别。</p><p>继承关系：Collection是所有集合类的根接口，它定义了集合的基本操作，比如添加元素、删除元素等。Collections是一个帮助类，它提供了静态方法来操作和操作集合，比如排序、查找等。Collections类通过实现和实例化集合类的各种基本操作，让集合类的操作更加简单。<br>用法：Collection通常用于定义集合类的基本操作，而Collections则提供了各种静态方法来操作和操作集合。Collections类中包含了很多有用的静态方法，比如排序、查找、复制等。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常处理</title>
      <link href="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Java异常分类"><a href="#Java异常分类" class="headerlink" title="Java异常分类"></a>Java异常分类</h2><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-0fc3e63704e7fb9806a6d8802f76f408_r.jpg" alt="img"></p><p><strong>总结：</strong></p><ul><li>Thorwable类（表示可抛出）是所有异常和错误的超类，两个直接子类为Error和Exception，分别表示错误和异常。</li><li>其中异常类Exception又分为运行时异常(RuntimeException)和非运行时异常， 这两种异常有很大的区别，也称之为非检查异常（Unchecked Exception）和检查异常（Checked Exception），其中Error类及其子类也是非检查异常。</li></ul><h3 id="检查异常和非检查异常"><a href="#检查异常和非检查异常" class="headerlink" title="检查异常和非检查异常"></a>检查异常和非检查异常</h3><ul><li><strong>检查异常</strong>：<strong>也称为“编译时异常”</strong>，编译器在编译期间检查的那些异常。由于编译器“检查”这些异常以确保它们得到处理，因此称为“检查异常”。如果抛出检查异常，那么编译器会报错，需要开发人员手动处理该异常，要么捕获，要么重新抛出。<strong>除了RuntimeException之外，所有直接继承 Exception 的异常都是检查异常。</strong></li><li><strong>非检查异常：也称为“运行时异常”</strong>，编译器不会检查运行时异常，在抛出运行时异常时编译器不会报错，当运行程序的时候才可能抛出该异常。<strong>Error及其子类和RuntimeException 及其子类都是非检查异常。</strong></li></ul><blockquote><p>说明：检查异常和非检查异常是针对编译器而言的，是编译器来检查该异常是否强制开发人员处理该异常</p></blockquote><ul><li>检查异常导致异常在方法调用链上显式传递，而且一旦底层接口的检查异常声明发生变化，会导致整个调用链代码更改。</li><li>使用非检查异常不会影响方法签名，而且调用方可以自由决定何时何地捕获和处理异常</li></ul><p><strong>建议使用非检查异常让代码更加简洁，而且更容易保持接口的稳定性</strong></p><h3 id="检查异常举例"><a href="#检查异常举例" class="headerlink" title="检查异常举例"></a>检查异常举例</h3><p>在代码中使用 <strong>throw</strong> 关键字手动抛出一个检查异常，编译器提示错误，如下图所示：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20240526230807903-17167360888715.png" alt="image-20240526230807903"></p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20240526230850568-17167361327896.png" alt="image-20240526230850568"></p><p>通过编译器提示，有三种方法处理检查异常</p><ul><li>将异常添加到方法签名</li><li>捕获异常</li><li>通过注解处理异常</li></ul><p><strong>方式一</strong>：将异常添加到方法签名上，通过 <strong>throws</strong> 关键字抛出异常，由调用该方法的方法处理该异常：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20240526231026504-17167362276267.png" alt="image-20240526231026504"></p><p><strong>方式二</strong>：使用 try-catch 捕获异常，在 catch 代码块中处理该异常，下面的代码是将检查异常包装在非检查异常中重新抛出，这样编译器就不会提示错误了，关于如何处理异常后面会详细介绍：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20240526231055958-17167362568018.png" alt="image-20240526231055958"></p><h3 id="非检查异常举例"><a href="#非检查异常举例" class="headerlink" title="非检查异常举例"></a>非检查异常举例</h3><p>所有继承 RuntimeException 的异常都是非检查异常，直接抛出非检查异常编译器不会提示错误：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/image-20240526231404444-17167364456379.png" alt="image-20240526231404444"></p><h3 id="自定义检查异常"><a href="#自定义检查异常" class="headerlink" title="自定义检查异常"></a>自定义检查异常</h3><p>自定义检查异常只需要<strong>继承 Exception</strong> 即可，如下代码所示：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-cdf53557077ced773bf5514939335338_r-171673657808613.jpg" alt="img"></p><p>自定义检查异常的处理方式前面已经介绍，这里不再赘述。</p><h3 id="自定义非检查异常"><a href="#自定义非检查异常" class="headerlink" title="自定义非检查异常"></a>自定义非检查异常</h3><p>自定义非检查异常只需要<strong>继承 RuntimeException</strong> 即可，如下代码所示：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-3028fc4e251216d5234315ce170ab18b_r-171673660587515.jpg" alt="img"></p><h2 id="从字节码层面分析异常处理"><a href="#从字节码层面分析异常处理" class="headerlink" title="从字节码层面分析异常处理"></a>从字节码层面分析异常处理</h2><p>前面已经简单介绍了一下Java 的异常体系，以及如何自定义异常，下面我将从字节码层面分析异常处理机制，通过字节码的分析你将对 try-catch-finally 有更加深入的认识。</p><h3 id="try-catch-finally的本质"><a href="#try-catch-finally的本质" class="headerlink" title="try-catch-finally的本质"></a>try-catch-finally的本质</h3><p>首先查阅<a href="https://link.zhihu.com/?target=https%3A//docs.oracle.com/javase/specs/jvms/se8/html/jvms-3.html%23jvms-3.13"> jvm 官方文档</a>，有如下的描述说明：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-10e1f69849ab086a004a2f1aee9fd1fb_r-171673668644617.jpg" alt="img"></p><p>从官方文档的描述我们可以知道，图片中的字节码是在 JDK 1.6 （class 文件的版本号为50，表示java编译器的版本为jdk 1.6）及之前的编译器生成的，因为有 jsr 和 ret 指令可以使用。然而在 idea 中通过 <strong>jclasslib 插件</strong>查看 try-catch-finally 的字节码文件并没有 jsr/ret 指令，通过查阅资料，有如下说明：</p><p><strong>jsr / ret 机制最初用于实现finally块，但是他们认为节省代码大小并不值得额外的复杂性，因此逐渐被淘汰了。Sun JDK 1.6之后的javac就不生成jsr/ret指令了，那finally块要如何实现？</strong></p><p><strong>javac采用的办法是把finally块的内容复制到原本每个jsr指令所在的地方，这样就不需要jsr/ret了，代价则是字节码大小会膨胀，但是降低了字节码的复杂性，因为减少了两个字节码指令（jsr/ret）。</strong></p><h3 id="案例一：try-catch-字节码分析"><a href="#案例一：try-catch-字节码分析" class="headerlink" title="案例一：try-catch 字节码分析"></a>案例一：try-catch 字节码分析</h3><p>在 JDK 1.8 中 try-catch 的字节码如下所示：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-779c308359194c234955e7e9382554d8_r-171673683800619.jpg" alt="img"></p><p>这里需要说明一下 <strong>athrow</strong> 指令的作用：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-60cfdd01bd750059b8e4d173ee6c9020_r-171673686495421.jpg" alt="img"></p><p>异常表</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-16b0777c8d177924538d6d981a17ba62_r-171673688648523.jpg" alt="img"></p><p><strong>athrow指令：</strong>在Java程序中显示抛出异常的操作（throw语句)都是由 athrow指令来实现的，athrow 指令抛出的Objectref 必须是类型引用，并且必须作为 Throwable 类或 Throwable 子类的实例对象。它从操作数堆栈中弹出，然后通过在当前方法的异常表中搜索与 objectref 类匹配的第一个异常处理程序：</p><ul><li>如果在异常表中找到与 objectref 匹配的异常处理程序，PC 寄存器被重置到用于处理此异常的代码的位置，然后会清除当前帧的操作数堆栈，objectref 被推回操作数堆栈，执行继续。</li><li>如果在当前框架中没有找到匹配的异常处理程序，则弹出该栈帧，该异常会重新抛给上层调用的方法。如果当前帧表示同步方法的调用，那么在调用该方法时输入或重新输入的监视器将退出，就好像执行了监视退出指令(monitorexit)一样。</li><li>如果在所有栈帧弹出前仍然没有找到合适的异常处理程序，这个线程将终止。</li></ul><p><strong>异常表：</strong>异常表中用来记录程序计数器的位置和异常类型。如上图所示，表示的意思是：如果在 8 到 16 （不包括16）之间的指令抛出的异常匹配 MyCheckedException 类型的异常，那么程序跳转到16 的位置继续执行。</p><p><strong>分析上图中的字节码：</strong>第一个 athrow 指令抛出 MyCheckedException 异常到操作数栈顶，然后去到异常表中查找是否有对应的类型，异常表中有 MyCheckedException ，然后跳转到 16 继续执行代码。第二个 athrow 指令抛出 RuntimeException 异常，然后在异常表中没有找到匹配的类型，当前方法强制结束并弹出当前栈帧，该异常重新抛给调用者，任然没有找到匹配的处理器，该线程被终止。</p><h3 id="案例二：try-catch-finally-字节码分析"><a href="#案例二：try-catch-finally-字节码分析" class="headerlink" title="案例二：try-catch-finally 字节码分析"></a>案例二：try-catch-finally 字节码分析</h3><p>在刚刚的代码基础之上添加 finally 代码块，然后分析字节码如下：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-1d3f999f89915f17e2f4d30afa948e03_r-171673703604925.jpg" alt="img"></p><p>异常表的信息如下：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-1419fac3e7aeeba4c6e6850a9dc09fc3_r-171673706056227.jpg" alt="img"></p><p>添加 finally 代码块后，在异常表中新增了一条记录，捕获类型为 any，这里解释一下这条记录的含义：</p><p>在 8 到 27（不包括27） 之间的指令执行过程中，抛出或者返回任何类型的结果都会跳转到 26 继续执行。</p><p>从上图的字节码中可以看到，字节码索引为 26 后到结束的指令都是 finally 块中的代码，再解释一下finally块的字节码指令的含义，从 25 开始介绍，finally 块的代码是从 26 开始的：</p><blockquote><p>25 athrow // 匹配到异常表中的异常 any，清空操作数栈，将 RuntimeExcepion 的引用添加到操作数栈顶，然后跳转到 26 继续执行26 astore_2 // 将栈顶的引用保存到局部变量表索引为 2 的位置27 getstatic #2 <java lang system.out : ljava io printstream;> // 获取类的静态字段引用放在操作数栈顶30 ldc #9 &lt;执行finally 代码&gt;//将字符串的放在操作数栈顶32 invokevirtual #4 <java io printstream.println : (ljava lang string;)v>// 调用方法35 aload_2// 将局部变量表索引为 2 到引用放到操作数栈顶，这里就是前面抛出的RuntimeExcepion 的引用36 athrow// 在异常表中没有找到对应的异常处理程序，弹出该栈帧，该异常会重新抛给上层调用的方法</java></java></p></blockquote><h3 id="案例三：finally-块中的代码为什么总是会执行"><a href="#案例三：finally-块中的代码为什么总是会执行" class="headerlink" title="案例三：finally 块中的代码为什么总是会执行"></a>案例三：finally 块中的代码为什么总是会执行</h3><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-22e4d6bb2885e678dec11b8df558bc80_r-171673719228929.jpg" alt="img"></p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-1cc1f71846f4da0518fd11cd49f786bd_r-171673720813331.jpg" alt="img"></p><p>简单分析一下上面代码的字节码指令：字节码指令 2 到 8 会抛出 ArithmeticException 异常，该异常是 Exception 的子类，正好匹配异常表中的第一行记录，然后跳转到 13 继续执行，也就是执行 catch 块中的代码，然后执行 finally 块中的代码，最后通过 goto 31 跳转到 finally 块之外执行后续的代码。</p><p>如果 try 块中没有抛出异常，则执行完 try 块中的代码然后继续执行 finally 块中的代码，因为编译器在编译的时候将 finally 块中的代码添加到了 try 块代码后面，执行完 finally 的代码后通过 goto 31 跳转到 finally 块之外执行后续的代码 。</p><p>编译器会将 finally 块中的代码放在 try 块和 catch 块的末尾，所以 finally 块中的代码总是会执行。</p><p>通过上面的分析，你应该可以知道 finally 块的代码为什么总是会执行了，如果还是有不明白的地方欢迎留言讨论。</p><h3 id="案例四：finally-块中使用-return-字节码分析"><a href="#案例四：finally-块中使用-return-字节码分析" class="headerlink" title="案例四：finally 块中使用 return 字节码分析"></a><strong>案例四：finally 块中使用 return 字节码分析</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInt</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInt2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        i = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先分析一下 getInt() 方法的字节码：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-555f1309b6da17191a08a1103a2e7656_r-171673725671433.jpg" alt="img"></p><p>局部变量表：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-e11dbb7b085e6e80526f785eac7a3bb1_r-171673727298735.jpg" alt="img"></p><p>异常表：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-3967504670794015f38dddee5ade6882_r-171673728372537.jpg" alt="img"></p><p><strong>总结：</strong>从上面的字节码中我们可以看出，如果finally 块中有 return 关键字，那么 try 块以及 catch 块中的 return 都将会失效，所以在开发的过程中<strong>不应该在 finally 块中写 return 语句。</strong></p><p>先分析一下 getInt2() 方法的字节码：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-305da5ff71229efc184aecd6bc5654f1_r-171673729639339.jpg" alt="img"></p><p>异常表：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-524e89f8766fdde54d2c047e70a1001a_r-171673730787441.jpg" alt="img"></p><p>从上图字节码的分析，我们可以知道，虽然执行了finally块中的代码，但是返回的值还是 1，这是因为在执行finally代码块之前，将原来局部变量表索引为 1 的值 1 保存到了局部变量表索引为 2 的位置，最后返回到是局部变量表索引为 2 的值，也就是原来的 1。</p><p><strong>总结：</strong>如果在 finally 块中没有 return 语句，那么无论在 finally 代码块中是否修改返回值，返回值都不会改变，仍然是执行 finally 代码块之前的值。</p><h3 id="try-with-resources-的本质"><a href="#try-with-resources-的本质" class="headerlink" title="try-with-resources 的本质"></a>try-with-resources 的本质</h3><p>下面通过一个打包文件的代码来演示说明一下 try-with-resources 的本质：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打包多个文件为 zip 格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileList 文件列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">zipFile</span><span class="params">(List&lt;File&gt; fileList)</span> &#123;</span><br><span class="line">        <span class="comment">// 文件的压缩包路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">zipPath</span> <span class="operator">=</span> OUT + <span class="string">&quot;/打包附件.zip&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取文件压缩包输出流</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(zipPath);</span><br><span class="line">             <span class="type">CheckedOutputStream</span> <span class="variable">checkedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckedOutputStream</span>(outputStream, <span class="keyword">new</span> <span class="title class_">Adler32</span>());</span><br><span class="line">             <span class="type">ZipOutputStream</span> <span class="variable">zipOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(checkedOutputStream)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File file : fileList) &#123;</span><br><span class="line">                <span class="comment">// 获取文件输入流</span></span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="comment">// 使用 common.io中的IOUtils获取文件字节数组</span></span><br><span class="line">                <span class="type">byte</span>[] bytes = IOUtils.toByteArray(fileIn);</span><br><span class="line">                <span class="comment">// 写入数据并刷新</span></span><br><span class="line">                zipOut.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(file.getName()));</span><br><span class="line">                zipOut.write(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">                zipOut.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件未找到&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取文件异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到在 <strong>try()</strong> 的括号中定义需要关闭的资源，实际上这是Java的一种语法糖，查看编译后的代码就知道编译器为我们做了什么，下面是反编译后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">zipFile</span><span class="params">(List&lt;File&gt; fileList)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">zipPath</span> <span class="operator">=</span> <span class="string">&quot;./打包附件.zip&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(zipPath);</span><br><span class="line">            <span class="type">Throwable</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">CheckedOutputStream</span> <span class="variable">checkedOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckedOutputStream</span>(outputStream, <span class="keyword">new</span> <span class="title class_">Adler32</span>());</span><br><span class="line">                <span class="type">Throwable</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ZipOutputStream</span> <span class="variable">zipOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(checkedOutputStream);</span><br><span class="line">                    <span class="type">Throwable</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> fileList.iterator();</span><br><span class="line">                        <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">                            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> (File)var8.next();</span><br><span class="line">                            <span class="type">InputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                            <span class="type">byte</span>[] bytes = IOUtils.toByteArray(fileIn);</span><br><span class="line">                            zipOut.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(file.getName()));</span><br><span class="line">                            zipOut.write(bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">                            zipOut.flush();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable var60) &#123;</span><br><span class="line">                        var7 = var60;</span><br><span class="line">                        <span class="keyword">throw</span> var60;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (zipOut != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (var7 != <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    zipOut.close();</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Throwable var59) &#123;</span><br><span class="line">                                    var7.addSuppressed(var59);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                zipOut.close();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var62) &#123;</span><br><span class="line">                    var5 = var62;</span><br><span class="line">                    <span class="keyword">throw</span> var62;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (checkedOutputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (var5 != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                checkedOutputStream.close();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable var58) &#123;</span><br><span class="line">                                var5.addSuppressed(var58);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            checkedOutputStream.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var64) &#123;</span><br><span class="line">                var3 = var64;</span><br><span class="line">                <span class="keyword">throw</span> var64;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (var3 != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            outputStream.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable var57) &#123;</span><br><span class="line">                            var3.addSuppressed(var57);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        outputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException var66) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件未找到&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var67) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取文件异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>JDK1.7开始，java引入了 try-with-resources 声明，将 try-catch-finally 简化为 try-catch，在编译时会进行转化为 try-catch-finally 语句，我们就不需要在 finally 块中手动关闭资源。</p><p>try-with-resources 声明包含三部分：<strong>try(声明需要关闭的资源)、try 块、catch 块</strong>。它要求在 try-with-resources 声明中定义的变量实现了 <code>AutoCloseable</code> 接口，这样在系统可以自动调用它们的close方法，从而替代了finally中关闭资源的功能，编译器为我们生成的异常处理过程如下：</p><ul><li>try 块没有发生异常时，自动调用 close 方法，</li><li>try 块发生异常，然后自动调用 close 方法，如果 close 也发生异常，catch 块只会捕捉 try 块抛出的异常，close 方法的异常会在catch 中通过调用<code>Throwable.addSuppressed</code> 来压制异常，但是你可以在catch块中，用 <code>Throwable.getSuppressed</code> 方法来获取到压制异常的数组。</li></ul><h2 id="Java-异常处理不规范案例"><a href="#Java-异常处理不规范案例" class="headerlink" title="Java 异常处理不规范案例"></a>Java 异常处理不规范案例</h2><p>异常处理分为三个阶段：捕获-&gt;传递-&gt;处理。try……catch的作用是捕获异常，throw的作用将异常传递给合适的处理程序。捕获、传递、处理，三个阶段，任何一个阶段处理不当，都会影响到整个系统。下面分别介绍一下常见的异常处理不规范案例。</p><h2 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h2><ul><li>捕获异常的时候不区分异常类型</li><li>捕获异常不完全，比如该捕获的异常类型没有捕获到</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123; <span class="comment">// 不应对所有类型的异常统一捕获，应该抽象出业务异常和系统异常，分别捕获</span></span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传递"><a href="#传递" class="headerlink" title="传递"></a>传递</h2><ul><li>异常信息丢失</li><li>异常信息转译错误，比如在抛出异常的时候将业务异常包装成了系统异常</li><li>吃掉异常</li><li>不必要的异常包装</li><li>检查异常传递过程中不适用非检查检异常包装，造成代码被throws污染</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125; <span class="keyword">catch</span> (BIZException e)&#123; </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BIZException</span>(e); <span class="comment">// 重复包装同样类型的异常信息 </span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Biz1Exception e)&#123; </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BIZException</span>(e.getMessage()); <span class="comment">// 没有抛出异常栈信息，正确的做法是throw new BIZException(e); </span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Biz2Exception e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(e); <span class="comment">// 不能使用低抽象级别的异常去包装高抽象级别的异常，这样在传递过程中丢失了异常类型信息</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Biz3Exception e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(……); <span class="comment">// 异常转译错误，将业务异常直接转译成了系统异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Biz4Exception e)&#123;</span><br><span class="line">    …… <span class="comment">// 不抛出也不记Log，直接吃掉异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><ul><li>重复处理</li><li>处理方式不统一</li><li>处理位置分散</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ……</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Biz1Exception e)&#123;</span><br><span class="line">            log.error(e);  <span class="comment">// 重复的LOG记录</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">e</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ……</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Biz2Exception e)&#123;</span><br><span class="line">            ……  <span class="comment">// 同样是业务异常，既在内层处理，又在外层处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BizException e)&#123;</span><br><span class="line">        log.error(e); <span class="comment">// 重复的LOG记录</span></span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="comment">// 通吃所有类型的异常</span></span><br><span class="line">    log.error(e.getMessage(),e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-异常处理规范案例"><a href="#Java-异常处理规范案例" class="headerlink" title="Java 异常处理规范案例"></a>Java 异常处理规范案例</h2><h3 id="1、阿里巴巴Java异常处理规约"><a href="#1、阿里巴巴Java异常处理规约" class="headerlink" title="1、阿里巴巴Java异常处理规约"></a>1、阿里巴巴Java异常处理规约</h3><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-93061e4a9172fd03acf407d303c5414d_r-171673749998043.jpg" alt="img"></p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-229ae32306a450862e44929b285027b5_r-171673756141945.jpg" alt="img"></p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-4aa10b883eedf38a71a8e22ce99f2fc7_r-171673757210347.jpg" alt="img"></p><p>阿里巴巴Java开发规范中有15条异常处理的规约，其中下面两条使用的时候是比较困惑的，因为并没有告诉我们应该如何定义异常，如何抛出异常，如何处理异常：</p><ul><li>【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。</li><li>【推荐】定义时区分unchecked / checked 异常，避免直接使用RuntimeException抛出，更不允许抛出Exception或者Throwable，应使用有业务含义的自定义异常。</li></ul><p>后面的章节我将根据自己的思考，说明如何定义异常，如何抛出异常，如何处理异常，接着往下看 。</p><h3 id="2、异常处理最佳实践"><a href="#2、异常处理最佳实践" class="headerlink" title="2、异常处理最佳实践"></a>2、异常处理最佳实践</h3><p>1、使用 try-with-resource 关闭资源。</p><p>2、抛出具体的异常而不是 Exception，并在注释中使用 @throw 进行说明。</p><p>3、捕获异常后使用描述性语言记录错误信息，如果是调用外部服务最好是包括入参和出参。</p><p>logger.error(“说明信息，异常信息：{}”, e.getMessage(), e)</p><p>4、优先捕获具体异常。</p><p>5、不要捕获 Throwable 异常，除非特殊情况。</p><p>6、不要忽略异常，异常捕获一定需要处理。</p><p>7、不要同时记录和抛出异常，因为异常会打印多次，正确的处理方式要么抛出异常要么记录异常，如果抛出异常，不要原封不动的抛出，可以自定义异常抛出。</p><p>8、自定义异常不要丢弃原有异常，应该将原始异常传入自定义异常中。</p><p>throw MyException(“my exception”, e);</p><p>9、自定义异常尽量不要使用检查异常。</p><p>10、尽可能晚的捕获异常，如非必要，建议所有的异常都不要在下层捕获，而应该由最上层捕获并统一处理这些异常。。</p><p>11、为了避免重复输出异常日志，建议所有的异常日志都统一交由最上层输出。就算下层捕获到了某个异常，如非特殊情况，也不要将异常信息输出，应该交给最上层统一输出日志。</p><h2 id="项目中的异常处理实践"><a href="#项目中的异常处理实践" class="headerlink" title="项目中的异常处理实践"></a>项目中的异常处理实践</h2><h3 id="1、如何自定义异常"><a href="#1、如何自定义异常" class="headerlink" title="1、如何自定义异常"></a>1、如何自定义异常</h3><p>在介绍如何自定义异常之前，有必要说明一下使用异常的好处，参考<a href="https://link.zhihu.com/?target=https%3A//docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html">Java异常的官方文档</a>，总结有如下好处：</p><ul><li><strong>能够将错误代码和正常代码分离</strong></li><li><strong>能够在调用堆栈上传递异常</strong></li><li><strong>能够将异常分组和区分</strong></li></ul><p>在Java异常体系中定义了很多的异常，这些异常通常都是技术层面的异常，对于应用程序来说更多出现的是业务相关的异常，比如用户输入了一些不合法的参数，用户没有登录等，我们可以通过异常来对不同的业务问题进行分类，以便我们排查问题，所以需要自定义异常。那我们如何自定义异常呢？前面已经说了，在应用程序中尽量不要定义检查异常，应该定义非检查异常（运行时异常）。</p><p>在我看来，应用程序中定义的异常应该分为两类：</p><ul><li>业务异常：用户能够看懂并且能够处理的异常，比如用户没有登录，提示用户登录即可。</li><li>系统异常：用户看不懂需要程序员处理的异常，比如网络连接超时，需要程序员排查相关问题。</li></ul><p>下面是我设想的对于应用程序中的异常体系分类：</p><p><img src="/2022/03/22/Java%E5%9F%BA%E7%A1%80/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/v2-8bf74c92c97defc7ed06c938ed926337_r-171673771559949.jpg" alt="img"></p><p>在真实项目中，我们通常在遇到不符合预期的情况下，通过抛出异常来阻止程序继续运行，在抛出对应的异常时，需要在异常对象中描述抛出该异常的原因以及异常堆栈信息，以便提示用户和开发人员如何处理该异常。</p><p>一般来说，异常的定义我们可以参考Java的其他异常定义就可以了，比如异常中有哪些构造方法，方法中有哪些构造参数，但是这样的自定义异常只是通过异常的类名对异常进行了一个分类，对于异常的描述信息还是不够完善，因为异常的描述信息只是一个字符串。我觉得异常的描述信息还应该包含一个错误码（code）,异常中包含错误码的好处是什么呢？我能想到的就是和http请求中的状态码的优点差不多，还有一点就是能够方便提供翻译功能，对于不同的语言环境能够通过错误码找到对应语言的错误提示信息而不需要修改代码。</p><p>基于上述的说明，我认为应该这样来定义异常类，需要定义一个描述异常信息的枚举类，对于一些通用的异常信息可以在枚举中定义，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常信息枚举类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ErrorCode</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_ERROR(<span class="string">&quot;A000&quot;</span>, <span class="string">&quot;系统异常&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BIZ_ERROR(<span class="string">&quot;B000&quot;</span>, <span class="string">&quot;业务异常&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NO_PERMISSION(<span class="string">&quot;B001&quot;</span>, <span class="string">&quot;没有权限&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    ErrorCode(String code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取错误码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取错误信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置错误码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回当前枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ErrorCode <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置错误信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回当前枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ErrorCode <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义系统异常类，其他类型的异常类似，只是异常的类名不同，如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统异常类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8312907182931723379L</span>;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个没有错误信息的 &lt;code&gt;SystemException&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定的 Throwable 和 Throwable.toString() 作为异常信息来构造 SystemException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause 错误原因， 通过 Throwable.getCause() 方法可以获取传入的 cause信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用错误信息 message 构造 SystemException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用错误码和错误信息构造 SystemException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code    错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用错误信息和 Throwable 构造 SystemException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause   错误原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code    错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause   错误原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(String code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode ErrorCode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode ErrorCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause     错误原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(ErrorCode errorCode, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode.getMessage(), cause);</span><br><span class="line">        <span class="built_in">this</span>.code = errorCode.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取错误码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面定义的 SystemException 类中定义了很多的构造方法，我这里只是给出一个示例，所以保留了不传入错误码的构造方法，保留不使用错误码的构造方法，可以提高代码的灵活性，因为错误码的规范也是一个值得讨论的问题，关于如何定义错误码在阿里巴巴开发规范手册中有介绍，这里不再详细说明。</p><h3 id="2、如何使用异常"><a href="#2、如何使用异常" class="headerlink" title="2、如何使用异常"></a>2、如何使用异常</h3><p>前面介绍了如何自定义异常，接下来介绍一下如何使用异常，也就是什么时候抛出异常。<strong>异常其实可以看作方法的返回结果，</strong>当出现非预期的情况时，就可以通过抛出异常来阻止程序继续执行。比如期望用户有管理员权限才能删除某条记录，如果用户没有管理员权限，那么就可以抛出没有权限的异常阻止程序继续执行并提示用户需要管理员权限才能操作。</p><p>抛出异常使用 throw 关键字，如下所示：</p><p>throw new BizException(ErrorCode.NO_PERMISSION);</p><p>什么时候抛出业务异常，什么时候抛出系统异常？</p><p><strong>业务异常（bizException/bussessException）</strong>： 用户操作业务时，提示出来的异常信息，这些信息能直接让用户可以继续下一步操作，或者换一个正确操作方式去使用，换句话就是用户可以自己能解决的。比如：“用户没有登录”，“没有权限操作”。</p><p><strong>系统异常（SystemException）</strong>： 用户操作业务时，提示系统程序的异常信息，这类的异常信息时用户看不懂的，需要告警通知程序员排查对应的问题，如 NullPointerException，IndexOfException。另一个情况就是接口对接时，参数的校验时提示出来的信息，如：缺少ID，缺少必须的参数等，这类的信息对于客户来说也是看不懂的，也是解决不了的，所以我把这两类的错误应当统一归类于系统异常</p><p>关于应该抛出业务异常还是系统异常，一句话总结就是：该异常用户能否处理，如果用户能处理则抛出业务异常，如果用户不能处理需要程序员处理则抛出系统异常。</p><p>在调用第三方的 rpc 接口时，我们应该如何处理异常呢？首先我们需要知道 rpc 接口抛出异常还是返回的包含错误码的 Result 对象，关于 rpc 应该返回异常还是错误码有很多的讨论，关于这方面的内容可以查看相关文档，这个不是本文的重点，通过实际观察知道 rpc 的返回基本都是包含错误码的 Result 对象，所以这里以返回错误码的情况进行说明。首先需要明确 rpc 调用失败应该返回系统异常，所以我们可以定义一个继承 SystemException 的 rpc 异常 RpcException，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rpc 异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcException</span> <span class="keyword">extends</span> <span class="title class_">SystemException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">9152774952913597366L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个没有错误信息的 &lt;code&gt;RpcException&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定的 Throwable 和 Throwable.toString() 作为异常信息来构造 RpcException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause 错误原因， 通过 Throwable.getCause() 方法可以获取传入的 cause信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用错误信息 message 构造 RpcException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用错误码和错误信息构造 RpcException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code    错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcException</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(code, message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用错误信息和 Throwable 构造 RpcException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause   错误原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code    错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause   错误原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcException</span><span class="params">(String code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(code, message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode ErrorCode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcException</span><span class="params">(ErrorCode errorCode)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> errorCode ErrorCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause     错误原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcException</span><span class="params">(ErrorCode errorCode, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(errorCode, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 RpcException 所有的构造方法都是调用的父类 SystemExcepion 的方法，所以这里不再赘述。定义好了异常后接下来是处理 rpc 调用的异常处理逻辑，调用 rpc 服务可能会发生 ConnectException 等网络异常，我们并不需要在调用的时候捕获异常，而是应该在最上层捕获并处理异常，调用 rpc 的处理demo代码如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private Object callRpc() &#123;</span><br><span class="line">    Result&lt;Object&gt; rpc = rpcDemo.rpc();</span><br><span class="line">    log.info(&quot;调用第三方rpc返回结果为：&#123;&#125;&quot;, rpc);</span><br><span class="line">    if (Objects.isNull(rpc)) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!rpc.getSuccess()) &#123;</span><br><span class="line">        throw new RpcException(ErrorCode.RPC_ERROR.setMessage(rpc.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">    return rpc.getData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、如何处理异常"><a href="#3、如何处理异常" class="headerlink" title="3、如何处理异常"></a>3、如何处理异常</h3><p>我们应该尽可能晚的捕获异常，如非必要，建议所有的异常都不要在下层捕获，而应该由最上层捕获并统一处理这些异常。前面的已经简单说明了一下如何处理异常，接下来将通过代码的方式讲解如何处理异常。</p><h4 id="rpc-接口全局异常处理"><a href="#rpc-接口全局异常处理" class="headerlink" title="rpc 接口全局异常处理"></a>rpc 接口全局异常处理</h4><p>对于 rpc 接口，我们这里将 rpc 接口的返回结果封装到包含错误码的 Result 对象中，所以可以定义一个 aop 叫做 RpcGlobalExceptionAop，在 rpc 接口执行前后捕获异常，并将捕获的异常信息封装到 Result 对象中返回给调用者。</p><p>Result 对象的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Result 结果类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1525914055479353120L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Boolean success;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code    错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    返回的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> success 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(String code, String message, T data, Boolean success)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.success = success;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 Result 对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code    错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 提示信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data    返回的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> success 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">of</span><span class="params">(String code, String message, T data, Boolean success)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(code, message, data, success);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功，没有返回数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 范型参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> of(<span class="string">&quot;00000&quot;</span>, <span class="string">&quot;成功&quot;</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功，有返回数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 返回数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  范型参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> of(<span class="string">&quot;00000&quot;</span>, <span class="string">&quot;成功&quot;</span>, data, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败，有错误信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;     范型参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> of(<span class="string">&quot;10000&quot;</span>, message, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败，有错误码和错误信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code    错误码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;     范型参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">fail</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> of(code, message, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取错误码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取提示信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取是否成功</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写 aop 代码之前需要先导入 spring-boot-starter-aop 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>RpcGlobalExceptionAop 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rpc 调用全局异常处理 aop 类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcGlobalExceptionAop</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * execution(* com.xyz.service ..*.*(..))：表示 rpc 接口实现类包中的所有方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.xyz.service ..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Around(value = &quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handleException</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果对传入对参数有修改，那么需要调用joinPoint.proceed(Object[] args)</span></span><br><span class="line">            <span class="comment">//这里没有修改参数，则调用joinPoint.proceed()方法即可</span></span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BizException e) &#123;</span><br><span class="line">            <span class="comment">// 对于业务异常，应该记录 warn 日志即可，避免无效告警</span></span><br><span class="line">            log.warn(<span class="string">&quot;全局捕获业务异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(e.getCode(), e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;全局捕获第三方rpc调用异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(e.getCode(), e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SystemException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;全局捕获系统异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(e.getCode(), e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;全局捕获未知异常&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Result.fail(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>aop 中 <code>@Pointcut</code> 的 <code>execution</code> 表达式配置说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">execution(<span class="keyword">public</span> * *(..)) 定义任意公共方法的执行</span><br><span class="line">execution(* set*(..)) 定义任何一个以<span class="string">&quot;set&quot;</span>开始的方法的执行</span><br><span class="line">execution(* com.xyz.service.AccountService.*(..)) 定义AccountService 接口的任意方法的执行</span><br><span class="line">execution(* com.xyz.service.*.*(..)) 定义在service包里的任意方法的执行</span><br><span class="line">execution(* com.xyz.service ..*.*(..)) 定义在service包和所有子包里的任意类的任意方法的执行</span><br><span class="line">execution(* com.test.spring.aop.pointcutexp…JoinPointObjP2.*(…)) 定义在pointcutexp包和所有子包里的JoinPointObjP2类的任意方法的执行</span><br></pre></td></tr></table></figure><h4 id="http-接口全局异常处理"><a href="#http-接口全局异常处理" class="headerlink" title="http 接口全局异常处理"></a>http 接口全局异常处理</h4><p>如果是 springboot 项目，http 接口的异常处理主要分为三类：</p><ul><li>基于请求转发的方式处理异常；</li><li>基于异常处理器的方式处理异常；</li><li>基于过滤器的方式处理异常。</li></ul><p><strong>基于请求转发的方式</strong>：真正的全局异常处理。</p><p>实现方式有：</p><ul><li><code>BasicExceptionController</code></li></ul><p><strong>基于异常处理器的方式</strong>：不是真正的全局异常处理，因为它处理不了过滤器等抛出的异常。</p><p>实现方式有：</p><ul><li><code>@ExceptionHandler</code></li><li><code>@ControllerAdvice+@ExceptionHandler</code></li><li><code>SimpleMappingExceptionResolver</code></li><li><code>HandlerExceptionResolver</code></li></ul><p><strong>基于过滤器的方式</strong>：近似全局异常处理。它能处理过滤器及之后的环节抛出的异常。</p><p>实现方式有：</p><ul><li>Filter</li></ul><p>关于 http 接口的全局异常处理，这里重点介绍<strong>基于异常处理器的方式</strong>，其余的方式建议查阅相关文档学习。</p><p>在使用基于异常处理器的方式之前需要导入<code>spring-boot-starter-web</code> 依赖即可，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过<code>@ControllerAdvice+@ExceptionHandler</code> 实现<strong>基于异常处理器的http接口全局异常处理：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* http 接口异常处理类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(&quot;org.example.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理业务异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = BizException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">bizExceptionHandler</span><span class="params">(HttpServletRequest request, BizException e)</span> &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;业务异常：&quot;</span> + e.getMessage() , e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理系统异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">systemExceptionHandler</span><span class="params">(HttpServletRequest request, SystemException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;系统异常：&quot;</span> + e.getMessage() , e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理未知异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">unknownExceptionHandler</span><span class="params">(HttpServletRequest request, Throwable e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;未知异常：&quot;</span> + e.getMessage() , e);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 HttpExceptionHandler 类中，<code>@RestControllerAdvice = @ControllerAdvice + @ResponseBody</code> ，如果有其他的异常需要处理，只需要定义<code>@ExceptionHandler</code>注解的方法处理即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>读完本文应该了解Java异常处理机制，当一个异常被抛出时，JVM会在当前的方法里寻找一个匹配的处理，如果没有找到，这个方法会强制结束并弹出当前栈帧，并且异常会重新抛给上层调用的方法（在调用方法帧）。如果在所有帧弹出前仍然没有找到合适的异常处理，这个线程将终止。如果这个异常在最后一个非守护线程里抛出，将会导致JVM自己终止，比如这个线程是个main线程。</p><p>最后对本文的内容做一个简单的总结，Java语言的异常处理方式有两种，一种是 try-catch 捕获异常，另一种是通过 throw 抛出异常。在程序中可以抛出两种类型的异常，一种是检查异常，另一种是非检查异常，应该尽量抛出非检查异常，遇到检查异常应该捕获进行处理不要抛给上层。在异常处理的时候应该尽可能晚的处理异常，最好是定义一个全局异常处理器，在全局异常处理器中处理所有抛出的异常，并将异常信息封装到 Result 对象中返回给调用者。</p><p>参考文档：</p><p><a href="https://link.zhihu.com/?target=http%3A//javainsimpleway.com/exception-handling-best-practices/">http://javainsimpleway.com/exception-handling-best-practices/</a></p><p><a href="https://link.zhihu.com/?target=https%3A//www.infoq.com/presentations/effective-api-design/">https://www.infoq.com/presentations/effective-api-design/</a></p><p><a href="https://link.zhihu.com/?target=https%3A//docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html">https://docs.oracle.com/javase/tutorial/essential/exceptions/advantages.html</a></p><p><a href="https://link.zhihu.com/?target=https%3A//docs.oracle.com/javase/specs/jvms/se8/html/jvms-3.html%23jvms-3.13">java 官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>Gallery</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
